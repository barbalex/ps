export default [
  {
    "statements": [
      "CREATE TABLE \"users\" (\n  \"user_id\" TEXT NOT NULL,\n  \"email\" TEXT,\n  \"auth_id\" TEXT,\n  \"label_replace_by_generated_column\" TEXT,\n  \"deleted\" INTEGER,\n  CONSTRAINT \"users_pkey\" PRIMARY KEY (\"user_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"users_email_idx\" ON \"users\" (\"email\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.users', 1);",
      "  /* Triggers for table users */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_users_primarykey;",
      "CREATE TRIGGER update_ensure_main_users_primarykey\n  BEFORE UPDATE ON \"main\".\"users\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"user_id\" != new.\"user_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column user_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_users_into_oplog;",
      "CREATE TRIGGER insert_main_users_into_oplog\n   AFTER INSERT ON \"main\".\"users\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.users')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'users', 'INSERT', json_object('user_id', new.\"user_id\"), json_object('auth_id', new.\"auth_id\", 'deleted', new.\"deleted\", 'email', new.\"email\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'user_id', new.\"user_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_users_into_oplog;",
      "CREATE TRIGGER update_main_users_into_oplog\n   AFTER UPDATE ON \"main\".\"users\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.users')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'users', 'UPDATE', json_object('user_id', new.\"user_id\"), json_object('auth_id', new.\"auth_id\", 'deleted', new.\"deleted\", 'email', new.\"email\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'user_id', new.\"user_id\"), json_object('auth_id', old.\"auth_id\", 'deleted', old.\"deleted\", 'email', old.\"email\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'user_id', old.\"user_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_users_into_oplog;",
      "CREATE TRIGGER delete_main_users_into_oplog\n   AFTER DELETE ON \"main\".\"users\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.users')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'users', 'DELETE', json_object('user_id', old.\"user_id\"), NULL, json_object('auth_id', old.\"auth_id\", 'deleted', old.\"deleted\", 'email', old.\"email\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'user_id', old.\"user_id\"), NULL);\nEND;"
    ],
    "version": "1"
  },
  {
    "statements": [
      "CREATE TABLE \"subproject_taxa\" (\n  \"subproject_taxon_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"subproject_id\" TEXT,\n  \"taxon_id\" TEXT,\n  \"label\" TEXT,\n  \"deleted\" INTEGER,\n  CONSTRAINT \"subproject_taxa_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"subproject_taxa_subproject_id_fkey\" FOREIGN KEY (\"subproject_id\") REFERENCES \"subprojects\" (\"subproject_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"subproject_taxa_taxon_id_fkey\" FOREIGN KEY (\"taxon_id\") REFERENCES \"taxa\" (\"taxon_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"subproject_taxa_pkey\" PRIMARY KEY (\"subproject_taxon_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"subproject_taxa_account_id_idx\" ON \"subproject_taxa\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"subproject_taxa_label_idx\" ON \"subproject_taxa\" (\"label\" ASC);\n",
      "CREATE INDEX \"subproject_taxa_subproject_id_idx\" ON \"subproject_taxa\" (\"subproject_id\" ASC);\n",
      "CREATE INDEX \"subproject_taxa_taxon_id_idx\" ON \"subproject_taxa\" (\"taxon_id\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.subproject_taxa', 1);",
      "  /* Triggers for table subproject_taxa */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_subproject_taxa_primarykey;",
      "CREATE TRIGGER update_ensure_main_subproject_taxa_primarykey\n  BEFORE UPDATE ON \"main\".\"subproject_taxa\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"subproject_taxon_id\" != new.\"subproject_taxon_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column subproject_taxon_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_subproject_taxa_into_oplog;",
      "CREATE TRIGGER insert_main_subproject_taxa_into_oplog\n   AFTER INSERT ON \"main\".\"subproject_taxa\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.subproject_taxa')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'subproject_taxa', 'INSERT', json_object('subproject_taxon_id', new.\"subproject_taxon_id\"), json_object('account_id', new.\"account_id\", 'deleted', new.\"deleted\", 'label', new.\"label\", 'subproject_id', new.\"subproject_id\", 'subproject_taxon_id', new.\"subproject_taxon_id\", 'taxon_id', new.\"taxon_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_subproject_taxa_into_oplog;",
      "CREATE TRIGGER update_main_subproject_taxa_into_oplog\n   AFTER UPDATE ON \"main\".\"subproject_taxa\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.subproject_taxa')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'subproject_taxa', 'UPDATE', json_object('subproject_taxon_id', new.\"subproject_taxon_id\"), json_object('account_id', new.\"account_id\", 'deleted', new.\"deleted\", 'label', new.\"label\", 'subproject_id', new.\"subproject_id\", 'subproject_taxon_id', new.\"subproject_taxon_id\", 'taxon_id', new.\"taxon_id\"), json_object('account_id', old.\"account_id\", 'deleted', old.\"deleted\", 'label', old.\"label\", 'subproject_id', old.\"subproject_id\", 'subproject_taxon_id', old.\"subproject_taxon_id\", 'taxon_id', old.\"taxon_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_subproject_taxa_into_oplog;",
      "CREATE TRIGGER delete_main_subproject_taxa_into_oplog\n   AFTER DELETE ON \"main\".\"subproject_taxa\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.subproject_taxa')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'subproject_taxa', 'DELETE', json_object('subproject_taxon_id', old.\"subproject_taxon_id\"), NULL, json_object('account_id', old.\"account_id\", 'deleted', old.\"deleted\", 'label', old.\"label\", 'subproject_id', old.\"subproject_id\", 'subproject_taxon_id', old.\"subproject_taxon_id\", 'taxon_id', old.\"taxon_id\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_subproject_taxa_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_subproject_taxa_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"subproject_taxa\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_subproject_taxa_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_subproject_taxa_account_id_into_oplog\n   AFTER UPDATE ON \"main\".\"subproject_taxa\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_subproject_taxa_subproject_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_subproject_taxa_subproject_id_into_oplog\n  AFTER INSERT ON \"main\".\"subproject_taxa\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.subprojects') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'subprojects', 'COMPENSATION', json_object('subproject_id', \"subproject_id\"), json_object('subproject_id', \"subproject_id\"), NULL, NULL\n  FROM \"main\".\"subprojects\" WHERE \"subproject_id\" = new.\"subproject_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_subproject_taxa_subproject_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_subproject_taxa_subproject_id_into_oplog\n   AFTER UPDATE ON \"main\".\"subproject_taxa\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.subprojects') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'subprojects', 'COMPENSATION', json_object('subproject_id', \"subproject_id\"), json_object('subproject_id', \"subproject_id\"), NULL, NULL\n  FROM \"main\".\"subprojects\" WHERE \"subproject_id\" = new.\"subproject_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_subproject_taxa_taxon_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_subproject_taxa_taxon_id_into_oplog\n  AFTER INSERT ON \"main\".\"subproject_taxa\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.taxa') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'taxa', 'COMPENSATION', json_object('taxon_id', \"taxon_id\"), json_object('taxon_id', \"taxon_id\"), NULL, NULL\n  FROM \"main\".\"taxa\" WHERE \"taxon_id\" = new.\"taxon_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_subproject_taxa_taxon_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_subproject_taxa_taxon_id_into_oplog\n   AFTER UPDATE ON \"main\".\"subproject_taxa\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.taxa') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'taxa', 'COMPENSATION', json_object('taxon_id', \"taxon_id\"), json_object('taxon_id', \"taxon_id\"), NULL, NULL\n  FROM \"main\".\"taxa\" WHERE \"taxon_id\" = new.\"taxon_id\";\nEND;"
    ],
    "version": "10"
  },
  {
    "statements": [
      "CREATE TABLE \"lists\" (\n  \"list_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"project_id\" TEXT,\n  \"name\" TEXT,\n  \"data\" TEXT_JSON,\n  \"obsolete\" INTEGER,\n  \"label_replace_by_generated_column\" TEXT,\n  \"deleted\" INTEGER,\n  CONSTRAINT \"lists_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"lists_project_id_fkey\" FOREIGN KEY (\"project_id\") REFERENCES \"projects\" (\"project_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"lists_pkey\" PRIMARY KEY (\"list_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"lists_account_id_idx\" ON \"lists\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"lists_name_idx\" ON \"lists\" (\"name\" ASC);\n",
      "CREATE INDEX \"lists_project_id_idx\" ON \"lists\" (\"project_id\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.lists', 1);",
      "  /* Triggers for table lists */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_lists_primarykey;",
      "CREATE TRIGGER update_ensure_main_lists_primarykey\n  BEFORE UPDATE ON \"main\".\"lists\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"list_id\" != new.\"list_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column list_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_lists_into_oplog;",
      "CREATE TRIGGER insert_main_lists_into_oplog\n   AFTER INSERT ON \"main\".\"lists\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.lists')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'lists', 'INSERT', json_object('list_id', new.\"list_id\"), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'deleted', new.\"deleted\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'list_id', new.\"list_id\", 'name', new.\"name\", 'obsolete', new.\"obsolete\", 'project_id', new.\"project_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_lists_into_oplog;",
      "CREATE TRIGGER update_main_lists_into_oplog\n   AFTER UPDATE ON \"main\".\"lists\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.lists')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'lists', 'UPDATE', json_object('list_id', new.\"list_id\"), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'deleted', new.\"deleted\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'list_id', new.\"list_id\", 'name', new.\"name\", 'obsolete', new.\"obsolete\", 'project_id', new.\"project_id\"), json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'deleted', old.\"deleted\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'list_id', old.\"list_id\", 'name', old.\"name\", 'obsolete', old.\"obsolete\", 'project_id', old.\"project_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_lists_into_oplog;",
      "CREATE TRIGGER delete_main_lists_into_oplog\n   AFTER DELETE ON \"main\".\"lists\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.lists')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'lists', 'DELETE', json_object('list_id', old.\"list_id\"), NULL, json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'deleted', old.\"deleted\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'list_id', old.\"list_id\", 'name', old.\"name\", 'obsolete', old.\"obsolete\", 'project_id', old.\"project_id\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_lists_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_lists_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"lists\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_lists_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_lists_account_id_into_oplog\n   AFTER UPDATE ON \"main\".\"lists\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_lists_project_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_lists_project_id_into_oplog\n  AFTER INSERT ON \"main\".\"lists\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.projects') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_object('project_id', \"project_id\"), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_lists_project_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_lists_project_id_into_oplog\n   AFTER UPDATE ON \"main\".\"lists\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.projects') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_object('project_id', \"project_id\"), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;"
    ],
    "version": "11"
  },
  {
    "statements": [
      "CREATE TABLE \"list_values\" (\n  \"list_value_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"list_id\" TEXT,\n  \"value\" TEXT,\n  \"obsolete\" INTEGER,\n  \"label_replace_by_generated_column\" TEXT,\n  \"deleted\" INTEGER,\n  CONSTRAINT \"list_values_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"list_values_list_id_fkey\" FOREIGN KEY (\"list_id\") REFERENCES \"lists\" (\"list_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"list_values_pkey\" PRIMARY KEY (\"list_value_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"list_values_account_id_idx\" ON \"list_values\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"list_values_list_id_idx\" ON \"list_values\" (\"list_id\" ASC);\n",
      "CREATE INDEX \"list_values_value_idx\" ON \"list_values\" (\"value\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.list_values', 1);",
      "  /* Triggers for table list_values */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_list_values_primarykey;",
      "CREATE TRIGGER update_ensure_main_list_values_primarykey\n  BEFORE UPDATE ON \"main\".\"list_values\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"list_value_id\" != new.\"list_value_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column list_value_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_list_values_into_oplog;",
      "CREATE TRIGGER insert_main_list_values_into_oplog\n   AFTER INSERT ON \"main\".\"list_values\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.list_values')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'list_values', 'INSERT', json_object('list_value_id', new.\"list_value_id\"), json_object('account_id', new.\"account_id\", 'deleted', new.\"deleted\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'list_id', new.\"list_id\", 'list_value_id', new.\"list_value_id\", 'obsolete', new.\"obsolete\", 'value', new.\"value\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_list_values_into_oplog;",
      "CREATE TRIGGER update_main_list_values_into_oplog\n   AFTER UPDATE ON \"main\".\"list_values\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.list_values')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'list_values', 'UPDATE', json_object('list_value_id', new.\"list_value_id\"), json_object('account_id', new.\"account_id\", 'deleted', new.\"deleted\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'list_id', new.\"list_id\", 'list_value_id', new.\"list_value_id\", 'obsolete', new.\"obsolete\", 'value', new.\"value\"), json_object('account_id', old.\"account_id\", 'deleted', old.\"deleted\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'list_id', old.\"list_id\", 'list_value_id', old.\"list_value_id\", 'obsolete', old.\"obsolete\", 'value', old.\"value\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_list_values_into_oplog;",
      "CREATE TRIGGER delete_main_list_values_into_oplog\n   AFTER DELETE ON \"main\".\"list_values\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.list_values')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'list_values', 'DELETE', json_object('list_value_id', old.\"list_value_id\"), NULL, json_object('account_id', old.\"account_id\", 'deleted', old.\"deleted\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'list_id', old.\"list_id\", 'list_value_id', old.\"list_value_id\", 'obsolete', old.\"obsolete\", 'value', old.\"value\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_list_values_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_list_values_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"list_values\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_list_values_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_list_values_account_id_into_oplog\n   AFTER UPDATE ON \"main\".\"list_values\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_list_values_list_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_list_values_list_id_into_oplog\n  AFTER INSERT ON \"main\".\"list_values\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.lists') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'lists', 'COMPENSATION', json_object('list_id', \"list_id\"), json_object('list_id', \"list_id\"), NULL, NULL\n  FROM \"main\".\"lists\" WHERE \"list_id\" = new.\"list_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_list_values_list_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_list_values_list_id_into_oplog\n   AFTER UPDATE ON \"main\".\"list_values\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.lists') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'lists', 'COMPENSATION', json_object('list_id', \"list_id\"), json_object('list_id', \"list_id\"), NULL, NULL\n  FROM \"main\".\"lists\" WHERE \"list_id\" = new.\"list_id\";\nEND;"
    ],
    "version": "12"
  },
  {
    "statements": [
      "CREATE TABLE \"units\" (\n  \"unit_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"project_id\" TEXT,\n  \"use_for_action_values\" INTEGER,\n  \"use_for_action_report_values\" INTEGER,\n  \"use_for_check_values\" INTEGER,\n  \"use_for_place_report_values\" INTEGER,\n  \"use_for_goal_report_values\" INTEGER,\n  \"use_for_subproject_taxa\" INTEGER,\n  \"use_for_check_taxa\" INTEGER,\n  \"name\" TEXT,\n  \"summable\" INTEGER,\n  \"sort\" INTEGER,\n  \"type\" TEXT,\n  \"list_id\" TEXT,\n  \"label_replace_by_generated_column\" TEXT,\n  \"deleted\" INTEGER,\n  CONSTRAINT \"units_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"units_list_id_fkey\" FOREIGN KEY (\"list_id\") REFERENCES \"lists\" (\"list_id\") ON UPDATE CASCADE,\n  CONSTRAINT \"units_project_id_fkey\" FOREIGN KEY (\"project_id\") REFERENCES \"projects\" (\"project_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"units_pkey\" PRIMARY KEY (\"unit_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"units_account_id_idx\" ON \"units\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"units_list_id_idx\" ON \"units\" (\"list_id\" ASC);\n",
      "CREATE INDEX \"units_name_idx\" ON \"units\" (\"name\" ASC);\n",
      "CREATE INDEX \"units_project_id_idx\" ON \"units\" (\"project_id\" ASC);\n",
      "CREATE INDEX \"units_sort_idx\" ON \"units\" (\"sort\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.units', 1);",
      "  /* Triggers for table units */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_units_primarykey;",
      "CREATE TRIGGER update_ensure_main_units_primarykey\n  BEFORE UPDATE ON \"main\".\"units\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"unit_id\" != new.\"unit_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column unit_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_units_into_oplog;",
      "CREATE TRIGGER insert_main_units_into_oplog\n   AFTER INSERT ON \"main\".\"units\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.units')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'units', 'INSERT', json_object('unit_id', new.\"unit_id\"), json_object('account_id', new.\"account_id\", 'deleted', new.\"deleted\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'list_id', new.\"list_id\", 'name', new.\"name\", 'project_id', new.\"project_id\", 'sort', new.\"sort\", 'summable', new.\"summable\", 'type', new.\"type\", 'unit_id', new.\"unit_id\", 'use_for_action_report_values', new.\"use_for_action_report_values\", 'use_for_action_values', new.\"use_for_action_values\", 'use_for_check_taxa', new.\"use_for_check_taxa\", 'use_for_check_values', new.\"use_for_check_values\", 'use_for_goal_report_values', new.\"use_for_goal_report_values\", 'use_for_place_report_values', new.\"use_for_place_report_values\", 'use_for_subproject_taxa', new.\"use_for_subproject_taxa\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_units_into_oplog;",
      "CREATE TRIGGER update_main_units_into_oplog\n   AFTER UPDATE ON \"main\".\"units\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.units')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'units', 'UPDATE', json_object('unit_id', new.\"unit_id\"), json_object('account_id', new.\"account_id\", 'deleted', new.\"deleted\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'list_id', new.\"list_id\", 'name', new.\"name\", 'project_id', new.\"project_id\", 'sort', new.\"sort\", 'summable', new.\"summable\", 'type', new.\"type\", 'unit_id', new.\"unit_id\", 'use_for_action_report_values', new.\"use_for_action_report_values\", 'use_for_action_values', new.\"use_for_action_values\", 'use_for_check_taxa', new.\"use_for_check_taxa\", 'use_for_check_values', new.\"use_for_check_values\", 'use_for_goal_report_values', new.\"use_for_goal_report_values\", 'use_for_place_report_values', new.\"use_for_place_report_values\", 'use_for_subproject_taxa', new.\"use_for_subproject_taxa\"), json_object('account_id', old.\"account_id\", 'deleted', old.\"deleted\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'list_id', old.\"list_id\", 'name', old.\"name\", 'project_id', old.\"project_id\", 'sort', old.\"sort\", 'summable', old.\"summable\", 'type', old.\"type\", 'unit_id', old.\"unit_id\", 'use_for_action_report_values', old.\"use_for_action_report_values\", 'use_for_action_values', old.\"use_for_action_values\", 'use_for_check_taxa', old.\"use_for_check_taxa\", 'use_for_check_values', old.\"use_for_check_values\", 'use_for_goal_report_values', old.\"use_for_goal_report_values\", 'use_for_place_report_values', old.\"use_for_place_report_values\", 'use_for_subproject_taxa', old.\"use_for_subproject_taxa\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_units_into_oplog;",
      "CREATE TRIGGER delete_main_units_into_oplog\n   AFTER DELETE ON \"main\".\"units\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.units')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'units', 'DELETE', json_object('unit_id', old.\"unit_id\"), NULL, json_object('account_id', old.\"account_id\", 'deleted', old.\"deleted\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'list_id', old.\"list_id\", 'name', old.\"name\", 'project_id', old.\"project_id\", 'sort', old.\"sort\", 'summable', old.\"summable\", 'type', old.\"type\", 'unit_id', old.\"unit_id\", 'use_for_action_report_values', old.\"use_for_action_report_values\", 'use_for_action_values', old.\"use_for_action_values\", 'use_for_check_taxa', old.\"use_for_check_taxa\", 'use_for_check_values', old.\"use_for_check_values\", 'use_for_goal_report_values', old.\"use_for_goal_report_values\", 'use_for_place_report_values', old.\"use_for_place_report_values\", 'use_for_subproject_taxa', old.\"use_for_subproject_taxa\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_units_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_units_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"units\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_units_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_units_account_id_into_oplog\n   AFTER UPDATE ON \"main\".\"units\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_units_list_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_units_list_id_into_oplog\n  AFTER INSERT ON \"main\".\"units\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.lists') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'lists', 'COMPENSATION', json_object('list_id', \"list_id\"), json_object('list_id', \"list_id\"), NULL, NULL\n  FROM \"main\".\"lists\" WHERE \"list_id\" = new.\"list_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_units_list_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_units_list_id_into_oplog\n   AFTER UPDATE ON \"main\".\"units\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.lists') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'lists', 'COMPENSATION', json_object('list_id', \"list_id\"), json_object('list_id', \"list_id\"), NULL, NULL\n  FROM \"main\".\"lists\" WHERE \"list_id\" = new.\"list_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_units_project_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_units_project_id_into_oplog\n  AFTER INSERT ON \"main\".\"units\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.projects') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_object('project_id', \"project_id\"), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_units_project_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_units_project_id_into_oplog\n   AFTER UPDATE ON \"main\".\"units\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.projects') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_object('project_id', \"project_id\"), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;"
    ],
    "version": "13"
  },
  {
    "statements": [
      "CREATE TABLE \"places\" (\n  \"place_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"subproject_id\" TEXT,\n  \"parent_id\" TEXT,\n  \"level\" INTEGER,\n  \"data\" TEXT_JSON,\n  \"label\" TEXT,\n  \"files_active_places\" INTEGER,\n  \"deleted\" INTEGER,\n  CONSTRAINT \"places_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"places_parent_id_fkey\" FOREIGN KEY (\"parent_id\") REFERENCES \"places\" (\"place_id\") ON UPDATE CASCADE,\n  CONSTRAINT \"places_subproject_id_fkey\" FOREIGN KEY (\"subproject_id\") REFERENCES \"subprojects\" (\"subproject_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"places_pkey\" PRIMARY KEY (\"place_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"places_account_id_idx\" ON \"places\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"places_label_idx\" ON \"places\" (\"label\" ASC);\n",
      "CREATE INDEX \"places_level_idx\" ON \"places\" (\"level\" ASC);\n",
      "CREATE INDEX \"places_parent_id_idx\" ON \"places\" (\"parent_id\" ASC);\n",
      "CREATE INDEX \"places_subproject_id_idx\" ON \"places\" (\"subproject_id\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.places', 1);",
      "  /* Triggers for table places */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_places_primarykey;",
      "CREATE TRIGGER update_ensure_main_places_primarykey\n  BEFORE UPDATE ON \"main\".\"places\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"place_id\" != new.\"place_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column place_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_places_into_oplog;",
      "CREATE TRIGGER insert_main_places_into_oplog\n   AFTER INSERT ON \"main\".\"places\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.places')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'places', 'INSERT', json_object('place_id', new.\"place_id\"), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'deleted', new.\"deleted\", 'files_active_places', new.\"files_active_places\", 'label', new.\"label\", 'level', new.\"level\", 'parent_id', new.\"parent_id\", 'place_id', new.\"place_id\", 'subproject_id', new.\"subproject_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_places_into_oplog;",
      "CREATE TRIGGER update_main_places_into_oplog\n   AFTER UPDATE ON \"main\".\"places\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.places')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'places', 'UPDATE', json_object('place_id', new.\"place_id\"), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'deleted', new.\"deleted\", 'files_active_places', new.\"files_active_places\", 'label', new.\"label\", 'level', new.\"level\", 'parent_id', new.\"parent_id\", 'place_id', new.\"place_id\", 'subproject_id', new.\"subproject_id\"), json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'deleted', old.\"deleted\", 'files_active_places', old.\"files_active_places\", 'label', old.\"label\", 'level', old.\"level\", 'parent_id', old.\"parent_id\", 'place_id', old.\"place_id\", 'subproject_id', old.\"subproject_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_places_into_oplog;",
      "CREATE TRIGGER delete_main_places_into_oplog\n   AFTER DELETE ON \"main\".\"places\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.places')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'places', 'DELETE', json_object('place_id', old.\"place_id\"), NULL, json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'deleted', old.\"deleted\", 'files_active_places', old.\"files_active_places\", 'label', old.\"label\", 'level', old.\"level\", 'parent_id', old.\"parent_id\", 'place_id', old.\"place_id\", 'subproject_id', old.\"subproject_id\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_places_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_places_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"places\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_places_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_places_account_id_into_oplog\n   AFTER UPDATE ON \"main\".\"places\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_places_parent_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_places_parent_id_into_oplog\n  AFTER INSERT ON \"main\".\"places\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.places') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'places', 'COMPENSATION', json_object('place_id', \"place_id\"), json_object('place_id', \"place_id\"), NULL, NULL\n  FROM \"main\".\"places\" WHERE \"place_id\" = new.\"parent_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_places_parent_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_places_parent_id_into_oplog\n   AFTER UPDATE ON \"main\".\"places\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.places') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'places', 'COMPENSATION', json_object('place_id', \"place_id\"), json_object('place_id', \"place_id\"), NULL, NULL\n  FROM \"main\".\"places\" WHERE \"place_id\" = new.\"parent_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_places_subproject_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_places_subproject_id_into_oplog\n  AFTER INSERT ON \"main\".\"places\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.subprojects') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'subprojects', 'COMPENSATION', json_object('subproject_id', \"subproject_id\"), json_object('subproject_id', \"subproject_id\"), NULL, NULL\n  FROM \"main\".\"subprojects\" WHERE \"subproject_id\" = new.\"subproject_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_places_subproject_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_places_subproject_id_into_oplog\n   AFTER UPDATE ON \"main\".\"places\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.subprojects') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'subprojects', 'COMPENSATION', json_object('subproject_id', \"subproject_id\"), json_object('subproject_id', \"subproject_id\"), NULL, NULL\n  FROM \"main\".\"subprojects\" WHERE \"subproject_id\" = new.\"subproject_id\";\nEND;"
    ],
    "version": "14"
  },
  {
    "statements": [
      "CREATE TABLE \"actions\" (\n  \"action_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"place_id\" TEXT,\n  \"date\" TEXT,\n  \"data\" TEXT_JSON,\n  \"relevant_for_reports\" INTEGER,\n  \"label_replace_by_generated_column\" TEXT,\n  \"deleted\" INTEGER,\n  CONSTRAINT \"actions_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"actions_place_id_fkey\" FOREIGN KEY (\"place_id\") REFERENCES \"places\" (\"place_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"actions_pkey\" PRIMARY KEY (\"action_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"actions_account_id_idx\" ON \"actions\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"actions_date_idx\" ON \"actions\" (\"date\" ASC);\n",
      "CREATE INDEX \"actions_place_id_idx\" ON \"actions\" (\"place_id\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.actions', 1);",
      "  /* Triggers for table actions */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_actions_primarykey;",
      "CREATE TRIGGER update_ensure_main_actions_primarykey\n  BEFORE UPDATE ON \"main\".\"actions\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"action_id\" != new.\"action_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column action_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_actions_into_oplog;",
      "CREATE TRIGGER insert_main_actions_into_oplog\n   AFTER INSERT ON \"main\".\"actions\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.actions')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'actions', 'INSERT', json_object('action_id', new.\"action_id\"), json_object('account_id', new.\"account_id\", 'action_id', new.\"action_id\", 'data', new.\"data\", 'date', new.\"date\", 'deleted', new.\"deleted\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'place_id', new.\"place_id\", 'relevant_for_reports', new.\"relevant_for_reports\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_actions_into_oplog;",
      "CREATE TRIGGER update_main_actions_into_oplog\n   AFTER UPDATE ON \"main\".\"actions\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.actions')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'actions', 'UPDATE', json_object('action_id', new.\"action_id\"), json_object('account_id', new.\"account_id\", 'action_id', new.\"action_id\", 'data', new.\"data\", 'date', new.\"date\", 'deleted', new.\"deleted\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'place_id', new.\"place_id\", 'relevant_for_reports', new.\"relevant_for_reports\"), json_object('account_id', old.\"account_id\", 'action_id', old.\"action_id\", 'data', old.\"data\", 'date', old.\"date\", 'deleted', old.\"deleted\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'place_id', old.\"place_id\", 'relevant_for_reports', old.\"relevant_for_reports\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_actions_into_oplog;",
      "CREATE TRIGGER delete_main_actions_into_oplog\n   AFTER DELETE ON \"main\".\"actions\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.actions')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'actions', 'DELETE', json_object('action_id', old.\"action_id\"), NULL, json_object('account_id', old.\"account_id\", 'action_id', old.\"action_id\", 'data', old.\"data\", 'date', old.\"date\", 'deleted', old.\"deleted\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'place_id', old.\"place_id\", 'relevant_for_reports', old.\"relevant_for_reports\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_actions_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_actions_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"actions\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_actions_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_actions_account_id_into_oplog\n   AFTER UPDATE ON \"main\".\"actions\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_actions_place_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_actions_place_id_into_oplog\n  AFTER INSERT ON \"main\".\"actions\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.places') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'places', 'COMPENSATION', json_object('place_id', \"place_id\"), json_object('place_id', \"place_id\"), NULL, NULL\n  FROM \"main\".\"places\" WHERE \"place_id\" = new.\"place_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_actions_place_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_actions_place_id_into_oplog\n   AFTER UPDATE ON \"main\".\"actions\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.places') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'places', 'COMPENSATION', json_object('place_id', \"place_id\"), json_object('place_id', \"place_id\"), NULL, NULL\n  FROM \"main\".\"places\" WHERE \"place_id\" = new.\"place_id\";\nEND;"
    ],
    "version": "15"
  },
  {
    "statements": [
      "CREATE TABLE \"action_values\" (\n  \"action_value_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"action_id\" TEXT,\n  \"unit_id\" TEXT,\n  \"value_integer\" INTEGER,\n  \"value_numeric\" REAL,\n  \"value_text\" TEXT,\n  \"label\" TEXT,\n  \"deleted\" INTEGER,\n  CONSTRAINT \"action_values_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"action_values_action_id_fkey\" FOREIGN KEY (\"action_id\") REFERENCES \"actions\" (\"action_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"action_values_unit_id_fkey\" FOREIGN KEY (\"unit_id\") REFERENCES \"units\" (\"unit_id\") ON UPDATE CASCADE,\n  CONSTRAINT \"action_values_pkey\" PRIMARY KEY (\"action_value_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"action_values_account_id_idx\" ON \"action_values\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"action_values_action_id_idx\" ON \"action_values\" (\"action_id\" ASC);\n",
      "CREATE INDEX \"action_values_label_idx\" ON \"action_values\" (\"label\" ASC);\n",
      "CREATE INDEX \"action_values_unit_id_idx\" ON \"action_values\" (\"unit_id\" ASC);\n",
      "CREATE INDEX \"action_values_value_integer_idx\" ON \"action_values\" (\"value_integer\" ASC);\n",
      "CREATE INDEX \"action_values_value_numeric_idx\" ON \"action_values\" (\"value_numeric\" ASC);\n",
      "CREATE INDEX \"action_values_value_text_idx\" ON \"action_values\" (\"value_text\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.action_values', 1);",
      "  /* Triggers for table action_values */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_action_values_primarykey;",
      "CREATE TRIGGER update_ensure_main_action_values_primarykey\n  BEFORE UPDATE ON \"main\".\"action_values\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"action_value_id\" != new.\"action_value_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column action_value_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_action_values_into_oplog;",
      "CREATE TRIGGER insert_main_action_values_into_oplog\n   AFTER INSERT ON \"main\".\"action_values\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.action_values')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'action_values', 'INSERT', json_object('action_value_id', new.\"action_value_id\"), json_object('account_id', new.\"account_id\", 'action_id', new.\"action_id\", 'action_value_id', new.\"action_value_id\", 'deleted', new.\"deleted\", 'label', new.\"label\", 'unit_id', new.\"unit_id\", 'value_integer', new.\"value_integer\", 'value_numeric', cast(new.\"value_numeric\" as TEXT), 'value_text', new.\"value_text\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_action_values_into_oplog;",
      "CREATE TRIGGER update_main_action_values_into_oplog\n   AFTER UPDATE ON \"main\".\"action_values\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.action_values')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'action_values', 'UPDATE', json_object('action_value_id', new.\"action_value_id\"), json_object('account_id', new.\"account_id\", 'action_id', new.\"action_id\", 'action_value_id', new.\"action_value_id\", 'deleted', new.\"deleted\", 'label', new.\"label\", 'unit_id', new.\"unit_id\", 'value_integer', new.\"value_integer\", 'value_numeric', cast(new.\"value_numeric\" as TEXT), 'value_text', new.\"value_text\"), json_object('account_id', old.\"account_id\", 'action_id', old.\"action_id\", 'action_value_id', old.\"action_value_id\", 'deleted', old.\"deleted\", 'label', old.\"label\", 'unit_id', old.\"unit_id\", 'value_integer', old.\"value_integer\", 'value_numeric', cast(old.\"value_numeric\" as TEXT), 'value_text', old.\"value_text\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_action_values_into_oplog;",
      "CREATE TRIGGER delete_main_action_values_into_oplog\n   AFTER DELETE ON \"main\".\"action_values\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.action_values')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'action_values', 'DELETE', json_object('action_value_id', old.\"action_value_id\"), NULL, json_object('account_id', old.\"account_id\", 'action_id', old.\"action_id\", 'action_value_id', old.\"action_value_id\", 'deleted', old.\"deleted\", 'label', old.\"label\", 'unit_id', old.\"unit_id\", 'value_integer', old.\"value_integer\", 'value_numeric', cast(old.\"value_numeric\" as TEXT), 'value_text', old.\"value_text\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_action_values_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_action_values_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"action_values\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_action_values_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_action_values_account_id_into_oplog\n   AFTER UPDATE ON \"main\".\"action_values\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_action_values_action_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_action_values_action_id_into_oplog\n  AFTER INSERT ON \"main\".\"action_values\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.actions') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'actions', 'COMPENSATION', json_object('action_id', \"action_id\"), json_object('action_id', \"action_id\"), NULL, NULL\n  FROM \"main\".\"actions\" WHERE \"action_id\" = new.\"action_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_action_values_action_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_action_values_action_id_into_oplog\n   AFTER UPDATE ON \"main\".\"action_values\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.actions') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'actions', 'COMPENSATION', json_object('action_id', \"action_id\"), json_object('action_id', \"action_id\"), NULL, NULL\n  FROM \"main\".\"actions\" WHERE \"action_id\" = new.\"action_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_action_values_unit_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_action_values_unit_id_into_oplog\n  AFTER INSERT ON \"main\".\"action_values\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.units') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'units', 'COMPENSATION', json_object('unit_id', \"unit_id\"), json_object('unit_id', \"unit_id\"), NULL, NULL\n  FROM \"main\".\"units\" WHERE \"unit_id\" = new.\"unit_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_action_values_unit_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_action_values_unit_id_into_oplog\n   AFTER UPDATE ON \"main\".\"action_values\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.units') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'units', 'COMPENSATION', json_object('unit_id', \"unit_id\"), json_object('unit_id', \"unit_id\"), NULL, NULL\n  FROM \"main\".\"units\" WHERE \"unit_id\" = new.\"unit_id\";\nEND;"
    ],
    "version": "16"
  },
  {
    "statements": [
      "CREATE TABLE \"action_reports\" (\n  \"action_report_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"action_id\" TEXT,\n  \"year\" INTEGER,\n  \"data\" TEXT_JSON,\n  \"label_replace_by_generated_column\" TEXT,\n  \"deleted\" INTEGER,\n  CONSTRAINT \"action_reports_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"action_reports_action_id_fkey\" FOREIGN KEY (\"action_id\") REFERENCES \"actions\" (\"action_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"action_reports_pkey\" PRIMARY KEY (\"action_report_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"action_reports_account_id_idx\" ON \"action_reports\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"action_reports_action_id_idx\" ON \"action_reports\" (\"action_id\" ASC);\n",
      "CREATE INDEX \"action_reports_year_idx\" ON \"action_reports\" (\"year\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.action_reports', 1);",
      "  /* Triggers for table action_reports */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_action_reports_primarykey;",
      "CREATE TRIGGER update_ensure_main_action_reports_primarykey\n  BEFORE UPDATE ON \"main\".\"action_reports\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"action_report_id\" != new.\"action_report_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column action_report_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_action_reports_into_oplog;",
      "CREATE TRIGGER insert_main_action_reports_into_oplog\n   AFTER INSERT ON \"main\".\"action_reports\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.action_reports')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'action_reports', 'INSERT', json_object('action_report_id', new.\"action_report_id\"), json_object('account_id', new.\"account_id\", 'action_id', new.\"action_id\", 'action_report_id', new.\"action_report_id\", 'data', new.\"data\", 'deleted', new.\"deleted\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'year', new.\"year\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_action_reports_into_oplog;",
      "CREATE TRIGGER update_main_action_reports_into_oplog\n   AFTER UPDATE ON \"main\".\"action_reports\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.action_reports')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'action_reports', 'UPDATE', json_object('action_report_id', new.\"action_report_id\"), json_object('account_id', new.\"account_id\", 'action_id', new.\"action_id\", 'action_report_id', new.\"action_report_id\", 'data', new.\"data\", 'deleted', new.\"deleted\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'year', new.\"year\"), json_object('account_id', old.\"account_id\", 'action_id', old.\"action_id\", 'action_report_id', old.\"action_report_id\", 'data', old.\"data\", 'deleted', old.\"deleted\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'year', old.\"year\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_action_reports_into_oplog;",
      "CREATE TRIGGER delete_main_action_reports_into_oplog\n   AFTER DELETE ON \"main\".\"action_reports\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.action_reports')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'action_reports', 'DELETE', json_object('action_report_id', old.\"action_report_id\"), NULL, json_object('account_id', old.\"account_id\", 'action_id', old.\"action_id\", 'action_report_id', old.\"action_report_id\", 'data', old.\"data\", 'deleted', old.\"deleted\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'year', old.\"year\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_action_reports_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_action_reports_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"action_reports\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_action_reports_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_action_reports_account_id_into_oplog\n   AFTER UPDATE ON \"main\".\"action_reports\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_action_reports_action_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_action_reports_action_id_into_oplog\n  AFTER INSERT ON \"main\".\"action_reports\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.actions') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'actions', 'COMPENSATION', json_object('action_id', \"action_id\"), json_object('action_id', \"action_id\"), NULL, NULL\n  FROM \"main\".\"actions\" WHERE \"action_id\" = new.\"action_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_action_reports_action_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_action_reports_action_id_into_oplog\n   AFTER UPDATE ON \"main\".\"action_reports\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.actions') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'actions', 'COMPENSATION', json_object('action_id', \"action_id\"), json_object('action_id', \"action_id\"), NULL, NULL\n  FROM \"main\".\"actions\" WHERE \"action_id\" = new.\"action_id\";\nEND;"
    ],
    "version": "17"
  },
  {
    "statements": [
      "CREATE TABLE \"action_report_values\" (\n  \"action_report_value_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"action_report_id\" TEXT,\n  \"unit_id\" TEXT,\n  \"value_integer\" INTEGER,\n  \"value_numeric\" REAL,\n  \"value_text\" TEXT,\n  \"label\" TEXT,\n  \"deleted\" INTEGER,\n  CONSTRAINT \"action_report_values_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"action_report_values_action_report_id_fkey\" FOREIGN KEY (\"action_report_id\") REFERENCES \"action_reports\" (\"action_report_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"action_report_values_unit_id_fkey\" FOREIGN KEY (\"unit_id\") REFERENCES \"units\" (\"unit_id\") ON UPDATE CASCADE,\n  CONSTRAINT \"action_report_values_pkey\" PRIMARY KEY (\"action_report_value_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"action_report_values_account_id_idx\" ON \"action_report_values\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"action_report_values_action_report_id_idx\" ON \"action_report_values\" (\"action_report_id\" ASC);\n",
      "CREATE INDEX \"action_report_values_label_idx\" ON \"action_report_values\" (\"label\" ASC);\n",
      "CREATE INDEX \"action_report_values_unit_id_idx\" ON \"action_report_values\" (\"unit_id\" ASC);\n",
      "CREATE INDEX \"action_report_values_value_integer_idx\" ON \"action_report_values\" (\"value_integer\" ASC);\n",
      "CREATE INDEX \"action_report_values_value_numeric_idx\" ON \"action_report_values\" (\"value_numeric\" ASC);\n",
      "CREATE INDEX \"action_report_values_value_text_idx\" ON \"action_report_values\" (\"value_text\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.action_report_values', 1);",
      "  /* Triggers for table action_report_values */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_action_report_values_primarykey;",
      "CREATE TRIGGER update_ensure_main_action_report_values_primarykey\n  BEFORE UPDATE ON \"main\".\"action_report_values\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"action_report_value_id\" != new.\"action_report_value_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column action_report_value_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_action_report_values_into_oplog;",
      "CREATE TRIGGER insert_main_action_report_values_into_oplog\n   AFTER INSERT ON \"main\".\"action_report_values\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.action_report_values')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'action_report_values', 'INSERT', json_object('action_report_value_id', new.\"action_report_value_id\"), json_object('account_id', new.\"account_id\", 'action_report_id', new.\"action_report_id\", 'action_report_value_id', new.\"action_report_value_id\", 'deleted', new.\"deleted\", 'label', new.\"label\", 'unit_id', new.\"unit_id\", 'value_integer', new.\"value_integer\", 'value_numeric', cast(new.\"value_numeric\" as TEXT), 'value_text', new.\"value_text\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_action_report_values_into_oplog;",
      "CREATE TRIGGER update_main_action_report_values_into_oplog\n   AFTER UPDATE ON \"main\".\"action_report_values\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.action_report_values')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'action_report_values', 'UPDATE', json_object('action_report_value_id', new.\"action_report_value_id\"), json_object('account_id', new.\"account_id\", 'action_report_id', new.\"action_report_id\", 'action_report_value_id', new.\"action_report_value_id\", 'deleted', new.\"deleted\", 'label', new.\"label\", 'unit_id', new.\"unit_id\", 'value_integer', new.\"value_integer\", 'value_numeric', cast(new.\"value_numeric\" as TEXT), 'value_text', new.\"value_text\"), json_object('account_id', old.\"account_id\", 'action_report_id', old.\"action_report_id\", 'action_report_value_id', old.\"action_report_value_id\", 'deleted', old.\"deleted\", 'label', old.\"label\", 'unit_id', old.\"unit_id\", 'value_integer', old.\"value_integer\", 'value_numeric', cast(old.\"value_numeric\" as TEXT), 'value_text', old.\"value_text\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_action_report_values_into_oplog;",
      "CREATE TRIGGER delete_main_action_report_values_into_oplog\n   AFTER DELETE ON \"main\".\"action_report_values\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.action_report_values')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'action_report_values', 'DELETE', json_object('action_report_value_id', old.\"action_report_value_id\"), NULL, json_object('account_id', old.\"account_id\", 'action_report_id', old.\"action_report_id\", 'action_report_value_id', old.\"action_report_value_id\", 'deleted', old.\"deleted\", 'label', old.\"label\", 'unit_id', old.\"unit_id\", 'value_integer', old.\"value_integer\", 'value_numeric', cast(old.\"value_numeric\" as TEXT), 'value_text', old.\"value_text\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_action_report_values_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_action_report_values_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"action_report_values\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_action_report_values_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_action_report_values_account_id_into_oplog\n   AFTER UPDATE ON \"main\".\"action_report_values\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_action_report_values_action_report_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_action_report_values_action_report_id_into_oplog\n  AFTER INSERT ON \"main\".\"action_report_values\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.action_reports') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'action_reports', 'COMPENSATION', json_object('action_report_id', \"action_report_id\"), json_object('action_report_id', \"action_report_id\"), NULL, NULL\n  FROM \"main\".\"action_reports\" WHERE \"action_report_id\" = new.\"action_report_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_action_report_values_action_report_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_action_report_values_action_report_id_into_oplog\n   AFTER UPDATE ON \"main\".\"action_report_values\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.action_reports') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'action_reports', 'COMPENSATION', json_object('action_report_id', \"action_report_id\"), json_object('action_report_id', \"action_report_id\"), NULL, NULL\n  FROM \"main\".\"action_reports\" WHERE \"action_report_id\" = new.\"action_report_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_action_report_values_unit_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_action_report_values_unit_id_into_oplog\n  AFTER INSERT ON \"main\".\"action_report_values\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.units') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'units', 'COMPENSATION', json_object('unit_id', \"unit_id\"), json_object('unit_id', \"unit_id\"), NULL, NULL\n  FROM \"main\".\"units\" WHERE \"unit_id\" = new.\"unit_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_action_report_values_unit_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_action_report_values_unit_id_into_oplog\n   AFTER UPDATE ON \"main\".\"action_report_values\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.units') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'units', 'COMPENSATION', json_object('unit_id', \"unit_id\"), json_object('unit_id', \"unit_id\"), NULL, NULL\n  FROM \"main\".\"units\" WHERE \"unit_id\" = new.\"unit_id\";\nEND;"
    ],
    "version": "18"
  },
  {
    "statements": [
      "CREATE TABLE \"checks\" (\n  \"check_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"place_id\" TEXT,\n  \"date\" TEXT,\n  \"data\" TEXT_JSON,\n  \"relevant_for_reports\" INTEGER,\n  \"label_replace_by_generated_column\" TEXT,\n  \"deleted\" INTEGER,\n  CONSTRAINT \"checks_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"checks_place_id_fkey\" FOREIGN KEY (\"place_id\") REFERENCES \"places\" (\"place_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"checks_pkey\" PRIMARY KEY (\"check_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"checks_account_id_idx\" ON \"checks\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"checks_date_idx\" ON \"checks\" (\"date\" ASC);\n",
      "CREATE INDEX \"checks_place_id_idx\" ON \"checks\" (\"place_id\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.checks', 1);",
      "  /* Triggers for table checks */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_checks_primarykey;",
      "CREATE TRIGGER update_ensure_main_checks_primarykey\n  BEFORE UPDATE ON \"main\".\"checks\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"check_id\" != new.\"check_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column check_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_checks_into_oplog;",
      "CREATE TRIGGER insert_main_checks_into_oplog\n   AFTER INSERT ON \"main\".\"checks\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.checks')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'checks', 'INSERT', json_object('check_id', new.\"check_id\"), json_object('account_id', new.\"account_id\", 'check_id', new.\"check_id\", 'data', new.\"data\", 'date', new.\"date\", 'deleted', new.\"deleted\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'place_id', new.\"place_id\", 'relevant_for_reports', new.\"relevant_for_reports\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_checks_into_oplog;",
      "CREATE TRIGGER update_main_checks_into_oplog\n   AFTER UPDATE ON \"main\".\"checks\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.checks')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'checks', 'UPDATE', json_object('check_id', new.\"check_id\"), json_object('account_id', new.\"account_id\", 'check_id', new.\"check_id\", 'data', new.\"data\", 'date', new.\"date\", 'deleted', new.\"deleted\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'place_id', new.\"place_id\", 'relevant_for_reports', new.\"relevant_for_reports\"), json_object('account_id', old.\"account_id\", 'check_id', old.\"check_id\", 'data', old.\"data\", 'date', old.\"date\", 'deleted', old.\"deleted\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'place_id', old.\"place_id\", 'relevant_for_reports', old.\"relevant_for_reports\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_checks_into_oplog;",
      "CREATE TRIGGER delete_main_checks_into_oplog\n   AFTER DELETE ON \"main\".\"checks\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.checks')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'checks', 'DELETE', json_object('check_id', old.\"check_id\"), NULL, json_object('account_id', old.\"account_id\", 'check_id', old.\"check_id\", 'data', old.\"data\", 'date', old.\"date\", 'deleted', old.\"deleted\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'place_id', old.\"place_id\", 'relevant_for_reports', old.\"relevant_for_reports\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_checks_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_checks_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"checks\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_checks_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_checks_account_id_into_oplog\n   AFTER UPDATE ON \"main\".\"checks\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_checks_place_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_checks_place_id_into_oplog\n  AFTER INSERT ON \"main\".\"checks\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.places') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'places', 'COMPENSATION', json_object('place_id', \"place_id\"), json_object('place_id', \"place_id\"), NULL, NULL\n  FROM \"main\".\"places\" WHERE \"place_id\" = new.\"place_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_checks_place_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_checks_place_id_into_oplog\n   AFTER UPDATE ON \"main\".\"checks\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.places') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'places', 'COMPENSATION', json_object('place_id', \"place_id\"), json_object('place_id', \"place_id\"), NULL, NULL\n  FROM \"main\".\"places\" WHERE \"place_id\" = new.\"place_id\";\nEND;"
    ],
    "version": "19"
  },
  {
    "statements": [
      "CREATE TABLE \"accounts\" (\n  \"account_id\" TEXT NOT NULL,\n  \"user_id\" TEXT,\n  \"type\" TEXT,\n  \"period_start\" TEXT,\n  \"period_end\" TEXT,\n  \"projects_label_by\" TEXT,\n  \"label\" TEXT,\n  CONSTRAINT \"accounts_user_id_fkey\" FOREIGN KEY (\"user_id\") REFERENCES \"users\" (\"user_id\"),\n  CONSTRAINT \"accounts_pkey\" PRIMARY KEY (\"account_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"accounts_label_idx\" ON \"accounts\" (\"label\" ASC);\n",
      "CREATE INDEX \"accounts_period_end_idx\" ON \"accounts\" (\"period_end\" ASC);\n",
      "CREATE INDEX \"accounts_period_start_idx\" ON \"accounts\" (\"period_start\" ASC);\n",
      "CREATE INDEX \"accounts_user_id_idx\" ON \"accounts\" (\"user_id\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.accounts', 1);",
      "  /* Triggers for table accounts */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_accounts_primarykey;",
      "CREATE TRIGGER update_ensure_main_accounts_primarykey\n  BEFORE UPDATE ON \"main\".\"accounts\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"account_id\" != new.\"account_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column account_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_accounts_into_oplog;",
      "CREATE TRIGGER insert_main_accounts_into_oplog\n   AFTER INSERT ON \"main\".\"accounts\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'accounts', 'INSERT', json_object('account_id', new.\"account_id\"), json_object('account_id', new.\"account_id\", 'label', new.\"label\", 'period_end', new.\"period_end\", 'period_start', new.\"period_start\", 'projects_label_by', new.\"projects_label_by\", 'type', new.\"type\", 'user_id', new.\"user_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_accounts_into_oplog;",
      "CREATE TRIGGER update_main_accounts_into_oplog\n   AFTER UPDATE ON \"main\".\"accounts\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'accounts', 'UPDATE', json_object('account_id', new.\"account_id\"), json_object('account_id', new.\"account_id\", 'label', new.\"label\", 'period_end', new.\"period_end\", 'period_start', new.\"period_start\", 'projects_label_by', new.\"projects_label_by\", 'type', new.\"type\", 'user_id', new.\"user_id\"), json_object('account_id', old.\"account_id\", 'label', old.\"label\", 'period_end', old.\"period_end\", 'period_start', old.\"period_start\", 'projects_label_by', old.\"projects_label_by\", 'type', old.\"type\", 'user_id', old.\"user_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_accounts_into_oplog;",
      "CREATE TRIGGER delete_main_accounts_into_oplog\n   AFTER DELETE ON \"main\".\"accounts\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'accounts', 'DELETE', json_object('account_id', old.\"account_id\"), NULL, json_object('account_id', old.\"account_id\", 'label', old.\"label\", 'period_end', old.\"period_end\", 'period_start', old.\"period_start\", 'projects_label_by', old.\"projects_label_by\", 'type', old.\"type\", 'user_id', old.\"user_id\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_accounts_user_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_accounts_user_id_into_oplog\n  AFTER INSERT ON \"main\".\"accounts\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.users') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'users', 'COMPENSATION', json_object('user_id', \"user_id\"), json_object('user_id', \"user_id\"), NULL, NULL\n  FROM \"main\".\"users\" WHERE \"user_id\" = new.\"user_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_accounts_user_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_accounts_user_id_into_oplog\n   AFTER UPDATE ON \"main\".\"accounts\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.users') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'users', 'COMPENSATION', json_object('user_id', \"user_id\"), json_object('user_id', \"user_id\"), NULL, NULL\n  FROM \"main\".\"users\" WHERE \"user_id\" = new.\"user_id\";\nEND;"
    ],
    "version": "2"
  },
  {
    "statements": [
      "CREATE TABLE \"check_values\" (\n  \"check_value_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"check_id\" TEXT,\n  \"unit_id\" TEXT,\n  \"value_integer\" INTEGER,\n  \"value_numeric\" REAL,\n  \"value_text\" TEXT,\n  \"label\" TEXT,\n  \"deleted\" INTEGER,\n  CONSTRAINT \"check_values_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"check_values_check_id_fkey\" FOREIGN KEY (\"check_id\") REFERENCES \"checks\" (\"check_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"check_values_unit_id_fkey\" FOREIGN KEY (\"unit_id\") REFERENCES \"units\" (\"unit_id\") ON UPDATE CASCADE,\n  CONSTRAINT \"check_values_pkey\" PRIMARY KEY (\"check_value_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"check_values_account_id_idx\" ON \"check_values\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"check_values_check_id_idx\" ON \"check_values\" (\"check_id\" ASC);\n",
      "CREATE INDEX \"check_values_label_idx\" ON \"check_values\" (\"label\" ASC);\n",
      "CREATE INDEX \"check_values_unit_id_idx\" ON \"check_values\" (\"unit_id\" ASC);\n",
      "CREATE INDEX \"check_values_value_integer_idx\" ON \"check_values\" (\"value_integer\" ASC);\n",
      "CREATE INDEX \"check_values_value_numeric_idx\" ON \"check_values\" (\"value_numeric\" ASC);\n",
      "CREATE INDEX \"check_values_value_text_idx\" ON \"check_values\" (\"value_text\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.check_values', 1);",
      "  /* Triggers for table check_values */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_check_values_primarykey;",
      "CREATE TRIGGER update_ensure_main_check_values_primarykey\n  BEFORE UPDATE ON \"main\".\"check_values\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"check_value_id\" != new.\"check_value_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column check_value_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_check_values_into_oplog;",
      "CREATE TRIGGER insert_main_check_values_into_oplog\n   AFTER INSERT ON \"main\".\"check_values\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.check_values')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'check_values', 'INSERT', json_object('check_value_id', new.\"check_value_id\"), json_object('account_id', new.\"account_id\", 'check_id', new.\"check_id\", 'check_value_id', new.\"check_value_id\", 'deleted', new.\"deleted\", 'label', new.\"label\", 'unit_id', new.\"unit_id\", 'value_integer', new.\"value_integer\", 'value_numeric', cast(new.\"value_numeric\" as TEXT), 'value_text', new.\"value_text\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_check_values_into_oplog;",
      "CREATE TRIGGER update_main_check_values_into_oplog\n   AFTER UPDATE ON \"main\".\"check_values\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.check_values')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'check_values', 'UPDATE', json_object('check_value_id', new.\"check_value_id\"), json_object('account_id', new.\"account_id\", 'check_id', new.\"check_id\", 'check_value_id', new.\"check_value_id\", 'deleted', new.\"deleted\", 'label', new.\"label\", 'unit_id', new.\"unit_id\", 'value_integer', new.\"value_integer\", 'value_numeric', cast(new.\"value_numeric\" as TEXT), 'value_text', new.\"value_text\"), json_object('account_id', old.\"account_id\", 'check_id', old.\"check_id\", 'check_value_id', old.\"check_value_id\", 'deleted', old.\"deleted\", 'label', old.\"label\", 'unit_id', old.\"unit_id\", 'value_integer', old.\"value_integer\", 'value_numeric', cast(old.\"value_numeric\" as TEXT), 'value_text', old.\"value_text\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_check_values_into_oplog;",
      "CREATE TRIGGER delete_main_check_values_into_oplog\n   AFTER DELETE ON \"main\".\"check_values\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.check_values')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'check_values', 'DELETE', json_object('check_value_id', old.\"check_value_id\"), NULL, json_object('account_id', old.\"account_id\", 'check_id', old.\"check_id\", 'check_value_id', old.\"check_value_id\", 'deleted', old.\"deleted\", 'label', old.\"label\", 'unit_id', old.\"unit_id\", 'value_integer', old.\"value_integer\", 'value_numeric', cast(old.\"value_numeric\" as TEXT), 'value_text', old.\"value_text\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_check_values_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_check_values_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"check_values\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_check_values_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_check_values_account_id_into_oplog\n   AFTER UPDATE ON \"main\".\"check_values\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_check_values_check_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_check_values_check_id_into_oplog\n  AFTER INSERT ON \"main\".\"check_values\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.checks') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'checks', 'COMPENSATION', json_object('check_id', \"check_id\"), json_object('check_id', \"check_id\"), NULL, NULL\n  FROM \"main\".\"checks\" WHERE \"check_id\" = new.\"check_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_check_values_check_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_check_values_check_id_into_oplog\n   AFTER UPDATE ON \"main\".\"check_values\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.checks') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'checks', 'COMPENSATION', json_object('check_id', \"check_id\"), json_object('check_id', \"check_id\"), NULL, NULL\n  FROM \"main\".\"checks\" WHERE \"check_id\" = new.\"check_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_check_values_unit_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_check_values_unit_id_into_oplog\n  AFTER INSERT ON \"main\".\"check_values\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.units') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'units', 'COMPENSATION', json_object('unit_id', \"unit_id\"), json_object('unit_id', \"unit_id\"), NULL, NULL\n  FROM \"main\".\"units\" WHERE \"unit_id\" = new.\"unit_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_check_values_unit_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_check_values_unit_id_into_oplog\n   AFTER UPDATE ON \"main\".\"check_values\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.units') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'units', 'COMPENSATION', json_object('unit_id', \"unit_id\"), json_object('unit_id', \"unit_id\"), NULL, NULL\n  FROM \"main\".\"units\" WHERE \"unit_id\" = new.\"unit_id\";\nEND;"
    ],
    "version": "20"
  },
  {
    "statements": [
      "CREATE TABLE \"check_taxa\" (\n  \"check_taxon_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"check_id\" TEXT,\n  \"taxon_id\" TEXT,\n  \"unit_id\" TEXT,\n  \"value_integer\" INTEGER,\n  \"value_numeric\" REAL,\n  \"value_text\" TEXT,\n  \"label\" TEXT,\n  \"deleted\" INTEGER,\n  CONSTRAINT \"check_taxa_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"check_taxa_check_id_fkey\" FOREIGN KEY (\"check_id\") REFERENCES \"checks\" (\"check_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"check_taxa_taxon_id_fkey\" FOREIGN KEY (\"taxon_id\") REFERENCES \"taxa\" (\"taxon_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"check_taxa_unit_id_fkey\" FOREIGN KEY (\"unit_id\") REFERENCES \"units\" (\"unit_id\") ON UPDATE CASCADE,\n  CONSTRAINT \"check_taxa_pkey\" PRIMARY KEY (\"check_taxon_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"check_taxa_account_id_idx\" ON \"check_taxa\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"check_taxa_check_id_idx\" ON \"check_taxa\" (\"check_id\" ASC);\n",
      "CREATE INDEX \"check_taxa_label_idx\" ON \"check_taxa\" (\"label\" ASC);\n",
      "CREATE INDEX \"check_taxa_taxon_id_idx\" ON \"check_taxa\" (\"taxon_id\" ASC);\n",
      "CREATE INDEX \"check_taxa_unit_id_idx\" ON \"check_taxa\" (\"unit_id\" ASC);\n",
      "CREATE INDEX \"check_taxa_value_integer_idx\" ON \"check_taxa\" (\"value_integer\" ASC);\n",
      "CREATE INDEX \"check_taxa_value_numeric_idx\" ON \"check_taxa\" (\"value_numeric\" ASC);\n",
      "CREATE INDEX \"check_taxa_value_text_idx\" ON \"check_taxa\" (\"value_text\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.check_taxa', 1);",
      "  /* Triggers for table check_taxa */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_check_taxa_primarykey;",
      "CREATE TRIGGER update_ensure_main_check_taxa_primarykey\n  BEFORE UPDATE ON \"main\".\"check_taxa\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"check_taxon_id\" != new.\"check_taxon_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column check_taxon_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_check_taxa_into_oplog;",
      "CREATE TRIGGER insert_main_check_taxa_into_oplog\n   AFTER INSERT ON \"main\".\"check_taxa\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.check_taxa')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'check_taxa', 'INSERT', json_object('check_taxon_id', new.\"check_taxon_id\"), json_object('account_id', new.\"account_id\", 'check_id', new.\"check_id\", 'check_taxon_id', new.\"check_taxon_id\", 'deleted', new.\"deleted\", 'label', new.\"label\", 'taxon_id', new.\"taxon_id\", 'unit_id', new.\"unit_id\", 'value_integer', new.\"value_integer\", 'value_numeric', cast(new.\"value_numeric\" as TEXT), 'value_text', new.\"value_text\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_check_taxa_into_oplog;",
      "CREATE TRIGGER update_main_check_taxa_into_oplog\n   AFTER UPDATE ON \"main\".\"check_taxa\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.check_taxa')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'check_taxa', 'UPDATE', json_object('check_taxon_id', new.\"check_taxon_id\"), json_object('account_id', new.\"account_id\", 'check_id', new.\"check_id\", 'check_taxon_id', new.\"check_taxon_id\", 'deleted', new.\"deleted\", 'label', new.\"label\", 'taxon_id', new.\"taxon_id\", 'unit_id', new.\"unit_id\", 'value_integer', new.\"value_integer\", 'value_numeric', cast(new.\"value_numeric\" as TEXT), 'value_text', new.\"value_text\"), json_object('account_id', old.\"account_id\", 'check_id', old.\"check_id\", 'check_taxon_id', old.\"check_taxon_id\", 'deleted', old.\"deleted\", 'label', old.\"label\", 'taxon_id', old.\"taxon_id\", 'unit_id', old.\"unit_id\", 'value_integer', old.\"value_integer\", 'value_numeric', cast(old.\"value_numeric\" as TEXT), 'value_text', old.\"value_text\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_check_taxa_into_oplog;",
      "CREATE TRIGGER delete_main_check_taxa_into_oplog\n   AFTER DELETE ON \"main\".\"check_taxa\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.check_taxa')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'check_taxa', 'DELETE', json_object('check_taxon_id', old.\"check_taxon_id\"), NULL, json_object('account_id', old.\"account_id\", 'check_id', old.\"check_id\", 'check_taxon_id', old.\"check_taxon_id\", 'deleted', old.\"deleted\", 'label', old.\"label\", 'taxon_id', old.\"taxon_id\", 'unit_id', old.\"unit_id\", 'value_integer', old.\"value_integer\", 'value_numeric', cast(old.\"value_numeric\" as TEXT), 'value_text', old.\"value_text\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_check_taxa_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_check_taxa_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"check_taxa\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_check_taxa_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_check_taxa_account_id_into_oplog\n   AFTER UPDATE ON \"main\".\"check_taxa\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_check_taxa_check_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_check_taxa_check_id_into_oplog\n  AFTER INSERT ON \"main\".\"check_taxa\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.checks') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'checks', 'COMPENSATION', json_object('check_id', \"check_id\"), json_object('check_id', \"check_id\"), NULL, NULL\n  FROM \"main\".\"checks\" WHERE \"check_id\" = new.\"check_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_check_taxa_check_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_check_taxa_check_id_into_oplog\n   AFTER UPDATE ON \"main\".\"check_taxa\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.checks') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'checks', 'COMPENSATION', json_object('check_id', \"check_id\"), json_object('check_id', \"check_id\"), NULL, NULL\n  FROM \"main\".\"checks\" WHERE \"check_id\" = new.\"check_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_check_taxa_taxon_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_check_taxa_taxon_id_into_oplog\n  AFTER INSERT ON \"main\".\"check_taxa\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.taxa') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'taxa', 'COMPENSATION', json_object('taxon_id', \"taxon_id\"), json_object('taxon_id', \"taxon_id\"), NULL, NULL\n  FROM \"main\".\"taxa\" WHERE \"taxon_id\" = new.\"taxon_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_check_taxa_taxon_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_check_taxa_taxon_id_into_oplog\n   AFTER UPDATE ON \"main\".\"check_taxa\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.taxa') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'taxa', 'COMPENSATION', json_object('taxon_id', \"taxon_id\"), json_object('taxon_id', \"taxon_id\"), NULL, NULL\n  FROM \"main\".\"taxa\" WHERE \"taxon_id\" = new.\"taxon_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_check_taxa_unit_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_check_taxa_unit_id_into_oplog\n  AFTER INSERT ON \"main\".\"check_taxa\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.units') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'units', 'COMPENSATION', json_object('unit_id', \"unit_id\"), json_object('unit_id', \"unit_id\"), NULL, NULL\n  FROM \"main\".\"units\" WHERE \"unit_id\" = new.\"unit_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_check_taxa_unit_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_check_taxa_unit_id_into_oplog\n   AFTER UPDATE ON \"main\".\"check_taxa\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.units') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'units', 'COMPENSATION', json_object('unit_id', \"unit_id\"), json_object('unit_id', \"unit_id\"), NULL, NULL\n  FROM \"main\".\"units\" WHERE \"unit_id\" = new.\"unit_id\";\nEND;"
    ],
    "version": "21"
  },
  {
    "statements": [
      "CREATE TABLE \"place_reports\" (\n  \"place_report_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"place_id\" TEXT,\n  \"year\" INTEGER,\n  \"data\" TEXT_JSON,\n  \"label_replace_by_generated_column\" TEXT,\n  \"deleted\" INTEGER,\n  CONSTRAINT \"place_reports_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"place_reports_place_id_fkey\" FOREIGN KEY (\"place_id\") REFERENCES \"places\" (\"place_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"place_reports_pkey\" PRIMARY KEY (\"place_report_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"place_reports_account_id_idx\" ON \"place_reports\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"place_reports_place_id_idx\" ON \"place_reports\" (\"place_id\" ASC);\n",
      "CREATE INDEX \"place_reports_year_idx\" ON \"place_reports\" (\"year\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.place_reports', 1);",
      "  /* Triggers for table place_reports */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_place_reports_primarykey;",
      "CREATE TRIGGER update_ensure_main_place_reports_primarykey\n  BEFORE UPDATE ON \"main\".\"place_reports\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"place_report_id\" != new.\"place_report_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column place_report_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_place_reports_into_oplog;",
      "CREATE TRIGGER insert_main_place_reports_into_oplog\n   AFTER INSERT ON \"main\".\"place_reports\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.place_reports')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'place_reports', 'INSERT', json_object('place_report_id', new.\"place_report_id\"), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'deleted', new.\"deleted\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'place_id', new.\"place_id\", 'place_report_id', new.\"place_report_id\", 'year', new.\"year\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_place_reports_into_oplog;",
      "CREATE TRIGGER update_main_place_reports_into_oplog\n   AFTER UPDATE ON \"main\".\"place_reports\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.place_reports')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'place_reports', 'UPDATE', json_object('place_report_id', new.\"place_report_id\"), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'deleted', new.\"deleted\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'place_id', new.\"place_id\", 'place_report_id', new.\"place_report_id\", 'year', new.\"year\"), json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'deleted', old.\"deleted\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'place_id', old.\"place_id\", 'place_report_id', old.\"place_report_id\", 'year', old.\"year\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_place_reports_into_oplog;",
      "CREATE TRIGGER delete_main_place_reports_into_oplog\n   AFTER DELETE ON \"main\".\"place_reports\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.place_reports')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'place_reports', 'DELETE', json_object('place_report_id', old.\"place_report_id\"), NULL, json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'deleted', old.\"deleted\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'place_id', old.\"place_id\", 'place_report_id', old.\"place_report_id\", 'year', old.\"year\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_place_reports_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_place_reports_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"place_reports\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_place_reports_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_place_reports_account_id_into_oplog\n   AFTER UPDATE ON \"main\".\"place_reports\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_place_reports_place_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_place_reports_place_id_into_oplog\n  AFTER INSERT ON \"main\".\"place_reports\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.places') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'places', 'COMPENSATION', json_object('place_id', \"place_id\"), json_object('place_id', \"place_id\"), NULL, NULL\n  FROM \"main\".\"places\" WHERE \"place_id\" = new.\"place_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_place_reports_place_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_place_reports_place_id_into_oplog\n   AFTER UPDATE ON \"main\".\"place_reports\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.places') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'places', 'COMPENSATION', json_object('place_id', \"place_id\"), json_object('place_id', \"place_id\"), NULL, NULL\n  FROM \"main\".\"places\" WHERE \"place_id\" = new.\"place_id\";\nEND;"
    ],
    "version": "22"
  },
  {
    "statements": [
      "CREATE TABLE \"place_report_values\" (\n  \"place_report_value_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"place_report_id\" TEXT,\n  \"unit_id\" TEXT,\n  \"value_integer\" INTEGER,\n  \"value_numeric\" REAL,\n  \"value_text\" TEXT,\n  \"label\" TEXT,\n  \"deleted\" INTEGER,\n  CONSTRAINT \"place_report_values_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"place_report_values_place_report_id_fkey\" FOREIGN KEY (\"place_report_id\") REFERENCES \"place_reports\" (\"place_report_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"place_report_values_unit_id_fkey\" FOREIGN KEY (\"unit_id\") REFERENCES \"units\" (\"unit_id\") ON UPDATE CASCADE,\n  CONSTRAINT \"place_report_values_pkey\" PRIMARY KEY (\"place_report_value_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"place_report_values_account_id_idx\" ON \"place_report_values\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"place_report_values_label_idx\" ON \"place_report_values\" (\"label\" ASC);\n",
      "CREATE INDEX \"place_report_values_place_report_id_idx\" ON \"place_report_values\" (\"place_report_id\" ASC);\n",
      "CREATE INDEX \"place_report_values_unit_id_idx\" ON \"place_report_values\" (\"unit_id\" ASC);\n",
      "CREATE INDEX \"place_report_values_value_integer_idx\" ON \"place_report_values\" (\"value_integer\" ASC);\n",
      "CREATE INDEX \"place_report_values_value_numeric_idx\" ON \"place_report_values\" (\"value_numeric\" ASC);\n",
      "CREATE INDEX \"place_report_values_value_text_idx\" ON \"place_report_values\" (\"value_text\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.place_report_values', 1);",
      "  /* Triggers for table place_report_values */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_place_report_values_primarykey;",
      "CREATE TRIGGER update_ensure_main_place_report_values_primarykey\n  BEFORE UPDATE ON \"main\".\"place_report_values\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"place_report_value_id\" != new.\"place_report_value_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column place_report_value_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_place_report_values_into_oplog;",
      "CREATE TRIGGER insert_main_place_report_values_into_oplog\n   AFTER INSERT ON \"main\".\"place_report_values\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.place_report_values')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'place_report_values', 'INSERT', json_object('place_report_value_id', new.\"place_report_value_id\"), json_object('account_id', new.\"account_id\", 'deleted', new.\"deleted\", 'label', new.\"label\", 'place_report_id', new.\"place_report_id\", 'place_report_value_id', new.\"place_report_value_id\", 'unit_id', new.\"unit_id\", 'value_integer', new.\"value_integer\", 'value_numeric', cast(new.\"value_numeric\" as TEXT), 'value_text', new.\"value_text\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_place_report_values_into_oplog;",
      "CREATE TRIGGER update_main_place_report_values_into_oplog\n   AFTER UPDATE ON \"main\".\"place_report_values\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.place_report_values')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'place_report_values', 'UPDATE', json_object('place_report_value_id', new.\"place_report_value_id\"), json_object('account_id', new.\"account_id\", 'deleted', new.\"deleted\", 'label', new.\"label\", 'place_report_id', new.\"place_report_id\", 'place_report_value_id', new.\"place_report_value_id\", 'unit_id', new.\"unit_id\", 'value_integer', new.\"value_integer\", 'value_numeric', cast(new.\"value_numeric\" as TEXT), 'value_text', new.\"value_text\"), json_object('account_id', old.\"account_id\", 'deleted', old.\"deleted\", 'label', old.\"label\", 'place_report_id', old.\"place_report_id\", 'place_report_value_id', old.\"place_report_value_id\", 'unit_id', old.\"unit_id\", 'value_integer', old.\"value_integer\", 'value_numeric', cast(old.\"value_numeric\" as TEXT), 'value_text', old.\"value_text\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_place_report_values_into_oplog;",
      "CREATE TRIGGER delete_main_place_report_values_into_oplog\n   AFTER DELETE ON \"main\".\"place_report_values\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.place_report_values')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'place_report_values', 'DELETE', json_object('place_report_value_id', old.\"place_report_value_id\"), NULL, json_object('account_id', old.\"account_id\", 'deleted', old.\"deleted\", 'label', old.\"label\", 'place_report_id', old.\"place_report_id\", 'place_report_value_id', old.\"place_report_value_id\", 'unit_id', old.\"unit_id\", 'value_integer', old.\"value_integer\", 'value_numeric', cast(old.\"value_numeric\" as TEXT), 'value_text', old.\"value_text\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_place_report_values_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_place_report_values_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"place_report_values\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_place_report_values_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_place_report_values_account_id_into_oplog\n   AFTER UPDATE ON \"main\".\"place_report_values\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_place_report_values_place_report_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_place_report_values_place_report_id_into_oplog\n  AFTER INSERT ON \"main\".\"place_report_values\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.place_reports') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'place_reports', 'COMPENSATION', json_object('place_report_id', \"place_report_id\"), json_object('place_report_id', \"place_report_id\"), NULL, NULL\n  FROM \"main\".\"place_reports\" WHERE \"place_report_id\" = new.\"place_report_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_place_report_values_place_report_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_place_report_values_place_report_id_into_oplog\n   AFTER UPDATE ON \"main\".\"place_report_values\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.place_reports') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'place_reports', 'COMPENSATION', json_object('place_report_id', \"place_report_id\"), json_object('place_report_id', \"place_report_id\"), NULL, NULL\n  FROM \"main\".\"place_reports\" WHERE \"place_report_id\" = new.\"place_report_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_place_report_values_unit_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_place_report_values_unit_id_into_oplog\n  AFTER INSERT ON \"main\".\"place_report_values\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.units') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'units', 'COMPENSATION', json_object('unit_id', \"unit_id\"), json_object('unit_id', \"unit_id\"), NULL, NULL\n  FROM \"main\".\"units\" WHERE \"unit_id\" = new.\"unit_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_place_report_values_unit_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_place_report_values_unit_id_into_oplog\n   AFTER UPDATE ON \"main\".\"place_report_values\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.units') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'units', 'COMPENSATION', json_object('unit_id', \"unit_id\"), json_object('unit_id', \"unit_id\"), NULL, NULL\n  FROM \"main\".\"units\" WHERE \"unit_id\" = new.\"unit_id\";\nEND;"
    ],
    "version": "23"
  },
  {
    "statements": [
      "CREATE TABLE \"observation_sources\" (\n  \"observation_source_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"project_id\" TEXT,\n  \"name\" TEXT,\n  \"url\" TEXT,\n  \"data\" TEXT_JSON,\n  \"label_replace_by_generated_column\" TEXT,\n  \"deleted\" INTEGER,\n  CONSTRAINT \"observation_sources_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"observation_sources_project_id_fkey\" FOREIGN KEY (\"project_id\") REFERENCES \"projects\" (\"project_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"observation_sources_pkey\" PRIMARY KEY (\"observation_source_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"observation_sources_account_id_idx\" ON \"observation_sources\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"observation_sources_name_idx\" ON \"observation_sources\" (\"name\" ASC);\n",
      "CREATE INDEX \"observation_sources_project_id_idx\" ON \"observation_sources\" (\"project_id\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.observation_sources', 1);",
      "  /* Triggers for table observation_sources */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_observation_sources_primarykey;",
      "CREATE TRIGGER update_ensure_main_observation_sources_primarykey\n  BEFORE UPDATE ON \"main\".\"observation_sources\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"observation_source_id\" != new.\"observation_source_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column observation_source_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_observation_sources_into_oplog;",
      "CREATE TRIGGER insert_main_observation_sources_into_oplog\n   AFTER INSERT ON \"main\".\"observation_sources\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.observation_sources')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'observation_sources', 'INSERT', json_object('observation_source_id', new.\"observation_source_id\"), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'deleted', new.\"deleted\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'name', new.\"name\", 'observation_source_id', new.\"observation_source_id\", 'project_id', new.\"project_id\", 'url', new.\"url\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_observation_sources_into_oplog;",
      "CREATE TRIGGER update_main_observation_sources_into_oplog\n   AFTER UPDATE ON \"main\".\"observation_sources\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.observation_sources')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'observation_sources', 'UPDATE', json_object('observation_source_id', new.\"observation_source_id\"), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'deleted', new.\"deleted\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'name', new.\"name\", 'observation_source_id', new.\"observation_source_id\", 'project_id', new.\"project_id\", 'url', new.\"url\"), json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'deleted', old.\"deleted\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'name', old.\"name\", 'observation_source_id', old.\"observation_source_id\", 'project_id', old.\"project_id\", 'url', old.\"url\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_observation_sources_into_oplog;",
      "CREATE TRIGGER delete_main_observation_sources_into_oplog\n   AFTER DELETE ON \"main\".\"observation_sources\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.observation_sources')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'observation_sources', 'DELETE', json_object('observation_source_id', old.\"observation_source_id\"), NULL, json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'deleted', old.\"deleted\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'name', old.\"name\", 'observation_source_id', old.\"observation_source_id\", 'project_id', old.\"project_id\", 'url', old.\"url\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_observation_sources_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_observation_sources_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"observation_sources\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_observation_sources_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_observation_sources_account_id_into_oplog\n   AFTER UPDATE ON \"main\".\"observation_sources\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_observation_sources_project_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_observation_sources_project_id_into_oplog\n  AFTER INSERT ON \"main\".\"observation_sources\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.projects') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_object('project_id', \"project_id\"), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_observation_sources_project_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_observation_sources_project_id_into_oplog\n   AFTER UPDATE ON \"main\".\"observation_sources\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.projects') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_object('project_id', \"project_id\"), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;"
    ],
    "version": "24"
  },
  {
    "statements": [
      "CREATE TABLE \"observations\" (\n  \"observation_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"observation_source_id\" TEXT,\n  \"place_id\" TEXT,\n  \"id_in_source\" TEXT,\n  \"url\" TEXT,\n  \"observation_data\" TEXT_JSON,\n  \"date\" TEXT,\n  \"author\" TEXT,\n  \"data\" TEXT_JSON,\n  \"label_replace_by_generated_column\" TEXT,\n  \"deleted\" INTEGER,\n  CONSTRAINT \"observations_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"observations_observation_source_id_fkey\" FOREIGN KEY (\"observation_source_id\") REFERENCES \"observation_sources\" (\"observation_source_id\") ON UPDATE CASCADE,\n  CONSTRAINT \"observations_place_id_fkey\" FOREIGN KEY (\"place_id\") REFERENCES \"places\" (\"place_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"observations_pkey\" PRIMARY KEY (\"observation_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"observations_account_id_idx\" ON \"observations\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"observations_author_idx\" ON \"observations\" (\"author\" ASC);\n",
      "CREATE INDEX \"observations_date_idx\" ON \"observations\" (\"date\" ASC);\n",
      "CREATE INDEX \"observations_observation_source_id_idx\" ON \"observations\" (\"observation_source_id\" ASC);\n",
      "CREATE INDEX \"observations_place_id_idx\" ON \"observations\" (\"place_id\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.observations', 1);",
      "  /* Triggers for table observations */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_observations_primarykey;",
      "CREATE TRIGGER update_ensure_main_observations_primarykey\n  BEFORE UPDATE ON \"main\".\"observations\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"observation_id\" != new.\"observation_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column observation_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_observations_into_oplog;",
      "CREATE TRIGGER insert_main_observations_into_oplog\n   AFTER INSERT ON \"main\".\"observations\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.observations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'observations', 'INSERT', json_object('observation_id', new.\"observation_id\"), json_object('account_id', new.\"account_id\", 'author', new.\"author\", 'data', new.\"data\", 'date', new.\"date\", 'deleted', new.\"deleted\", 'id_in_source', new.\"id_in_source\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'observation_data', new.\"observation_data\", 'observation_id', new.\"observation_id\", 'observation_source_id', new.\"observation_source_id\", 'place_id', new.\"place_id\", 'url', new.\"url\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_observations_into_oplog;",
      "CREATE TRIGGER update_main_observations_into_oplog\n   AFTER UPDATE ON \"main\".\"observations\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.observations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'observations', 'UPDATE', json_object('observation_id', new.\"observation_id\"), json_object('account_id', new.\"account_id\", 'author', new.\"author\", 'data', new.\"data\", 'date', new.\"date\", 'deleted', new.\"deleted\", 'id_in_source', new.\"id_in_source\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'observation_data', new.\"observation_data\", 'observation_id', new.\"observation_id\", 'observation_source_id', new.\"observation_source_id\", 'place_id', new.\"place_id\", 'url', new.\"url\"), json_object('account_id', old.\"account_id\", 'author', old.\"author\", 'data', old.\"data\", 'date', old.\"date\", 'deleted', old.\"deleted\", 'id_in_source', old.\"id_in_source\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'observation_data', old.\"observation_data\", 'observation_id', old.\"observation_id\", 'observation_source_id', old.\"observation_source_id\", 'place_id', old.\"place_id\", 'url', old.\"url\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_observations_into_oplog;",
      "CREATE TRIGGER delete_main_observations_into_oplog\n   AFTER DELETE ON \"main\".\"observations\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.observations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'observations', 'DELETE', json_object('observation_id', old.\"observation_id\"), NULL, json_object('account_id', old.\"account_id\", 'author', old.\"author\", 'data', old.\"data\", 'date', old.\"date\", 'deleted', old.\"deleted\", 'id_in_source', old.\"id_in_source\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'observation_data', old.\"observation_data\", 'observation_id', old.\"observation_id\", 'observation_source_id', old.\"observation_source_id\", 'place_id', old.\"place_id\", 'url', old.\"url\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_observations_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_observations_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"observations\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_observations_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_observations_account_id_into_oplog\n   AFTER UPDATE ON \"main\".\"observations\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_observations_observation_source_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_observations_observation_source_id_into_oplog\n  AFTER INSERT ON \"main\".\"observations\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.observation_sources') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'observation_sources', 'COMPENSATION', json_object('observation_source_id', \"observation_source_id\"), json_object('observation_source_id', \"observation_source_id\"), NULL, NULL\n  FROM \"main\".\"observation_sources\" WHERE \"observation_source_id\" = new.\"observation_source_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_observations_observation_source_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_observations_observation_source_id_into_oplog\n   AFTER UPDATE ON \"main\".\"observations\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.observation_sources') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'observation_sources', 'COMPENSATION', json_object('observation_source_id', \"observation_source_id\"), json_object('observation_source_id', \"observation_source_id\"), NULL, NULL\n  FROM \"main\".\"observation_sources\" WHERE \"observation_source_id\" = new.\"observation_source_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_observations_place_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_observations_place_id_into_oplog\n  AFTER INSERT ON \"main\".\"observations\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.places') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'places', 'COMPENSATION', json_object('place_id', \"place_id\"), json_object('place_id', \"place_id\"), NULL, NULL\n  FROM \"main\".\"places\" WHERE \"place_id\" = new.\"place_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_observations_place_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_observations_place_id_into_oplog\n   AFTER UPDATE ON \"main\".\"observations\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.places') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'places', 'COMPENSATION', json_object('place_id', \"place_id\"), json_object('place_id', \"place_id\"), NULL, NULL\n  FROM \"main\".\"places\" WHERE \"place_id\" = new.\"place_id\";\nEND;"
    ],
    "version": "25"
  },
  {
    "statements": [
      "CREATE TABLE \"messages\" (\n  \"message_id\" TEXT NOT NULL,\n  \"label_replace_by_generated_column\" TEXT,\n  \"date\" TEXT,\n  \"message\" TEXT,\n  CONSTRAINT \"messages_pkey\" PRIMARY KEY (\"message_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"messages_date_idx\" ON \"messages\" (\"date\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.messages', 1);",
      "  /* Triggers for table messages */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_messages_primarykey;",
      "CREATE TRIGGER update_ensure_main_messages_primarykey\n  BEFORE UPDATE ON \"main\".\"messages\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"message_id\" != new.\"message_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column message_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_messages_into_oplog;",
      "CREATE TRIGGER insert_main_messages_into_oplog\n   AFTER INSERT ON \"main\".\"messages\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.messages')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'messages', 'INSERT', json_object('message_id', new.\"message_id\"), json_object('date', new.\"date\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'message', new.\"message\", 'message_id', new.\"message_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_messages_into_oplog;",
      "CREATE TRIGGER update_main_messages_into_oplog\n   AFTER UPDATE ON \"main\".\"messages\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.messages')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'messages', 'UPDATE', json_object('message_id', new.\"message_id\"), json_object('date', new.\"date\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'message', new.\"message\", 'message_id', new.\"message_id\"), json_object('date', old.\"date\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'message', old.\"message\", 'message_id', old.\"message_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_messages_into_oplog;",
      "CREATE TRIGGER delete_main_messages_into_oplog\n   AFTER DELETE ON \"main\".\"messages\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.messages')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'messages', 'DELETE', json_object('message_id', old.\"message_id\"), NULL, json_object('date', old.\"date\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'message', old.\"message\", 'message_id', old.\"message_id\"), NULL);\nEND;"
    ],
    "version": "26"
  },
  {
    "statements": [
      "CREATE TABLE \"user_messages\" (\n  \"user_message_id\" TEXT NOT NULL,\n  \"user_id\" TEXT,\n  \"message_id\" TEXT,\n  \"label_replace_by_generated_column\" TEXT,\n  \"read\" INTEGER,\n  CONSTRAINT \"user_messages_message_id_fkey\" FOREIGN KEY (\"message_id\") REFERENCES \"messages\" (\"message_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"user_messages_user_id_fkey\" FOREIGN KEY (\"user_id\") REFERENCES \"users\" (\"user_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"user_messages_pkey\" PRIMARY KEY (\"user_message_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"user_messages_message_id_idx\" ON \"user_messages\" (\"message_id\" ASC);\n",
      "CREATE INDEX \"user_messages_user_id_idx\" ON \"user_messages\" (\"user_id\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.user_messages', 1);",
      "  /* Triggers for table user_messages */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_user_messages_primarykey;",
      "CREATE TRIGGER update_ensure_main_user_messages_primarykey\n  BEFORE UPDATE ON \"main\".\"user_messages\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"user_message_id\" != new.\"user_message_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column user_message_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_user_messages_into_oplog;",
      "CREATE TRIGGER insert_main_user_messages_into_oplog\n   AFTER INSERT ON \"main\".\"user_messages\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.user_messages')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'user_messages', 'INSERT', json_object('user_message_id', new.\"user_message_id\"), json_object('label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'message_id', new.\"message_id\", 'read', new.\"read\", 'user_id', new.\"user_id\", 'user_message_id', new.\"user_message_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_user_messages_into_oplog;",
      "CREATE TRIGGER update_main_user_messages_into_oplog\n   AFTER UPDATE ON \"main\".\"user_messages\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.user_messages')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'user_messages', 'UPDATE', json_object('user_message_id', new.\"user_message_id\"), json_object('label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'message_id', new.\"message_id\", 'read', new.\"read\", 'user_id', new.\"user_id\", 'user_message_id', new.\"user_message_id\"), json_object('label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'message_id', old.\"message_id\", 'read', old.\"read\", 'user_id', old.\"user_id\", 'user_message_id', old.\"user_message_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_user_messages_into_oplog;",
      "CREATE TRIGGER delete_main_user_messages_into_oplog\n   AFTER DELETE ON \"main\".\"user_messages\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.user_messages')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'user_messages', 'DELETE', json_object('user_message_id', old.\"user_message_id\"), NULL, json_object('label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'message_id', old.\"message_id\", 'read', old.\"read\", 'user_id', old.\"user_id\", 'user_message_id', old.\"user_message_id\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_user_messages_message_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_user_messages_message_id_into_oplog\n  AFTER INSERT ON \"main\".\"user_messages\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.messages') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'messages', 'COMPENSATION', json_object('message_id', \"message_id\"), json_object('message_id', \"message_id\"), NULL, NULL\n  FROM \"main\".\"messages\" WHERE \"message_id\" = new.\"message_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_user_messages_message_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_user_messages_message_id_into_oplog\n   AFTER UPDATE ON \"main\".\"user_messages\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.messages') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'messages', 'COMPENSATION', json_object('message_id', \"message_id\"), json_object('message_id', \"message_id\"), NULL, NULL\n  FROM \"main\".\"messages\" WHERE \"message_id\" = new.\"message_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_user_messages_user_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_user_messages_user_id_into_oplog\n  AFTER INSERT ON \"main\".\"user_messages\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.users') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'users', 'COMPENSATION', json_object('user_id', \"user_id\"), json_object('user_id', \"user_id\"), NULL, NULL\n  FROM \"main\".\"users\" WHERE \"user_id\" = new.\"user_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_user_messages_user_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_user_messages_user_id_into_oplog\n   AFTER UPDATE ON \"main\".\"user_messages\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.users') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'users', 'COMPENSATION', json_object('user_id', \"user_id\"), json_object('user_id', \"user_id\"), NULL, NULL\n  FROM \"main\".\"users\" WHERE \"user_id\" = new.\"user_id\";\nEND;"
    ],
    "version": "27"
  },
  {
    "statements": [
      "CREATE TABLE \"place_users\" (\n  \"place_user_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"place_id\" TEXT,\n  \"user_id\" TEXT,\n  \"role\" TEXT,\n  \"label\" TEXT,\n  \"deleted\" INTEGER,\n  CONSTRAINT \"place_users_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"place_users_place_id_fkey\" FOREIGN KEY (\"place_id\") REFERENCES \"places\" (\"place_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"place_users_user_id_fkey\" FOREIGN KEY (\"user_id\") REFERENCES \"users\" (\"user_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"place_users_pkey\" PRIMARY KEY (\"place_user_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"place_users_account_id_idx\" ON \"place_users\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"place_users_label_idx\" ON \"place_users\" (\"label\" ASC);\n",
      "CREATE INDEX \"place_users_place_id_idx\" ON \"place_users\" (\"place_id\" ASC);\n",
      "CREATE INDEX \"place_users_user_id_idx\" ON \"place_users\" (\"user_id\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.place_users', 1);",
      "  /* Triggers for table place_users */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_place_users_primarykey;",
      "CREATE TRIGGER update_ensure_main_place_users_primarykey\n  BEFORE UPDATE ON \"main\".\"place_users\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"place_user_id\" != new.\"place_user_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column place_user_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_place_users_into_oplog;",
      "CREATE TRIGGER insert_main_place_users_into_oplog\n   AFTER INSERT ON \"main\".\"place_users\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.place_users')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'place_users', 'INSERT', json_object('place_user_id', new.\"place_user_id\"), json_object('account_id', new.\"account_id\", 'deleted', new.\"deleted\", 'label', new.\"label\", 'place_id', new.\"place_id\", 'place_user_id', new.\"place_user_id\", 'role', new.\"role\", 'user_id', new.\"user_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_place_users_into_oplog;",
      "CREATE TRIGGER update_main_place_users_into_oplog\n   AFTER UPDATE ON \"main\".\"place_users\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.place_users')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'place_users', 'UPDATE', json_object('place_user_id', new.\"place_user_id\"), json_object('account_id', new.\"account_id\", 'deleted', new.\"deleted\", 'label', new.\"label\", 'place_id', new.\"place_id\", 'place_user_id', new.\"place_user_id\", 'role', new.\"role\", 'user_id', new.\"user_id\"), json_object('account_id', old.\"account_id\", 'deleted', old.\"deleted\", 'label', old.\"label\", 'place_id', old.\"place_id\", 'place_user_id', old.\"place_user_id\", 'role', old.\"role\", 'user_id', old.\"user_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_place_users_into_oplog;",
      "CREATE TRIGGER delete_main_place_users_into_oplog\n   AFTER DELETE ON \"main\".\"place_users\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.place_users')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'place_users', 'DELETE', json_object('place_user_id', old.\"place_user_id\"), NULL, json_object('account_id', old.\"account_id\", 'deleted', old.\"deleted\", 'label', old.\"label\", 'place_id', old.\"place_id\", 'place_user_id', old.\"place_user_id\", 'role', old.\"role\", 'user_id', old.\"user_id\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_place_users_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_place_users_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"place_users\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_place_users_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_place_users_account_id_into_oplog\n   AFTER UPDATE ON \"main\".\"place_users\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_place_users_place_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_place_users_place_id_into_oplog\n  AFTER INSERT ON \"main\".\"place_users\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.places') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'places', 'COMPENSATION', json_object('place_id', \"place_id\"), json_object('place_id', \"place_id\"), NULL, NULL\n  FROM \"main\".\"places\" WHERE \"place_id\" = new.\"place_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_place_users_place_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_place_users_place_id_into_oplog\n   AFTER UPDATE ON \"main\".\"place_users\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.places') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'places', 'COMPENSATION', json_object('place_id', \"place_id\"), json_object('place_id', \"place_id\"), NULL, NULL\n  FROM \"main\".\"places\" WHERE \"place_id\" = new.\"place_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_place_users_user_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_place_users_user_id_into_oplog\n  AFTER INSERT ON \"main\".\"place_users\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.users') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'users', 'COMPENSATION', json_object('user_id', \"user_id\"), json_object('user_id', \"user_id\"), NULL, NULL\n  FROM \"main\".\"users\" WHERE \"user_id\" = new.\"user_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_place_users_user_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_place_users_user_id_into_oplog\n   AFTER UPDATE ON \"main\".\"place_users\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.users') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'users', 'COMPENSATION', json_object('user_id', \"user_id\"), json_object('user_id', \"user_id\"), NULL, NULL\n  FROM \"main\".\"users\" WHERE \"user_id\" = new.\"user_id\";\nEND;"
    ],
    "version": "28"
  },
  {
    "statements": [
      "CREATE TABLE \"goals\" (\n  \"goal_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"subproject_id\" TEXT,\n  \"year\" INTEGER,\n  \"name\" TEXT,\n  \"data\" TEXT_JSON,\n  \"label_replace_by_generated_column\" TEXT,\n  \"deleted\" INTEGER,\n  CONSTRAINT \"goals_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"goals_subproject_id_fkey\" FOREIGN KEY (\"subproject_id\") REFERENCES \"subprojects\" (\"subproject_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"goals_pkey\" PRIMARY KEY (\"goal_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"goals_account_id_idx\" ON \"goals\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"goals_subproject_id_idx\" ON \"goals\" (\"subproject_id\" ASC);\n",
      "CREATE INDEX \"goals_year_idx\" ON \"goals\" (\"year\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.goals', 1);",
      "  /* Triggers for table goals */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_goals_primarykey;",
      "CREATE TRIGGER update_ensure_main_goals_primarykey\n  BEFORE UPDATE ON \"main\".\"goals\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"goal_id\" != new.\"goal_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column goal_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_goals_into_oplog;",
      "CREATE TRIGGER insert_main_goals_into_oplog\n   AFTER INSERT ON \"main\".\"goals\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.goals')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'goals', 'INSERT', json_object('goal_id', new.\"goal_id\"), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'deleted', new.\"deleted\", 'goal_id', new.\"goal_id\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'name', new.\"name\", 'subproject_id', new.\"subproject_id\", 'year', new.\"year\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_goals_into_oplog;",
      "CREATE TRIGGER update_main_goals_into_oplog\n   AFTER UPDATE ON \"main\".\"goals\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.goals')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'goals', 'UPDATE', json_object('goal_id', new.\"goal_id\"), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'deleted', new.\"deleted\", 'goal_id', new.\"goal_id\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'name', new.\"name\", 'subproject_id', new.\"subproject_id\", 'year', new.\"year\"), json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'deleted', old.\"deleted\", 'goal_id', old.\"goal_id\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'name', old.\"name\", 'subproject_id', old.\"subproject_id\", 'year', old.\"year\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_goals_into_oplog;",
      "CREATE TRIGGER delete_main_goals_into_oplog\n   AFTER DELETE ON \"main\".\"goals\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.goals')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'goals', 'DELETE', json_object('goal_id', old.\"goal_id\"), NULL, json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'deleted', old.\"deleted\", 'goal_id', old.\"goal_id\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'name', old.\"name\", 'subproject_id', old.\"subproject_id\", 'year', old.\"year\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_goals_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_goals_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"goals\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_goals_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_goals_account_id_into_oplog\n   AFTER UPDATE ON \"main\".\"goals\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_goals_subproject_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_goals_subproject_id_into_oplog\n  AFTER INSERT ON \"main\".\"goals\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.subprojects') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'subprojects', 'COMPENSATION', json_object('subproject_id', \"subproject_id\"), json_object('subproject_id', \"subproject_id\"), NULL, NULL\n  FROM \"main\".\"subprojects\" WHERE \"subproject_id\" = new.\"subproject_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_goals_subproject_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_goals_subproject_id_into_oplog\n   AFTER UPDATE ON \"main\".\"goals\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.subprojects') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'subprojects', 'COMPENSATION', json_object('subproject_id', \"subproject_id\"), json_object('subproject_id', \"subproject_id\"), NULL, NULL\n  FROM \"main\".\"subprojects\" WHERE \"subproject_id\" = new.\"subproject_id\";\nEND;"
    ],
    "version": "29"
  },
  {
    "statements": [
      "CREATE TABLE \"projects\" (\n  \"project_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"name\" TEXT,\n  \"label\" TEXT,\n  \"type\" TEXT,\n  \"subproject_name_singular\" TEXT,\n  \"subproject_name_plural\" TEXT,\n  \"subproject_order_by\" TEXT,\n  \"places_label_by\" TEXT,\n  \"places_order_by\" TEXT_JSON,\n  \"persons_label_by\" TEXT,\n  \"persons_order_by\" TEXT,\n  \"goal_reports_label_by\" TEXT,\n  \"goal_reports_order_by\" TEXT,\n  \"values_on_multiple_levels\" TEXT,\n  \"multiple_action_values_on_same_level\" TEXT,\n  \"multiple_check_values_on_same_level\" TEXT,\n  \"data\" TEXT_JSON,\n  \"files_active_projects\" INTEGER,\n  \"files_active_projects_reports\" INTEGER,\n  \"files_active_subprojects\" INTEGER,\n  \"files_active_subproject_reports\" INTEGER,\n  \"files_active_places\" INTEGER,\n  \"files_active_actions\" INTEGER,\n  \"files_active_checks\" INTEGER,\n  \"files_active_check_reports\" INTEGER,\n  \"deleted\" INTEGER,\n  CONSTRAINT \"projects_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"projects_pkey\" PRIMARY KEY (\"project_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"projects_account_id_idx\" ON \"projects\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"projects_label_idx\" ON \"projects\" (\"label\" ASC);\n",
      "CREATE INDEX \"projects_name_idx\" ON \"projects\" (\"name\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.projects', 1);",
      "  /* Triggers for table projects */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_projects_primarykey;",
      "CREATE TRIGGER update_ensure_main_projects_primarykey\n  BEFORE UPDATE ON \"main\".\"projects\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"project_id\" != new.\"project_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column project_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_projects_into_oplog;",
      "CREATE TRIGGER insert_main_projects_into_oplog\n   AFTER INSERT ON \"main\".\"projects\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.projects')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'projects', 'INSERT', json_object('project_id', new.\"project_id\"), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'deleted', new.\"deleted\", 'files_active_actions', new.\"files_active_actions\", 'files_active_check_reports', new.\"files_active_check_reports\", 'files_active_checks', new.\"files_active_checks\", 'files_active_places', new.\"files_active_places\", 'files_active_projects', new.\"files_active_projects\", 'files_active_projects_reports', new.\"files_active_projects_reports\", 'files_active_subproject_reports', new.\"files_active_subproject_reports\", 'files_active_subprojects', new.\"files_active_subprojects\", 'goal_reports_label_by', new.\"goal_reports_label_by\", 'goal_reports_order_by', new.\"goal_reports_order_by\", 'label', new.\"label\", 'multiple_action_values_on_same_level', new.\"multiple_action_values_on_same_level\", 'multiple_check_values_on_same_level', new.\"multiple_check_values_on_same_level\", 'name', new.\"name\", 'persons_label_by', new.\"persons_label_by\", 'persons_order_by', new.\"persons_order_by\", 'places_label_by', new.\"places_label_by\", 'places_order_by', new.\"places_order_by\", 'project_id', new.\"project_id\", 'subproject_name_plural', new.\"subproject_name_plural\", 'subproject_name_singular', new.\"subproject_name_singular\", 'subproject_order_by', new.\"subproject_order_by\", 'type', new.\"type\", 'values_on_multiple_levels', new.\"values_on_multiple_levels\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_projects_into_oplog;",
      "CREATE TRIGGER update_main_projects_into_oplog\n   AFTER UPDATE ON \"main\".\"projects\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.projects')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'projects', 'UPDATE', json_object('project_id', new.\"project_id\"), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'deleted', new.\"deleted\", 'files_active_actions', new.\"files_active_actions\", 'files_active_check_reports', new.\"files_active_check_reports\", 'files_active_checks', new.\"files_active_checks\", 'files_active_places', new.\"files_active_places\", 'files_active_projects', new.\"files_active_projects\", 'files_active_projects_reports', new.\"files_active_projects_reports\", 'files_active_subproject_reports', new.\"files_active_subproject_reports\", 'files_active_subprojects', new.\"files_active_subprojects\", 'goal_reports_label_by', new.\"goal_reports_label_by\", 'goal_reports_order_by', new.\"goal_reports_order_by\", 'label', new.\"label\", 'multiple_action_values_on_same_level', new.\"multiple_action_values_on_same_level\", 'multiple_check_values_on_same_level', new.\"multiple_check_values_on_same_level\", 'name', new.\"name\", 'persons_label_by', new.\"persons_label_by\", 'persons_order_by', new.\"persons_order_by\", 'places_label_by', new.\"places_label_by\", 'places_order_by', new.\"places_order_by\", 'project_id', new.\"project_id\", 'subproject_name_plural', new.\"subproject_name_plural\", 'subproject_name_singular', new.\"subproject_name_singular\", 'subproject_order_by', new.\"subproject_order_by\", 'type', new.\"type\", 'values_on_multiple_levels', new.\"values_on_multiple_levels\"), json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'deleted', old.\"deleted\", 'files_active_actions', old.\"files_active_actions\", 'files_active_check_reports', old.\"files_active_check_reports\", 'files_active_checks', old.\"files_active_checks\", 'files_active_places', old.\"files_active_places\", 'files_active_projects', old.\"files_active_projects\", 'files_active_projects_reports', old.\"files_active_projects_reports\", 'files_active_subproject_reports', old.\"files_active_subproject_reports\", 'files_active_subprojects', old.\"files_active_subprojects\", 'goal_reports_label_by', old.\"goal_reports_label_by\", 'goal_reports_order_by', old.\"goal_reports_order_by\", 'label', old.\"label\", 'multiple_action_values_on_same_level', old.\"multiple_action_values_on_same_level\", 'multiple_check_values_on_same_level', old.\"multiple_check_values_on_same_level\", 'name', old.\"name\", 'persons_label_by', old.\"persons_label_by\", 'persons_order_by', old.\"persons_order_by\", 'places_label_by', old.\"places_label_by\", 'places_order_by', old.\"places_order_by\", 'project_id', old.\"project_id\", 'subproject_name_plural', old.\"subproject_name_plural\", 'subproject_name_singular', old.\"subproject_name_singular\", 'subproject_order_by', old.\"subproject_order_by\", 'type', old.\"type\", 'values_on_multiple_levels', old.\"values_on_multiple_levels\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_projects_into_oplog;",
      "CREATE TRIGGER delete_main_projects_into_oplog\n   AFTER DELETE ON \"main\".\"projects\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.projects')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'projects', 'DELETE', json_object('project_id', old.\"project_id\"), NULL, json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'deleted', old.\"deleted\", 'files_active_actions', old.\"files_active_actions\", 'files_active_check_reports', old.\"files_active_check_reports\", 'files_active_checks', old.\"files_active_checks\", 'files_active_places', old.\"files_active_places\", 'files_active_projects', old.\"files_active_projects\", 'files_active_projects_reports', old.\"files_active_projects_reports\", 'files_active_subproject_reports', old.\"files_active_subproject_reports\", 'files_active_subprojects', old.\"files_active_subprojects\", 'goal_reports_label_by', old.\"goal_reports_label_by\", 'goal_reports_order_by', old.\"goal_reports_order_by\", 'label', old.\"label\", 'multiple_action_values_on_same_level', old.\"multiple_action_values_on_same_level\", 'multiple_check_values_on_same_level', old.\"multiple_check_values_on_same_level\", 'name', old.\"name\", 'persons_label_by', old.\"persons_label_by\", 'persons_order_by', old.\"persons_order_by\", 'places_label_by', old.\"places_label_by\", 'places_order_by', old.\"places_order_by\", 'project_id', old.\"project_id\", 'subproject_name_plural', old.\"subproject_name_plural\", 'subproject_name_singular', old.\"subproject_name_singular\", 'subproject_order_by', old.\"subproject_order_by\", 'type', old.\"type\", 'values_on_multiple_levels', old.\"values_on_multiple_levels\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_projects_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_projects_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"projects\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_projects_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_projects_account_id_into_oplog\n   AFTER UPDATE ON \"main\".\"projects\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;"
    ],
    "version": "3"
  },
  {
    "statements": [
      "CREATE TABLE \"goal_reports\" (\n  \"goal_report_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"goal_id\" TEXT,\n  \"data\" TEXT_JSON,\n  \"label\" TEXT,\n  \"deleted\" INTEGER,\n  CONSTRAINT \"goal_reports_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"goal_reports_goal_id_fkey\" FOREIGN KEY (\"goal_id\") REFERENCES \"goals\" (\"goal_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"goal_reports_pkey\" PRIMARY KEY (\"goal_report_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"goal_reports_account_id_idx\" ON \"goal_reports\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"goal_reports_goal_id_idx\" ON \"goal_reports\" (\"goal_id\" ASC);\n",
      "CREATE INDEX \"goal_reports_label_idx\" ON \"goal_reports\" (\"label\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.goal_reports', 1);",
      "  /* Triggers for table goal_reports */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_goal_reports_primarykey;",
      "CREATE TRIGGER update_ensure_main_goal_reports_primarykey\n  BEFORE UPDATE ON \"main\".\"goal_reports\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"goal_report_id\" != new.\"goal_report_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column goal_report_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_goal_reports_into_oplog;",
      "CREATE TRIGGER insert_main_goal_reports_into_oplog\n   AFTER INSERT ON \"main\".\"goal_reports\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.goal_reports')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'goal_reports', 'INSERT', json_object('goal_report_id', new.\"goal_report_id\"), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'deleted', new.\"deleted\", 'goal_id', new.\"goal_id\", 'goal_report_id', new.\"goal_report_id\", 'label', new.\"label\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_goal_reports_into_oplog;",
      "CREATE TRIGGER update_main_goal_reports_into_oplog\n   AFTER UPDATE ON \"main\".\"goal_reports\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.goal_reports')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'goal_reports', 'UPDATE', json_object('goal_report_id', new.\"goal_report_id\"), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'deleted', new.\"deleted\", 'goal_id', new.\"goal_id\", 'goal_report_id', new.\"goal_report_id\", 'label', new.\"label\"), json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'deleted', old.\"deleted\", 'goal_id', old.\"goal_id\", 'goal_report_id', old.\"goal_report_id\", 'label', old.\"label\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_goal_reports_into_oplog;",
      "CREATE TRIGGER delete_main_goal_reports_into_oplog\n   AFTER DELETE ON \"main\".\"goal_reports\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.goal_reports')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'goal_reports', 'DELETE', json_object('goal_report_id', old.\"goal_report_id\"), NULL, json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'deleted', old.\"deleted\", 'goal_id', old.\"goal_id\", 'goal_report_id', old.\"goal_report_id\", 'label', old.\"label\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_goal_reports_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_goal_reports_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"goal_reports\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_goal_reports_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_goal_reports_account_id_into_oplog\n   AFTER UPDATE ON \"main\".\"goal_reports\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_goal_reports_goal_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_goal_reports_goal_id_into_oplog\n  AFTER INSERT ON \"main\".\"goal_reports\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.goals') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'goals', 'COMPENSATION', json_object('goal_id', \"goal_id\"), json_object('goal_id', \"goal_id\"), NULL, NULL\n  FROM \"main\".\"goals\" WHERE \"goal_id\" = new.\"goal_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_goal_reports_goal_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_goal_reports_goal_id_into_oplog\n   AFTER UPDATE ON \"main\".\"goal_reports\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.goals') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'goals', 'COMPENSATION', json_object('goal_id', \"goal_id\"), json_object('goal_id', \"goal_id\"), NULL, NULL\n  FROM \"main\".\"goals\" WHERE \"goal_id\" = new.\"goal_id\";\nEND;"
    ],
    "version": "30"
  },
  {
    "statements": [
      "CREATE TABLE \"goal_report_values\" (\n  \"goal_report_value_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"goal_report_id\" TEXT,\n  \"unit_id\" TEXT,\n  \"value_integer\" INTEGER,\n  \"value_numeric\" REAL,\n  \"value_text\" TEXT,\n  \"label\" TEXT,\n  \"deleted\" INTEGER,\n  CONSTRAINT \"goal_report_values_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"goal_report_values_goal_report_id_fkey\" FOREIGN KEY (\"goal_report_id\") REFERENCES \"goal_reports\" (\"goal_report_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"goal_report_values_unit_id_fkey\" FOREIGN KEY (\"unit_id\") REFERENCES \"units\" (\"unit_id\") ON UPDATE CASCADE,\n  CONSTRAINT \"goal_report_values_pkey\" PRIMARY KEY (\"goal_report_value_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"goal_report_values_account_id_idx\" ON \"goal_report_values\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"goal_report_values_goal_report_id_idx\" ON \"goal_report_values\" (\"goal_report_id\" ASC);\n",
      "CREATE INDEX \"goal_report_values_label_idx\" ON \"goal_report_values\" (\"label\" ASC);\n",
      "CREATE INDEX \"goal_report_values_unit_id_idx\" ON \"goal_report_values\" (\"unit_id\" ASC);\n",
      "CREATE INDEX \"goal_report_values_value_integer_idx\" ON \"goal_report_values\" (\"value_integer\" ASC);\n",
      "CREATE INDEX \"goal_report_values_value_numeric_idx\" ON \"goal_report_values\" (\"value_numeric\" ASC);\n",
      "CREATE INDEX \"goal_report_values_value_text_idx\" ON \"goal_report_values\" (\"value_text\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.goal_report_values', 1);",
      "  /* Triggers for table goal_report_values */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_goal_report_values_primarykey;",
      "CREATE TRIGGER update_ensure_main_goal_report_values_primarykey\n  BEFORE UPDATE ON \"main\".\"goal_report_values\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"goal_report_value_id\" != new.\"goal_report_value_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column goal_report_value_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_goal_report_values_into_oplog;",
      "CREATE TRIGGER insert_main_goal_report_values_into_oplog\n   AFTER INSERT ON \"main\".\"goal_report_values\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.goal_report_values')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'goal_report_values', 'INSERT', json_object('goal_report_value_id', new.\"goal_report_value_id\"), json_object('account_id', new.\"account_id\", 'deleted', new.\"deleted\", 'goal_report_id', new.\"goal_report_id\", 'goal_report_value_id', new.\"goal_report_value_id\", 'label', new.\"label\", 'unit_id', new.\"unit_id\", 'value_integer', new.\"value_integer\", 'value_numeric', cast(new.\"value_numeric\" as TEXT), 'value_text', new.\"value_text\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_goal_report_values_into_oplog;",
      "CREATE TRIGGER update_main_goal_report_values_into_oplog\n   AFTER UPDATE ON \"main\".\"goal_report_values\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.goal_report_values')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'goal_report_values', 'UPDATE', json_object('goal_report_value_id', new.\"goal_report_value_id\"), json_object('account_id', new.\"account_id\", 'deleted', new.\"deleted\", 'goal_report_id', new.\"goal_report_id\", 'goal_report_value_id', new.\"goal_report_value_id\", 'label', new.\"label\", 'unit_id', new.\"unit_id\", 'value_integer', new.\"value_integer\", 'value_numeric', cast(new.\"value_numeric\" as TEXT), 'value_text', new.\"value_text\"), json_object('account_id', old.\"account_id\", 'deleted', old.\"deleted\", 'goal_report_id', old.\"goal_report_id\", 'goal_report_value_id', old.\"goal_report_value_id\", 'label', old.\"label\", 'unit_id', old.\"unit_id\", 'value_integer', old.\"value_integer\", 'value_numeric', cast(old.\"value_numeric\" as TEXT), 'value_text', old.\"value_text\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_goal_report_values_into_oplog;",
      "CREATE TRIGGER delete_main_goal_report_values_into_oplog\n   AFTER DELETE ON \"main\".\"goal_report_values\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.goal_report_values')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'goal_report_values', 'DELETE', json_object('goal_report_value_id', old.\"goal_report_value_id\"), NULL, json_object('account_id', old.\"account_id\", 'deleted', old.\"deleted\", 'goal_report_id', old.\"goal_report_id\", 'goal_report_value_id', old.\"goal_report_value_id\", 'label', old.\"label\", 'unit_id', old.\"unit_id\", 'value_integer', old.\"value_integer\", 'value_numeric', cast(old.\"value_numeric\" as TEXT), 'value_text', old.\"value_text\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_goal_report_values_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_goal_report_values_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"goal_report_values\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_goal_report_values_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_goal_report_values_account_id_into_oplog\n   AFTER UPDATE ON \"main\".\"goal_report_values\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_goal_report_values_goal_report_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_goal_report_values_goal_report_id_into_oplog\n  AFTER INSERT ON \"main\".\"goal_report_values\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.goal_reports') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'goal_reports', 'COMPENSATION', json_object('goal_report_id', \"goal_report_id\"), json_object('goal_report_id', \"goal_report_id\"), NULL, NULL\n  FROM \"main\".\"goal_reports\" WHERE \"goal_report_id\" = new.\"goal_report_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_goal_report_values_goal_report_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_goal_report_values_goal_report_id_into_oplog\n   AFTER UPDATE ON \"main\".\"goal_report_values\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.goal_reports') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'goal_reports', 'COMPENSATION', json_object('goal_report_id', \"goal_report_id\"), json_object('goal_report_id', \"goal_report_id\"), NULL, NULL\n  FROM \"main\".\"goal_reports\" WHERE \"goal_report_id\" = new.\"goal_report_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_goal_report_values_unit_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_goal_report_values_unit_id_into_oplog\n  AFTER INSERT ON \"main\".\"goal_report_values\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.units') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'units', 'COMPENSATION', json_object('unit_id', \"unit_id\"), json_object('unit_id', \"unit_id\"), NULL, NULL\n  FROM \"main\".\"units\" WHERE \"unit_id\" = new.\"unit_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_goal_report_values_unit_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_goal_report_values_unit_id_into_oplog\n   AFTER UPDATE ON \"main\".\"goal_report_values\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.units') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'units', 'COMPENSATION', json_object('unit_id', \"unit_id\"), json_object('unit_id', \"unit_id\"), NULL, NULL\n  FROM \"main\".\"units\" WHERE \"unit_id\" = new.\"unit_id\";\nEND;"
    ],
    "version": "31"
  },
  {
    "statements": [
      "CREATE TABLE \"subproject_reports\" (\n  \"subproject_report_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"subproject_id\" TEXT,\n  \"year\" INTEGER,\n  \"data\" TEXT_JSON,\n  \"label_replace_by_generated_column\" TEXT,\n  \"deleted\" INTEGER,\n  CONSTRAINT \"subproject_reports_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"subproject_reports_subproject_id_fkey\" FOREIGN KEY (\"subproject_id\") REFERENCES \"subprojects\" (\"subproject_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"subproject_reports_pkey\" PRIMARY KEY (\"subproject_report_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"subproject_reports_account_id_idx\" ON \"subproject_reports\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"subproject_reports_subproject_id_idx\" ON \"subproject_reports\" (\"subproject_id\" ASC);\n",
      "CREATE INDEX \"subproject_reports_year_idx\" ON \"subproject_reports\" (\"year\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.subproject_reports', 1);",
      "  /* Triggers for table subproject_reports */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_subproject_reports_primarykey;",
      "CREATE TRIGGER update_ensure_main_subproject_reports_primarykey\n  BEFORE UPDATE ON \"main\".\"subproject_reports\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"subproject_report_id\" != new.\"subproject_report_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column subproject_report_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_subproject_reports_into_oplog;",
      "CREATE TRIGGER insert_main_subproject_reports_into_oplog\n   AFTER INSERT ON \"main\".\"subproject_reports\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.subproject_reports')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'subproject_reports', 'INSERT', json_object('subproject_report_id', new.\"subproject_report_id\"), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'deleted', new.\"deleted\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'subproject_id', new.\"subproject_id\", 'subproject_report_id', new.\"subproject_report_id\", 'year', new.\"year\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_subproject_reports_into_oplog;",
      "CREATE TRIGGER update_main_subproject_reports_into_oplog\n   AFTER UPDATE ON \"main\".\"subproject_reports\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.subproject_reports')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'subproject_reports', 'UPDATE', json_object('subproject_report_id', new.\"subproject_report_id\"), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'deleted', new.\"deleted\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'subproject_id', new.\"subproject_id\", 'subproject_report_id', new.\"subproject_report_id\", 'year', new.\"year\"), json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'deleted', old.\"deleted\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'subproject_id', old.\"subproject_id\", 'subproject_report_id', old.\"subproject_report_id\", 'year', old.\"year\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_subproject_reports_into_oplog;",
      "CREATE TRIGGER delete_main_subproject_reports_into_oplog\n   AFTER DELETE ON \"main\".\"subproject_reports\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.subproject_reports')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'subproject_reports', 'DELETE', json_object('subproject_report_id', old.\"subproject_report_id\"), NULL, json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'deleted', old.\"deleted\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'subproject_id', old.\"subproject_id\", 'subproject_report_id', old.\"subproject_report_id\", 'year', old.\"year\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_subproject_reports_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_subproject_reports_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"subproject_reports\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_subproject_reports_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_subproject_reports_account_id_into_oplog\n   AFTER UPDATE ON \"main\".\"subproject_reports\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_subproject_reports_subproject_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_subproject_reports_subproject_id_into_oplog\n  AFTER INSERT ON \"main\".\"subproject_reports\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.subprojects') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'subprojects', 'COMPENSATION', json_object('subproject_id', \"subproject_id\"), json_object('subproject_id', \"subproject_id\"), NULL, NULL\n  FROM \"main\".\"subprojects\" WHERE \"subproject_id\" = new.\"subproject_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_subproject_reports_subproject_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_subproject_reports_subproject_id_into_oplog\n   AFTER UPDATE ON \"main\".\"subproject_reports\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.subprojects') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'subprojects', 'COMPENSATION', json_object('subproject_id', \"subproject_id\"), json_object('subproject_id', \"subproject_id\"), NULL, NULL\n  FROM \"main\".\"subprojects\" WHERE \"subproject_id\" = new.\"subproject_id\";\nEND;"
    ],
    "version": "32"
  },
  {
    "statements": [
      "CREATE TABLE \"project_reports\" (\n  \"project_report_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"project_id\" TEXT,\n  \"year\" INTEGER,\n  \"data\" TEXT_JSON,\n  \"label_replace_by_generated_column\" TEXT,\n  \"deleted\" INTEGER,\n  CONSTRAINT \"project_reports_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"project_reports_project_id_fkey\" FOREIGN KEY (\"project_id\") REFERENCES \"projects\" (\"project_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"project_reports_pkey\" PRIMARY KEY (\"project_report_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"project_reports_account_id_idx\" ON \"project_reports\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"project_reports_project_id_idx\" ON \"project_reports\" (\"project_id\" ASC);\n",
      "CREATE INDEX \"project_reports_year_idx\" ON \"project_reports\" (\"year\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.project_reports', 1);",
      "  /* Triggers for table project_reports */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_project_reports_primarykey;",
      "CREATE TRIGGER update_ensure_main_project_reports_primarykey\n  BEFORE UPDATE ON \"main\".\"project_reports\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"project_report_id\" != new.\"project_report_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column project_report_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_project_reports_into_oplog;",
      "CREATE TRIGGER insert_main_project_reports_into_oplog\n   AFTER INSERT ON \"main\".\"project_reports\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.project_reports')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'project_reports', 'INSERT', json_object('project_report_id', new.\"project_report_id\"), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'deleted', new.\"deleted\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'project_id', new.\"project_id\", 'project_report_id', new.\"project_report_id\", 'year', new.\"year\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_project_reports_into_oplog;",
      "CREATE TRIGGER update_main_project_reports_into_oplog\n   AFTER UPDATE ON \"main\".\"project_reports\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.project_reports')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'project_reports', 'UPDATE', json_object('project_report_id', new.\"project_report_id\"), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'deleted', new.\"deleted\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'project_id', new.\"project_id\", 'project_report_id', new.\"project_report_id\", 'year', new.\"year\"), json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'deleted', old.\"deleted\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'project_id', old.\"project_id\", 'project_report_id', old.\"project_report_id\", 'year', old.\"year\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_project_reports_into_oplog;",
      "CREATE TRIGGER delete_main_project_reports_into_oplog\n   AFTER DELETE ON \"main\".\"project_reports\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.project_reports')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'project_reports', 'DELETE', json_object('project_report_id', old.\"project_report_id\"), NULL, json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'deleted', old.\"deleted\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'project_id', old.\"project_id\", 'project_report_id', old.\"project_report_id\", 'year', old.\"year\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_project_reports_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_project_reports_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"project_reports\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_project_reports_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_project_reports_account_id_into_oplog\n   AFTER UPDATE ON \"main\".\"project_reports\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_project_reports_project_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_project_reports_project_id_into_oplog\n  AFTER INSERT ON \"main\".\"project_reports\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.projects') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_object('project_id', \"project_id\"), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_project_reports_project_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_project_reports_project_id_into_oplog\n   AFTER UPDATE ON \"main\".\"project_reports\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.projects') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_object('project_id', \"project_id\"), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;"
    ],
    "version": "33"
  },
  {
    "statements": [
      "CREATE TABLE \"files\" (\n  \"file_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"project_id\" TEXT,\n  \"subproject_id\" TEXT,\n  \"place_id\" TEXT,\n  \"action_id\" TEXT,\n  \"check_id\" TEXT,\n  \"name\" TEXT,\n  \"label_replace_by_generated_column\" TEXT,\n  \"data\" TEXT_JSON,\n  \"mimetype\" TEXT,\n  \"url\" TEXT,\n  \"deleted\" INTEGER,\n  CONSTRAINT \"files_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"files_action_id_fkey\" FOREIGN KEY (\"action_id\") REFERENCES \"actions\" (\"action_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"files_check_id_fkey\" FOREIGN KEY (\"check_id\") REFERENCES \"checks\" (\"check_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"files_place_id_fkey\" FOREIGN KEY (\"place_id\") REFERENCES \"places\" (\"place_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"files_project_id_fkey\" FOREIGN KEY (\"project_id\") REFERENCES \"projects\" (\"project_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"files_subproject_id_fkey\" FOREIGN KEY (\"subproject_id\") REFERENCES \"subprojects\" (\"subproject_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"files_pkey\" PRIMARY KEY (\"file_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"files_account_id_idx\" ON \"files\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"files_action_id_idx\" ON \"files\" (\"action_id\" ASC);\n",
      "CREATE INDEX \"files_check_id_idx\" ON \"files\" (\"check_id\" ASC);\n",
      "CREATE INDEX \"files_name_idx\" ON \"files\" (\"name\" ASC);\n",
      "CREATE INDEX \"files_place_id_idx\" ON \"files\" (\"place_id\" ASC);\n",
      "CREATE INDEX \"files_project_id_idx\" ON \"files\" (\"project_id\" ASC);\n",
      "CREATE INDEX \"files_subproject_id_idx\" ON \"files\" (\"subproject_id\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.files', 1);",
      "  /* Triggers for table files */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_files_primarykey;",
      "CREATE TRIGGER update_ensure_main_files_primarykey\n  BEFORE UPDATE ON \"main\".\"files\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"file_id\" != new.\"file_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column file_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_files_into_oplog;",
      "CREATE TRIGGER insert_main_files_into_oplog\n   AFTER INSERT ON \"main\".\"files\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.files')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'files', 'INSERT', json_object('file_id', new.\"file_id\"), json_object('account_id', new.\"account_id\", 'action_id', new.\"action_id\", 'check_id', new.\"check_id\", 'data', new.\"data\", 'deleted', new.\"deleted\", 'file_id', new.\"file_id\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'mimetype', new.\"mimetype\", 'name', new.\"name\", 'place_id', new.\"place_id\", 'project_id', new.\"project_id\", 'subproject_id', new.\"subproject_id\", 'url', new.\"url\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_files_into_oplog;",
      "CREATE TRIGGER update_main_files_into_oplog\n   AFTER UPDATE ON \"main\".\"files\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.files')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'files', 'UPDATE', json_object('file_id', new.\"file_id\"), json_object('account_id', new.\"account_id\", 'action_id', new.\"action_id\", 'check_id', new.\"check_id\", 'data', new.\"data\", 'deleted', new.\"deleted\", 'file_id', new.\"file_id\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'mimetype', new.\"mimetype\", 'name', new.\"name\", 'place_id', new.\"place_id\", 'project_id', new.\"project_id\", 'subproject_id', new.\"subproject_id\", 'url', new.\"url\"), json_object('account_id', old.\"account_id\", 'action_id', old.\"action_id\", 'check_id', old.\"check_id\", 'data', old.\"data\", 'deleted', old.\"deleted\", 'file_id', old.\"file_id\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'mimetype', old.\"mimetype\", 'name', old.\"name\", 'place_id', old.\"place_id\", 'project_id', old.\"project_id\", 'subproject_id', old.\"subproject_id\", 'url', old.\"url\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_files_into_oplog;",
      "CREATE TRIGGER delete_main_files_into_oplog\n   AFTER DELETE ON \"main\".\"files\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.files')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'files', 'DELETE', json_object('file_id', old.\"file_id\"), NULL, json_object('account_id', old.\"account_id\", 'action_id', old.\"action_id\", 'check_id', old.\"check_id\", 'data', old.\"data\", 'deleted', old.\"deleted\", 'file_id', old.\"file_id\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'mimetype', old.\"mimetype\", 'name', old.\"name\", 'place_id', old.\"place_id\", 'project_id', old.\"project_id\", 'subproject_id', old.\"subproject_id\", 'url', old.\"url\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_files_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_files_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"files\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_files_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_files_account_id_into_oplog\n   AFTER UPDATE ON \"main\".\"files\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_files_action_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_files_action_id_into_oplog\n  AFTER INSERT ON \"main\".\"files\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.actions') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'actions', 'COMPENSATION', json_object('action_id', \"action_id\"), json_object('action_id', \"action_id\"), NULL, NULL\n  FROM \"main\".\"actions\" WHERE \"action_id\" = new.\"action_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_files_action_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_files_action_id_into_oplog\n   AFTER UPDATE ON \"main\".\"files\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.actions') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'actions', 'COMPENSATION', json_object('action_id', \"action_id\"), json_object('action_id', \"action_id\"), NULL, NULL\n  FROM \"main\".\"actions\" WHERE \"action_id\" = new.\"action_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_files_check_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_files_check_id_into_oplog\n  AFTER INSERT ON \"main\".\"files\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.checks') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'checks', 'COMPENSATION', json_object('check_id', \"check_id\"), json_object('check_id', \"check_id\"), NULL, NULL\n  FROM \"main\".\"checks\" WHERE \"check_id\" = new.\"check_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_files_check_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_files_check_id_into_oplog\n   AFTER UPDATE ON \"main\".\"files\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.checks') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'checks', 'COMPENSATION', json_object('check_id', \"check_id\"), json_object('check_id', \"check_id\"), NULL, NULL\n  FROM \"main\".\"checks\" WHERE \"check_id\" = new.\"check_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_files_place_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_files_place_id_into_oplog\n  AFTER INSERT ON \"main\".\"files\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.places') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'places', 'COMPENSATION', json_object('place_id', \"place_id\"), json_object('place_id', \"place_id\"), NULL, NULL\n  FROM \"main\".\"places\" WHERE \"place_id\" = new.\"place_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_files_place_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_files_place_id_into_oplog\n   AFTER UPDATE ON \"main\".\"files\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.places') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'places', 'COMPENSATION', json_object('place_id', \"place_id\"), json_object('place_id', \"place_id\"), NULL, NULL\n  FROM \"main\".\"places\" WHERE \"place_id\" = new.\"place_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_files_project_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_files_project_id_into_oplog\n  AFTER INSERT ON \"main\".\"files\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.projects') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_object('project_id', \"project_id\"), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_files_project_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_files_project_id_into_oplog\n   AFTER UPDATE ON \"main\".\"files\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.projects') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_object('project_id', \"project_id\"), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_files_subproject_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_files_subproject_id_into_oplog\n  AFTER INSERT ON \"main\".\"files\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.subprojects') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'subprojects', 'COMPENSATION', json_object('subproject_id', \"subproject_id\"), json_object('subproject_id', \"subproject_id\"), NULL, NULL\n  FROM \"main\".\"subprojects\" WHERE \"subproject_id\" = new.\"subproject_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_files_subproject_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_files_subproject_id_into_oplog\n   AFTER UPDATE ON \"main\".\"files\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.subprojects') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'subprojects', 'COMPENSATION', json_object('subproject_id', \"subproject_id\"), json_object('subproject_id', \"subproject_id\"), NULL, NULL\n  FROM \"main\".\"subprojects\" WHERE \"subproject_id\" = new.\"subproject_id\";\nEND;"
    ],
    "version": "34"
  },
  {
    "statements": [
      "CREATE TABLE \"persons\" (\n  \"person_id\" TEXT NOT NULL,\n  \"project_id\" TEXT,\n  \"account_id\" TEXT,\n  \"email\" TEXT,\n  \"data\" TEXT_JSON,\n  \"label_replace_by_generated_column\" TEXT,\n  \"deleted\" INTEGER,\n  CONSTRAINT \"persons_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"persons_project_id_fkey\" FOREIGN KEY (\"project_id\") REFERENCES \"projects\" (\"project_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"persons_pkey\" PRIMARY KEY (\"person_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"persons_account_id_idx\" ON \"persons\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"persons_email_idx\" ON \"persons\" (\"email\" ASC);\n",
      "CREATE INDEX \"persons_project_id_idx\" ON \"persons\" (\"project_id\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.persons', 1);",
      "  /* Triggers for table persons */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_persons_primarykey;",
      "CREATE TRIGGER update_ensure_main_persons_primarykey\n  BEFORE UPDATE ON \"main\".\"persons\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"person_id\" != new.\"person_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column person_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_persons_into_oplog;",
      "CREATE TRIGGER insert_main_persons_into_oplog\n   AFTER INSERT ON \"main\".\"persons\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.persons')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'persons', 'INSERT', json_object('person_id', new.\"person_id\"), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'deleted', new.\"deleted\", 'email', new.\"email\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'person_id', new.\"person_id\", 'project_id', new.\"project_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_persons_into_oplog;",
      "CREATE TRIGGER update_main_persons_into_oplog\n   AFTER UPDATE ON \"main\".\"persons\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.persons')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'persons', 'UPDATE', json_object('person_id', new.\"person_id\"), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'deleted', new.\"deleted\", 'email', new.\"email\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'person_id', new.\"person_id\", 'project_id', new.\"project_id\"), json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'deleted', old.\"deleted\", 'email', old.\"email\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'person_id', old.\"person_id\", 'project_id', old.\"project_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_persons_into_oplog;",
      "CREATE TRIGGER delete_main_persons_into_oplog\n   AFTER DELETE ON \"main\".\"persons\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.persons')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'persons', 'DELETE', json_object('person_id', old.\"person_id\"), NULL, json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'deleted', old.\"deleted\", 'email', old.\"email\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'person_id', old.\"person_id\", 'project_id', old.\"project_id\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_persons_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_persons_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"persons\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_persons_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_persons_account_id_into_oplog\n   AFTER UPDATE ON \"main\".\"persons\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_persons_project_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_persons_project_id_into_oplog\n  AFTER INSERT ON \"main\".\"persons\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.projects') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_object('project_id', \"project_id\"), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_persons_project_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_persons_project_id_into_oplog\n   AFTER UPDATE ON \"main\".\"persons\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.projects') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_object('project_id', \"project_id\"), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;"
    ],
    "version": "35"
  },
  {
    "statements": [
      "CREATE TABLE \"field_types\" (\n  \"field_type_id\" TEXT NOT NULL,\n  \"name\" TEXT,\n  \"sort\" INTEGER,\n  \"comment\" TEXT,\n  \"label_replace_by_generated_column\" TEXT,\n  \"deleted\" INTEGER,\n  CONSTRAINT \"field_types_pkey\" PRIMARY KEY (\"field_type_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"field_types_name_idx\" ON \"field_types\" (\"name\" ASC);\n",
      "CREATE INDEX \"field_types_sort_idx\" ON \"field_types\" (\"sort\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.field_types', 1);",
      "  /* Triggers for table field_types */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_field_types_primarykey;",
      "CREATE TRIGGER update_ensure_main_field_types_primarykey\n  BEFORE UPDATE ON \"main\".\"field_types\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"field_type_id\" != new.\"field_type_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column field_type_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_field_types_into_oplog;",
      "CREATE TRIGGER insert_main_field_types_into_oplog\n   AFTER INSERT ON \"main\".\"field_types\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.field_types')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'field_types', 'INSERT', json_object('field_type_id', new.\"field_type_id\"), json_object('comment', new.\"comment\", 'deleted', new.\"deleted\", 'field_type_id', new.\"field_type_id\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'name', new.\"name\", 'sort', new.\"sort\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_field_types_into_oplog;",
      "CREATE TRIGGER update_main_field_types_into_oplog\n   AFTER UPDATE ON \"main\".\"field_types\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.field_types')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'field_types', 'UPDATE', json_object('field_type_id', new.\"field_type_id\"), json_object('comment', new.\"comment\", 'deleted', new.\"deleted\", 'field_type_id', new.\"field_type_id\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'name', new.\"name\", 'sort', new.\"sort\"), json_object('comment', old.\"comment\", 'deleted', old.\"deleted\", 'field_type_id', old.\"field_type_id\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'name', old.\"name\", 'sort', old.\"sort\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_field_types_into_oplog;",
      "CREATE TRIGGER delete_main_field_types_into_oplog\n   AFTER DELETE ON \"main\".\"field_types\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.field_types')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'field_types', 'DELETE', json_object('field_type_id', old.\"field_type_id\"), NULL, json_object('comment', old.\"comment\", 'deleted', old.\"deleted\", 'field_type_id', old.\"field_type_id\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'name', old.\"name\", 'sort', old.\"sort\"), NULL);\nEND;"
    ],
    "version": "36"
  },
  {
    "statements": [
      "CREATE TABLE \"widget_types\" (\n  \"widget_type_id\" TEXT NOT NULL,\n  \"name\" TEXT,\n  \"needs_list\" INTEGER,\n  \"sort\" INTEGER,\n  \"comment\" TEXT,\n  \"label_replace_by_generated_column\" TEXT,\n  \"deleted\" INTEGER,\n  CONSTRAINT \"widget_types_pkey\" PRIMARY KEY (\"widget_type_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"widget_types_name_idx\" ON \"widget_types\" (\"name\" ASC);\n",
      "CREATE INDEX \"widget_types_sort_idx\" ON \"widget_types\" (\"sort\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.widget_types', 1);",
      "  /* Triggers for table widget_types */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_widget_types_primarykey;",
      "CREATE TRIGGER update_ensure_main_widget_types_primarykey\n  BEFORE UPDATE ON \"main\".\"widget_types\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"widget_type_id\" != new.\"widget_type_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column widget_type_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_widget_types_into_oplog;",
      "CREATE TRIGGER insert_main_widget_types_into_oplog\n   AFTER INSERT ON \"main\".\"widget_types\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.widget_types')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'widget_types', 'INSERT', json_object('widget_type_id', new.\"widget_type_id\"), json_object('comment', new.\"comment\", 'deleted', new.\"deleted\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'name', new.\"name\", 'needs_list', new.\"needs_list\", 'sort', new.\"sort\", 'widget_type_id', new.\"widget_type_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_widget_types_into_oplog;",
      "CREATE TRIGGER update_main_widget_types_into_oplog\n   AFTER UPDATE ON \"main\".\"widget_types\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.widget_types')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'widget_types', 'UPDATE', json_object('widget_type_id', new.\"widget_type_id\"), json_object('comment', new.\"comment\", 'deleted', new.\"deleted\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'name', new.\"name\", 'needs_list', new.\"needs_list\", 'sort', new.\"sort\", 'widget_type_id', new.\"widget_type_id\"), json_object('comment', old.\"comment\", 'deleted', old.\"deleted\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'name', old.\"name\", 'needs_list', old.\"needs_list\", 'sort', old.\"sort\", 'widget_type_id', old.\"widget_type_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_widget_types_into_oplog;",
      "CREATE TRIGGER delete_main_widget_types_into_oplog\n   AFTER DELETE ON \"main\".\"widget_types\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.widget_types')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'widget_types', 'DELETE', json_object('widget_type_id', old.\"widget_type_id\"), NULL, json_object('comment', old.\"comment\", 'deleted', old.\"deleted\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'name', old.\"name\", 'needs_list', old.\"needs_list\", 'sort', old.\"sort\", 'widget_type_id', old.\"widget_type_id\"), NULL);\nEND;"
    ],
    "version": "38"
  },
  {
    "statements": [
      "CREATE TABLE \"place_levels\" (\n  \"place_level_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"project_id\" TEXT,\n  \"level\" INTEGER,\n  \"name_singular\" TEXT,\n  \"name_plural\" TEXT,\n  \"name_short\" TEXT,\n  \"reports\" INTEGER,\n  \"report_values\" INTEGER,\n  \"actions\" INTEGER,\n  \"action_values\" INTEGER,\n  \"action_reports\" INTEGER,\n  \"checks\" INTEGER,\n  \"check_values\" INTEGER,\n  \"check_taxa\" INTEGER,\n  \"observation_references\" INTEGER,\n  \"label_replace_by_generated_column\" TEXT,\n  \"deleted\" INTEGER,\n  CONSTRAINT \"place_levels_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"place_levels_project_id_fkey\" FOREIGN KEY (\"project_id\") REFERENCES \"projects\" (\"project_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"place_levels_pkey\" PRIMARY KEY (\"place_level_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"place_levels_account_id_idx\" ON \"place_levels\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"place_levels_level_idx\" ON \"place_levels\" (\"level\" ASC);\n",
      "CREATE INDEX \"place_levels_name_singular_idx\" ON \"place_levels\" (\"name_singular\" ASC);\n",
      "CREATE INDEX \"place_levels_project_id_idx\" ON \"place_levels\" (\"project_id\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.place_levels', 1);",
      "  /* Triggers for table place_levels */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_place_levels_primarykey;",
      "CREATE TRIGGER update_ensure_main_place_levels_primarykey\n  BEFORE UPDATE ON \"main\".\"place_levels\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"place_level_id\" != new.\"place_level_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column place_level_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_place_levels_into_oplog;",
      "CREATE TRIGGER insert_main_place_levels_into_oplog\n   AFTER INSERT ON \"main\".\"place_levels\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.place_levels')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'place_levels', 'INSERT', json_object('place_level_id', new.\"place_level_id\"), json_object('account_id', new.\"account_id\", 'action_reports', new.\"action_reports\", 'action_values', new.\"action_values\", 'actions', new.\"actions\", 'check_taxa', new.\"check_taxa\", 'check_values', new.\"check_values\", 'checks', new.\"checks\", 'deleted', new.\"deleted\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'level', new.\"level\", 'name_plural', new.\"name_plural\", 'name_short', new.\"name_short\", 'name_singular', new.\"name_singular\", 'observation_references', new.\"observation_references\", 'place_level_id', new.\"place_level_id\", 'project_id', new.\"project_id\", 'report_values', new.\"report_values\", 'reports', new.\"reports\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_place_levels_into_oplog;",
      "CREATE TRIGGER update_main_place_levels_into_oplog\n   AFTER UPDATE ON \"main\".\"place_levels\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.place_levels')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'place_levels', 'UPDATE', json_object('place_level_id', new.\"place_level_id\"), json_object('account_id', new.\"account_id\", 'action_reports', new.\"action_reports\", 'action_values', new.\"action_values\", 'actions', new.\"actions\", 'check_taxa', new.\"check_taxa\", 'check_values', new.\"check_values\", 'checks', new.\"checks\", 'deleted', new.\"deleted\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'level', new.\"level\", 'name_plural', new.\"name_plural\", 'name_short', new.\"name_short\", 'name_singular', new.\"name_singular\", 'observation_references', new.\"observation_references\", 'place_level_id', new.\"place_level_id\", 'project_id', new.\"project_id\", 'report_values', new.\"report_values\", 'reports', new.\"reports\"), json_object('account_id', old.\"account_id\", 'action_reports', old.\"action_reports\", 'action_values', old.\"action_values\", 'actions', old.\"actions\", 'check_taxa', old.\"check_taxa\", 'check_values', old.\"check_values\", 'checks', old.\"checks\", 'deleted', old.\"deleted\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'level', old.\"level\", 'name_plural', old.\"name_plural\", 'name_short', old.\"name_short\", 'name_singular', old.\"name_singular\", 'observation_references', old.\"observation_references\", 'place_level_id', old.\"place_level_id\", 'project_id', old.\"project_id\", 'report_values', old.\"report_values\", 'reports', old.\"reports\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_place_levels_into_oplog;",
      "CREATE TRIGGER delete_main_place_levels_into_oplog\n   AFTER DELETE ON \"main\".\"place_levels\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.place_levels')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'place_levels', 'DELETE', json_object('place_level_id', old.\"place_level_id\"), NULL, json_object('account_id', old.\"account_id\", 'action_reports', old.\"action_reports\", 'action_values', old.\"action_values\", 'actions', old.\"actions\", 'check_taxa', old.\"check_taxa\", 'check_values', old.\"check_values\", 'checks', old.\"checks\", 'deleted', old.\"deleted\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'level', old.\"level\", 'name_plural', old.\"name_plural\", 'name_short', old.\"name_short\", 'name_singular', old.\"name_singular\", 'observation_references', old.\"observation_references\", 'place_level_id', old.\"place_level_id\", 'project_id', old.\"project_id\", 'report_values', old.\"report_values\", 'reports', old.\"reports\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_place_levels_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_place_levels_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"place_levels\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_place_levels_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_place_levels_account_id_into_oplog\n   AFTER UPDATE ON \"main\".\"place_levels\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_place_levels_project_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_place_levels_project_id_into_oplog\n  AFTER INSERT ON \"main\".\"place_levels\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.projects') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_object('project_id', \"project_id\"), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_place_levels_project_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_place_levels_project_id_into_oplog\n   AFTER UPDATE ON \"main\".\"place_levels\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.projects') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_object('project_id', \"project_id\"), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;"
    ],
    "version": "4"
  },
  {
    "statements": [
      "CREATE TABLE \"widgets_for_fields\" (\n  \"widget_for_field_id\" TEXT NOT NULL,\n  \"field_type_id\" TEXT,\n  \"widget_type_id\" TEXT,\n  \"label\" TEXT,\n  \"deleted\" INTEGER,\n  CONSTRAINT \"widgets_for_fields_field_type_id_fkey\" FOREIGN KEY (\"field_type_id\") REFERENCES \"field_types\" (\"field_type_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"widgets_for_fields_widget_type_id_fkey\" FOREIGN KEY (\"widget_type_id\") REFERENCES \"widget_types\" (\"widget_type_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"widgets_for_fields_pkey\" PRIMARY KEY (\"widget_for_field_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"widgets_for_fields_field_type_id_idx\" ON \"widgets_for_fields\" (\"field_type_id\" ASC);\n",
      "CREATE INDEX \"widgets_for_fields_label_idx\" ON \"widgets_for_fields\" (\"label\" ASC);\n",
      "CREATE INDEX \"widgets_for_fields_widget_type_id_idx\" ON \"widgets_for_fields\" (\"widget_type_id\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.widgets_for_fields', 1);",
      "  /* Triggers for table widgets_for_fields */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_widgets_for_fields_primarykey;",
      "CREATE TRIGGER update_ensure_main_widgets_for_fields_primarykey\n  BEFORE UPDATE ON \"main\".\"widgets_for_fields\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"widget_for_field_id\" != new.\"widget_for_field_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column widget_for_field_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_widgets_for_fields_into_oplog;",
      "CREATE TRIGGER insert_main_widgets_for_fields_into_oplog\n   AFTER INSERT ON \"main\".\"widgets_for_fields\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.widgets_for_fields')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'widgets_for_fields', 'INSERT', json_object('widget_for_field_id', new.\"widget_for_field_id\"), json_object('deleted', new.\"deleted\", 'field_type_id', new.\"field_type_id\", 'label', new.\"label\", 'widget_for_field_id', new.\"widget_for_field_id\", 'widget_type_id', new.\"widget_type_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_widgets_for_fields_into_oplog;",
      "CREATE TRIGGER update_main_widgets_for_fields_into_oplog\n   AFTER UPDATE ON \"main\".\"widgets_for_fields\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.widgets_for_fields')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'widgets_for_fields', 'UPDATE', json_object('widget_for_field_id', new.\"widget_for_field_id\"), json_object('deleted', new.\"deleted\", 'field_type_id', new.\"field_type_id\", 'label', new.\"label\", 'widget_for_field_id', new.\"widget_for_field_id\", 'widget_type_id', new.\"widget_type_id\"), json_object('deleted', old.\"deleted\", 'field_type_id', old.\"field_type_id\", 'label', old.\"label\", 'widget_for_field_id', old.\"widget_for_field_id\", 'widget_type_id', old.\"widget_type_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_widgets_for_fields_into_oplog;",
      "CREATE TRIGGER delete_main_widgets_for_fields_into_oplog\n   AFTER DELETE ON \"main\".\"widgets_for_fields\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.widgets_for_fields')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'widgets_for_fields', 'DELETE', json_object('widget_for_field_id', old.\"widget_for_field_id\"), NULL, json_object('deleted', old.\"deleted\", 'field_type_id', old.\"field_type_id\", 'label', old.\"label\", 'widget_for_field_id', old.\"widget_for_field_id\", 'widget_type_id', old.\"widget_type_id\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_widgets_for_fields_field_type_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_widgets_for_fields_field_type_id_into_oplog\n  AFTER INSERT ON \"main\".\"widgets_for_fields\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.field_types') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'field_types', 'COMPENSATION', json_object('field_type_id', \"field_type_id\"), json_object('field_type_id', \"field_type_id\"), NULL, NULL\n  FROM \"main\".\"field_types\" WHERE \"field_type_id\" = new.\"field_type_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_widgets_for_fields_field_type_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_widgets_for_fields_field_type_id_into_oplog\n   AFTER UPDATE ON \"main\".\"widgets_for_fields\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.field_types') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'field_types', 'COMPENSATION', json_object('field_type_id', \"field_type_id\"), json_object('field_type_id', \"field_type_id\"), NULL, NULL\n  FROM \"main\".\"field_types\" WHERE \"field_type_id\" = new.\"field_type_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_widgets_for_fields_widget_type_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_widgets_for_fields_widget_type_id_into_oplog\n  AFTER INSERT ON \"main\".\"widgets_for_fields\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.widget_types') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'widget_types', 'COMPENSATION', json_object('widget_type_id', \"widget_type_id\"), json_object('widget_type_id', \"widget_type_id\"), NULL, NULL\n  FROM \"main\".\"widget_types\" WHERE \"widget_type_id\" = new.\"widget_type_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_widgets_for_fields_widget_type_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_widgets_for_fields_widget_type_id_into_oplog\n   AFTER UPDATE ON \"main\".\"widgets_for_fields\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.widget_types') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'widget_types', 'COMPENSATION', json_object('widget_type_id', \"widget_type_id\"), json_object('widget_type_id', \"widget_type_id\"), NULL, NULL\n  FROM \"main\".\"widget_types\" WHERE \"widget_type_id\" = new.\"widget_type_id\";\nEND;"
    ],
    "version": "40"
  },
  {
    "statements": [
      "CREATE TABLE \"fields\" (\n  \"field_id\" TEXT NOT NULL,\n  \"project_id\" TEXT,\n  \"account_id\" TEXT,\n  \"table_name\" TEXT,\n  \"field_type_id\" TEXT,\n  \"widget_type_id\" TEXT,\n  \"name\" TEXT,\n  \"field_label\" TEXT,\n  \"list_id\" TEXT,\n  \"preset\" TEXT,\n  \"obsolete\" INTEGER,\n  \"label_replace_by_generated_column\" TEXT,\n  \"deleted\" INTEGER,\n  CONSTRAINT \"fields_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"fields_field_type_id_fkey\" FOREIGN KEY (\"field_type_id\") REFERENCES \"field_types\" (\"field_type_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"fields_list_id_fkey\" FOREIGN KEY (\"list_id\") REFERENCES \"lists\" (\"list_id\") ON UPDATE CASCADE,\n  CONSTRAINT \"fields_project_id_fkey\" FOREIGN KEY (\"project_id\") REFERENCES \"projects\" (\"project_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"fields_widget_type_id_fkey\" FOREIGN KEY (\"widget_type_id\") REFERENCES \"widget_types\" (\"widget_type_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"fields_pkey\" PRIMARY KEY (\"field_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"fields_account_id_idx\" ON \"fields\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"fields_field_type_id_idx\" ON \"fields\" (\"field_type_id\" ASC);\n",
      "CREATE INDEX \"fields_list_id_idx\" ON \"fields\" (\"list_id\" ASC);\n",
      "CREATE INDEX \"fields_name_idx\" ON \"fields\" (\"name\" ASC);\n",
      "CREATE INDEX \"fields_project_id_idx\" ON \"fields\" (\"project_id\" ASC);\n",
      "CREATE INDEX \"fields_table_name_idx\" ON \"fields\" (\"table_name\" ASC);\n",
      "CREATE INDEX \"fields_widget_type_id_idx\" ON \"fields\" (\"widget_type_id\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.fields', 1);",
      "  /* Triggers for table fields */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_fields_primarykey;",
      "CREATE TRIGGER update_ensure_main_fields_primarykey\n  BEFORE UPDATE ON \"main\".\"fields\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"field_id\" != new.\"field_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column field_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_fields_into_oplog;",
      "CREATE TRIGGER insert_main_fields_into_oplog\n   AFTER INSERT ON \"main\".\"fields\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.fields')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'fields', 'INSERT', json_object('field_id', new.\"field_id\"), json_object('account_id', new.\"account_id\", 'deleted', new.\"deleted\", 'field_id', new.\"field_id\", 'field_label', new.\"field_label\", 'field_type_id', new.\"field_type_id\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'list_id', new.\"list_id\", 'name', new.\"name\", 'obsolete', new.\"obsolete\", 'preset', new.\"preset\", 'project_id', new.\"project_id\", 'table_name', new.\"table_name\", 'widget_type_id', new.\"widget_type_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_fields_into_oplog;",
      "CREATE TRIGGER update_main_fields_into_oplog\n   AFTER UPDATE ON \"main\".\"fields\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.fields')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'fields', 'UPDATE', json_object('field_id', new.\"field_id\"), json_object('account_id', new.\"account_id\", 'deleted', new.\"deleted\", 'field_id', new.\"field_id\", 'field_label', new.\"field_label\", 'field_type_id', new.\"field_type_id\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'list_id', new.\"list_id\", 'name', new.\"name\", 'obsolete', new.\"obsolete\", 'preset', new.\"preset\", 'project_id', new.\"project_id\", 'table_name', new.\"table_name\", 'widget_type_id', new.\"widget_type_id\"), json_object('account_id', old.\"account_id\", 'deleted', old.\"deleted\", 'field_id', old.\"field_id\", 'field_label', old.\"field_label\", 'field_type_id', old.\"field_type_id\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'list_id', old.\"list_id\", 'name', old.\"name\", 'obsolete', old.\"obsolete\", 'preset', old.\"preset\", 'project_id', old.\"project_id\", 'table_name', old.\"table_name\", 'widget_type_id', old.\"widget_type_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_fields_into_oplog;",
      "CREATE TRIGGER delete_main_fields_into_oplog\n   AFTER DELETE ON \"main\".\"fields\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.fields')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'fields', 'DELETE', json_object('field_id', old.\"field_id\"), NULL, json_object('account_id', old.\"account_id\", 'deleted', old.\"deleted\", 'field_id', old.\"field_id\", 'field_label', old.\"field_label\", 'field_type_id', old.\"field_type_id\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'list_id', old.\"list_id\", 'name', old.\"name\", 'obsolete', old.\"obsolete\", 'preset', old.\"preset\", 'project_id', old.\"project_id\", 'table_name', old.\"table_name\", 'widget_type_id', old.\"widget_type_id\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_fields_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_fields_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"fields\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_fields_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_fields_account_id_into_oplog\n   AFTER UPDATE ON \"main\".\"fields\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_fields_field_type_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_fields_field_type_id_into_oplog\n  AFTER INSERT ON \"main\".\"fields\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.field_types') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'field_types', 'COMPENSATION', json_object('field_type_id', \"field_type_id\"), json_object('field_type_id', \"field_type_id\"), NULL, NULL\n  FROM \"main\".\"field_types\" WHERE \"field_type_id\" = new.\"field_type_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_fields_field_type_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_fields_field_type_id_into_oplog\n   AFTER UPDATE ON \"main\".\"fields\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.field_types') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'field_types', 'COMPENSATION', json_object('field_type_id', \"field_type_id\"), json_object('field_type_id', \"field_type_id\"), NULL, NULL\n  FROM \"main\".\"field_types\" WHERE \"field_type_id\" = new.\"field_type_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_fields_list_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_fields_list_id_into_oplog\n  AFTER INSERT ON \"main\".\"fields\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.lists') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'lists', 'COMPENSATION', json_object('list_id', \"list_id\"), json_object('list_id', \"list_id\"), NULL, NULL\n  FROM \"main\".\"lists\" WHERE \"list_id\" = new.\"list_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_fields_list_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_fields_list_id_into_oplog\n   AFTER UPDATE ON \"main\".\"fields\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.lists') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'lists', 'COMPENSATION', json_object('list_id', \"list_id\"), json_object('list_id', \"list_id\"), NULL, NULL\n  FROM \"main\".\"lists\" WHERE \"list_id\" = new.\"list_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_fields_project_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_fields_project_id_into_oplog\n  AFTER INSERT ON \"main\".\"fields\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.projects') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_object('project_id', \"project_id\"), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_fields_project_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_fields_project_id_into_oplog\n   AFTER UPDATE ON \"main\".\"fields\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.projects') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_object('project_id', \"project_id\"), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_fields_widget_type_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_fields_widget_type_id_into_oplog\n  AFTER INSERT ON \"main\".\"fields\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.widget_types') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'widget_types', 'COMPENSATION', json_object('widget_type_id', \"widget_type_id\"), json_object('widget_type_id', \"widget_type_id\"), NULL, NULL\n  FROM \"main\".\"widget_types\" WHERE \"widget_type_id\" = new.\"widget_type_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_fields_widget_type_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_fields_widget_type_id_into_oplog\n   AFTER UPDATE ON \"main\".\"fields\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.widget_types') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'widget_types', 'COMPENSATION', json_object('widget_type_id', \"widget_type_id\"), json_object('widget_type_id', \"widget_type_id\"), NULL, NULL\n  FROM \"main\".\"widget_types\" WHERE \"widget_type_id\" = new.\"widget_type_id\";\nEND;"
    ],
    "version": "42"
  },
  {
    "statements": [
      "CREATE TABLE \"ui_options\" (\n  \"user_id\" TEXT NOT NULL,\n  \"designing\" INTEGER,\n  \"breadcrumbs_overflowing\" INTEGER,\n  \"navs_overflowing\" INTEGER,\n  \"tabs\" TEXT_JSON,\n  \"label\" TEXT,\n  CONSTRAINT \"ui_options_pkey\" PRIMARY KEY (\"user_id\")\n) WITHOUT ROWID;\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.ui_options', 1);",
      "  /* Triggers for table ui_options */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_ui_options_primarykey;",
      "CREATE TRIGGER update_ensure_main_ui_options_primarykey\n  BEFORE UPDATE ON \"main\".\"ui_options\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"user_id\" != new.\"user_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column user_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_ui_options_into_oplog;",
      "CREATE TRIGGER insert_main_ui_options_into_oplog\n   AFTER INSERT ON \"main\".\"ui_options\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.ui_options')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'ui_options', 'INSERT', json_object('user_id', new.\"user_id\"), json_object('breadcrumbs_overflowing', new.\"breadcrumbs_overflowing\", 'designing', new.\"designing\", 'label', new.\"label\", 'navs_overflowing', new.\"navs_overflowing\", 'tabs', new.\"tabs\", 'user_id', new.\"user_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_ui_options_into_oplog;",
      "CREATE TRIGGER update_main_ui_options_into_oplog\n   AFTER UPDATE ON \"main\".\"ui_options\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.ui_options')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'ui_options', 'UPDATE', json_object('user_id', new.\"user_id\"), json_object('breadcrumbs_overflowing', new.\"breadcrumbs_overflowing\", 'designing', new.\"designing\", 'label', new.\"label\", 'navs_overflowing', new.\"navs_overflowing\", 'tabs', new.\"tabs\", 'user_id', new.\"user_id\"), json_object('breadcrumbs_overflowing', old.\"breadcrumbs_overflowing\", 'designing', old.\"designing\", 'label', old.\"label\", 'navs_overflowing', old.\"navs_overflowing\", 'tabs', old.\"tabs\", 'user_id', old.\"user_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_ui_options_into_oplog;",
      "CREATE TRIGGER delete_main_ui_options_into_oplog\n   AFTER DELETE ON \"main\".\"ui_options\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.ui_options')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'ui_options', 'DELETE', json_object('user_id', old.\"user_id\"), NULL, json_object('breadcrumbs_overflowing', old.\"breadcrumbs_overflowing\", 'designing', old.\"designing\", 'label', old.\"label\", 'navs_overflowing', old.\"navs_overflowing\", 'tabs', old.\"tabs\", 'user_id', old.\"user_id\"), NULL);\nEND;"
    ],
    "version": "43"
  },
  {
    "statements": [
      "CREATE TABLE \"subprojects\" (\n  \"subproject_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"project_id\" TEXT,\n  \"name\" TEXT,\n  \"label_replace_by_generated_column\" TEXT,\n  \"since_year\" INTEGER,\n  \"data\" TEXT_JSON,\n  \"deleted\" INTEGER,\n  CONSTRAINT \"subprojects_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"subprojects_project_id_fkey\" FOREIGN KEY (\"project_id\") REFERENCES \"projects\" (\"project_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"subprojects_pkey\" PRIMARY KEY (\"subproject_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"subprojects_account_id_idx\" ON \"subprojects\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"subprojects_name_idx\" ON \"subprojects\" (\"name\" ASC);\n",
      "CREATE INDEX \"subprojects_project_id_idx\" ON \"subprojects\" (\"project_id\" ASC);\n",
      "CREATE INDEX \"subprojects_since_year_idx\" ON \"subprojects\" (\"since_year\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.subprojects', 1);",
      "  /* Triggers for table subprojects */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_subprojects_primarykey;",
      "CREATE TRIGGER update_ensure_main_subprojects_primarykey\n  BEFORE UPDATE ON \"main\".\"subprojects\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"subproject_id\" != new.\"subproject_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column subproject_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_subprojects_into_oplog;",
      "CREATE TRIGGER insert_main_subprojects_into_oplog\n   AFTER INSERT ON \"main\".\"subprojects\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.subprojects')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'subprojects', 'INSERT', json_object('subproject_id', new.\"subproject_id\"), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'deleted', new.\"deleted\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'name', new.\"name\", 'project_id', new.\"project_id\", 'since_year', new.\"since_year\", 'subproject_id', new.\"subproject_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_subprojects_into_oplog;",
      "CREATE TRIGGER update_main_subprojects_into_oplog\n   AFTER UPDATE ON \"main\".\"subprojects\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.subprojects')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'subprojects', 'UPDATE', json_object('subproject_id', new.\"subproject_id\"), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'deleted', new.\"deleted\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'name', new.\"name\", 'project_id', new.\"project_id\", 'since_year', new.\"since_year\", 'subproject_id', new.\"subproject_id\"), json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'deleted', old.\"deleted\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'name', old.\"name\", 'project_id', old.\"project_id\", 'since_year', old.\"since_year\", 'subproject_id', old.\"subproject_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_subprojects_into_oplog;",
      "CREATE TRIGGER delete_main_subprojects_into_oplog\n   AFTER DELETE ON \"main\".\"subprojects\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.subprojects')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'subprojects', 'DELETE', json_object('subproject_id', old.\"subproject_id\"), NULL, json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'deleted', old.\"deleted\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'name', old.\"name\", 'project_id', old.\"project_id\", 'since_year', old.\"since_year\", 'subproject_id', old.\"subproject_id\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_subprojects_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_subprojects_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"subprojects\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_subprojects_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_subprojects_account_id_into_oplog\n   AFTER UPDATE ON \"main\".\"subprojects\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_subprojects_project_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_subprojects_project_id_into_oplog\n  AFTER INSERT ON \"main\".\"subprojects\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.projects') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_object('project_id', \"project_id\"), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_subprojects_project_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_subprojects_project_id_into_oplog\n   AFTER UPDATE ON \"main\".\"subprojects\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.projects') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_object('project_id', \"project_id\"), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;"
    ],
    "version": "5"
  },
  {
    "statements": [
      "CREATE TABLE \"project_users\" (\n  \"project_user_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"project_id\" TEXT,\n  \"user_id\" TEXT,\n  \"role\" TEXT,\n  \"label\" TEXT,\n  \"deleted\" INTEGER,\n  CONSTRAINT \"project_users_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"project_users_project_id_fkey\" FOREIGN KEY (\"project_id\") REFERENCES \"projects\" (\"project_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"project_users_user_id_fkey\" FOREIGN KEY (\"user_id\") REFERENCES \"users\" (\"user_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"project_users_pkey\" PRIMARY KEY (\"project_user_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"project_users_account_id_idx\" ON \"project_users\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"project_users_label_idx\" ON \"project_users\" (\"label\" ASC);\n",
      "CREATE INDEX \"project_users_project_id_idx\" ON \"project_users\" (\"project_id\" ASC);\n",
      "CREATE INDEX \"project_users_user_id_idx\" ON \"project_users\" (\"user_id\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.project_users', 1);",
      "  /* Triggers for table project_users */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_project_users_primarykey;",
      "CREATE TRIGGER update_ensure_main_project_users_primarykey\n  BEFORE UPDATE ON \"main\".\"project_users\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"project_user_id\" != new.\"project_user_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column project_user_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_project_users_into_oplog;",
      "CREATE TRIGGER insert_main_project_users_into_oplog\n   AFTER INSERT ON \"main\".\"project_users\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.project_users')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'project_users', 'INSERT', json_object('project_user_id', new.\"project_user_id\"), json_object('account_id', new.\"account_id\", 'deleted', new.\"deleted\", 'label', new.\"label\", 'project_id', new.\"project_id\", 'project_user_id', new.\"project_user_id\", 'role', new.\"role\", 'user_id', new.\"user_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_project_users_into_oplog;",
      "CREATE TRIGGER update_main_project_users_into_oplog\n   AFTER UPDATE ON \"main\".\"project_users\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.project_users')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'project_users', 'UPDATE', json_object('project_user_id', new.\"project_user_id\"), json_object('account_id', new.\"account_id\", 'deleted', new.\"deleted\", 'label', new.\"label\", 'project_id', new.\"project_id\", 'project_user_id', new.\"project_user_id\", 'role', new.\"role\", 'user_id', new.\"user_id\"), json_object('account_id', old.\"account_id\", 'deleted', old.\"deleted\", 'label', old.\"label\", 'project_id', old.\"project_id\", 'project_user_id', old.\"project_user_id\", 'role', old.\"role\", 'user_id', old.\"user_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_project_users_into_oplog;",
      "CREATE TRIGGER delete_main_project_users_into_oplog\n   AFTER DELETE ON \"main\".\"project_users\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.project_users')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'project_users', 'DELETE', json_object('project_user_id', old.\"project_user_id\"), NULL, json_object('account_id', old.\"account_id\", 'deleted', old.\"deleted\", 'label', old.\"label\", 'project_id', old.\"project_id\", 'project_user_id', old.\"project_user_id\", 'role', old.\"role\", 'user_id', old.\"user_id\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_project_users_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_project_users_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"project_users\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_project_users_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_project_users_account_id_into_oplog\n   AFTER UPDATE ON \"main\".\"project_users\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_project_users_project_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_project_users_project_id_into_oplog\n  AFTER INSERT ON \"main\".\"project_users\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.projects') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_object('project_id', \"project_id\"), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_project_users_project_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_project_users_project_id_into_oplog\n   AFTER UPDATE ON \"main\".\"project_users\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.projects') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_object('project_id', \"project_id\"), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_project_users_user_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_project_users_user_id_into_oplog\n  AFTER INSERT ON \"main\".\"project_users\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.users') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'users', 'COMPENSATION', json_object('user_id', \"user_id\"), json_object('user_id', \"user_id\"), NULL, NULL\n  FROM \"main\".\"users\" WHERE \"user_id\" = new.\"user_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_project_users_user_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_project_users_user_id_into_oplog\n   AFTER UPDATE ON \"main\".\"project_users\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.users') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'users', 'COMPENSATION', json_object('user_id', \"user_id\"), json_object('user_id', \"user_id\"), NULL, NULL\n  FROM \"main\".\"users\" WHERE \"user_id\" = new.\"user_id\";\nEND;"
    ],
    "version": "6"
  },
  {
    "statements": [
      "CREATE TABLE \"subproject_users\" (\n  \"subproject_user_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"subproject_id\" TEXT,\n  \"user_id\" TEXT,\n  \"role\" TEXT,\n  \"label\" TEXT,\n  \"deleted\" INTEGER,\n  CONSTRAINT \"subproject_users_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"subproject_users_subproject_id_fkey\" FOREIGN KEY (\"subproject_id\") REFERENCES \"subprojects\" (\"subproject_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"subproject_users_user_id_fkey\" FOREIGN KEY (\"user_id\") REFERENCES \"users\" (\"user_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"subproject_users_pkey\" PRIMARY KEY (\"subproject_user_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"subproject_users_account_id_idx\" ON \"subproject_users\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"subproject_users_label_idx\" ON \"subproject_users\" (\"label\" ASC);\n",
      "CREATE INDEX \"subproject_users_subproject_id_idx\" ON \"subproject_users\" (\"subproject_id\" ASC);\n",
      "CREATE INDEX \"subproject_users_user_id_idx\" ON \"subproject_users\" (\"user_id\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.subproject_users', 1);",
      "  /* Triggers for table subproject_users */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_subproject_users_primarykey;",
      "CREATE TRIGGER update_ensure_main_subproject_users_primarykey\n  BEFORE UPDATE ON \"main\".\"subproject_users\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"subproject_user_id\" != new.\"subproject_user_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column subproject_user_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_subproject_users_into_oplog;",
      "CREATE TRIGGER insert_main_subproject_users_into_oplog\n   AFTER INSERT ON \"main\".\"subproject_users\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.subproject_users')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'subproject_users', 'INSERT', json_object('subproject_user_id', new.\"subproject_user_id\"), json_object('account_id', new.\"account_id\", 'deleted', new.\"deleted\", 'label', new.\"label\", 'role', new.\"role\", 'subproject_id', new.\"subproject_id\", 'subproject_user_id', new.\"subproject_user_id\", 'user_id', new.\"user_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_subproject_users_into_oplog;",
      "CREATE TRIGGER update_main_subproject_users_into_oplog\n   AFTER UPDATE ON \"main\".\"subproject_users\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.subproject_users')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'subproject_users', 'UPDATE', json_object('subproject_user_id', new.\"subproject_user_id\"), json_object('account_id', new.\"account_id\", 'deleted', new.\"deleted\", 'label', new.\"label\", 'role', new.\"role\", 'subproject_id', new.\"subproject_id\", 'subproject_user_id', new.\"subproject_user_id\", 'user_id', new.\"user_id\"), json_object('account_id', old.\"account_id\", 'deleted', old.\"deleted\", 'label', old.\"label\", 'role', old.\"role\", 'subproject_id', old.\"subproject_id\", 'subproject_user_id', old.\"subproject_user_id\", 'user_id', old.\"user_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_subproject_users_into_oplog;",
      "CREATE TRIGGER delete_main_subproject_users_into_oplog\n   AFTER DELETE ON \"main\".\"subproject_users\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.subproject_users')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'subproject_users', 'DELETE', json_object('subproject_user_id', old.\"subproject_user_id\"), NULL, json_object('account_id', old.\"account_id\", 'deleted', old.\"deleted\", 'label', old.\"label\", 'role', old.\"role\", 'subproject_id', old.\"subproject_id\", 'subproject_user_id', old.\"subproject_user_id\", 'user_id', old.\"user_id\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_subproject_users_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_subproject_users_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"subproject_users\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_subproject_users_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_subproject_users_account_id_into_oplog\n   AFTER UPDATE ON \"main\".\"subproject_users\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_subproject_users_subproject_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_subproject_users_subproject_id_into_oplog\n  AFTER INSERT ON \"main\".\"subproject_users\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.subprojects') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'subprojects', 'COMPENSATION', json_object('subproject_id', \"subproject_id\"), json_object('subproject_id', \"subproject_id\"), NULL, NULL\n  FROM \"main\".\"subprojects\" WHERE \"subproject_id\" = new.\"subproject_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_subproject_users_subproject_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_subproject_users_subproject_id_into_oplog\n   AFTER UPDATE ON \"main\".\"subproject_users\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.subprojects') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'subprojects', 'COMPENSATION', json_object('subproject_id', \"subproject_id\"), json_object('subproject_id', \"subproject_id\"), NULL, NULL\n  FROM \"main\".\"subprojects\" WHERE \"subproject_id\" = new.\"subproject_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_subproject_users_user_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_subproject_users_user_id_into_oplog\n  AFTER INSERT ON \"main\".\"subproject_users\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.users') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'users', 'COMPENSATION', json_object('user_id', \"user_id\"), json_object('user_id', \"user_id\"), NULL, NULL\n  FROM \"main\".\"users\" WHERE \"user_id\" = new.\"user_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_subproject_users_user_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_subproject_users_user_id_into_oplog\n   AFTER UPDATE ON \"main\".\"subproject_users\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.users') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'users', 'COMPENSATION', json_object('user_id', \"user_id\"), json_object('user_id', \"user_id\"), NULL, NULL\n  FROM \"main\".\"users\" WHERE \"user_id\" = new.\"user_id\";\nEND;"
    ],
    "version": "7"
  },
  {
    "statements": [
      "CREATE TABLE \"taxonomies\" (\n  \"taxonomy_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"project_id\" TEXT,\n  \"type\" TEXT,\n  \"name\" TEXT,\n  \"url\" TEXT,\n  \"obsolete\" INTEGER,\n  \"data\" TEXT_JSON,\n  \"label_replace_by_generated_column\" TEXT,\n  \"deleted\" INTEGER,\n  CONSTRAINT \"taxonomies_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"taxonomies_project_id_fkey\" FOREIGN KEY (\"project_id\") REFERENCES \"projects\" (\"project_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"taxonomies_pkey\" PRIMARY KEY (\"taxonomy_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"taxonomies_account_id_idx\" ON \"taxonomies\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"taxonomies_name_idx\" ON \"taxonomies\" (\"name\" ASC);\n",
      "CREATE INDEX \"taxonomies_project_id_idx\" ON \"taxonomies\" (\"project_id\" ASC);\n",
      "CREATE INDEX \"taxonomies_type_idx\" ON \"taxonomies\" (\"type\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.taxonomies', 1);",
      "  /* Triggers for table taxonomies */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_taxonomies_primarykey;",
      "CREATE TRIGGER update_ensure_main_taxonomies_primarykey\n  BEFORE UPDATE ON \"main\".\"taxonomies\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"taxonomy_id\" != new.\"taxonomy_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column taxonomy_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_taxonomies_into_oplog;",
      "CREATE TRIGGER insert_main_taxonomies_into_oplog\n   AFTER INSERT ON \"main\".\"taxonomies\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.taxonomies')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'taxonomies', 'INSERT', json_object('taxonomy_id', new.\"taxonomy_id\"), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'deleted', new.\"deleted\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'name', new.\"name\", 'obsolete', new.\"obsolete\", 'project_id', new.\"project_id\", 'taxonomy_id', new.\"taxonomy_id\", 'type', new.\"type\", 'url', new.\"url\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_taxonomies_into_oplog;",
      "CREATE TRIGGER update_main_taxonomies_into_oplog\n   AFTER UPDATE ON \"main\".\"taxonomies\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.taxonomies')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'taxonomies', 'UPDATE', json_object('taxonomy_id', new.\"taxonomy_id\"), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'deleted', new.\"deleted\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'name', new.\"name\", 'obsolete', new.\"obsolete\", 'project_id', new.\"project_id\", 'taxonomy_id', new.\"taxonomy_id\", 'type', new.\"type\", 'url', new.\"url\"), json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'deleted', old.\"deleted\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'name', old.\"name\", 'obsolete', old.\"obsolete\", 'project_id', old.\"project_id\", 'taxonomy_id', old.\"taxonomy_id\", 'type', old.\"type\", 'url', old.\"url\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_taxonomies_into_oplog;",
      "CREATE TRIGGER delete_main_taxonomies_into_oplog\n   AFTER DELETE ON \"main\".\"taxonomies\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.taxonomies')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'taxonomies', 'DELETE', json_object('taxonomy_id', old.\"taxonomy_id\"), NULL, json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'deleted', old.\"deleted\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'name', old.\"name\", 'obsolete', old.\"obsolete\", 'project_id', old.\"project_id\", 'taxonomy_id', old.\"taxonomy_id\", 'type', old.\"type\", 'url', old.\"url\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_taxonomies_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_taxonomies_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"taxonomies\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_taxonomies_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_taxonomies_account_id_into_oplog\n   AFTER UPDATE ON \"main\".\"taxonomies\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_taxonomies_project_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_taxonomies_project_id_into_oplog\n  AFTER INSERT ON \"main\".\"taxonomies\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.projects') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_object('project_id', \"project_id\"), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_taxonomies_project_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_taxonomies_project_id_into_oplog\n   AFTER UPDATE ON \"main\".\"taxonomies\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.projects') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_object('project_id', \"project_id\"), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;"
    ],
    "version": "8"
  },
  {
    "statements": [
      "CREATE TABLE \"taxa\" (\n  \"taxon_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"taxonomy_id\" TEXT,\n  \"name\" TEXT,\n  \"id_in_source\" TEXT,\n  \"url\" TEXT,\n  \"label\" TEXT,\n  \"deleted\" INTEGER,\n  CONSTRAINT \"taxa_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"taxa_taxonomy_id_fkey\" FOREIGN KEY (\"taxonomy_id\") REFERENCES \"taxonomies\" (\"taxonomy_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"taxa_pkey\" PRIMARY KEY (\"taxon_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"taxa_account_id_idx\" ON \"taxa\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"taxa_label_idx\" ON \"taxa\" (\"label\" ASC);\n",
      "CREATE INDEX \"taxa_name_idx\" ON \"taxa\" (\"name\" ASC);\n",
      "CREATE INDEX \"taxa_taxonomy_id_idx\" ON \"taxa\" (\"taxonomy_id\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.taxa', 1);",
      "  /* Triggers for table taxa */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_taxa_primarykey;",
      "CREATE TRIGGER update_ensure_main_taxa_primarykey\n  BEFORE UPDATE ON \"main\".\"taxa\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"taxon_id\" != new.\"taxon_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column taxon_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_taxa_into_oplog;",
      "CREATE TRIGGER insert_main_taxa_into_oplog\n   AFTER INSERT ON \"main\".\"taxa\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.taxa')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'taxa', 'INSERT', json_object('taxon_id', new.\"taxon_id\"), json_object('account_id', new.\"account_id\", 'deleted', new.\"deleted\", 'id_in_source', new.\"id_in_source\", 'label', new.\"label\", 'name', new.\"name\", 'taxon_id', new.\"taxon_id\", 'taxonomy_id', new.\"taxonomy_id\", 'url', new.\"url\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_taxa_into_oplog;",
      "CREATE TRIGGER update_main_taxa_into_oplog\n   AFTER UPDATE ON \"main\".\"taxa\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.taxa')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'taxa', 'UPDATE', json_object('taxon_id', new.\"taxon_id\"), json_object('account_id', new.\"account_id\", 'deleted', new.\"deleted\", 'id_in_source', new.\"id_in_source\", 'label', new.\"label\", 'name', new.\"name\", 'taxon_id', new.\"taxon_id\", 'taxonomy_id', new.\"taxonomy_id\", 'url', new.\"url\"), json_object('account_id', old.\"account_id\", 'deleted', old.\"deleted\", 'id_in_source', old.\"id_in_source\", 'label', old.\"label\", 'name', old.\"name\", 'taxon_id', old.\"taxon_id\", 'taxonomy_id', old.\"taxonomy_id\", 'url', old.\"url\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_taxa_into_oplog;",
      "CREATE TRIGGER delete_main_taxa_into_oplog\n   AFTER DELETE ON \"main\".\"taxa\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.taxa')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'taxa', 'DELETE', json_object('taxon_id', old.\"taxon_id\"), NULL, json_object('account_id', old.\"account_id\", 'deleted', old.\"deleted\", 'id_in_source', old.\"id_in_source\", 'label', old.\"label\", 'name', old.\"name\", 'taxon_id', old.\"taxon_id\", 'taxonomy_id', old.\"taxonomy_id\", 'url', old.\"url\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_taxa_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_taxa_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"taxa\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_taxa_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_taxa_account_id_into_oplog\n   AFTER UPDATE ON \"main\".\"taxa\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_taxa_taxonomy_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_taxa_taxonomy_id_into_oplog\n  AFTER INSERT ON \"main\".\"taxa\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.taxonomies') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'taxonomies', 'COMPENSATION', json_object('taxonomy_id', \"taxonomy_id\"), json_object('taxonomy_id', \"taxonomy_id\"), NULL, NULL\n  FROM \"main\".\"taxonomies\" WHERE \"taxonomy_id\" = new.\"taxonomy_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_taxa_taxonomy_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_taxa_taxonomy_id_into_oplog\n   AFTER UPDATE ON \"main\".\"taxa\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.taxonomies') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'taxonomies', 'COMPENSATION', json_object('taxonomy_id', \"taxonomy_id\"), json_object('taxonomy_id', \"taxonomy_id\"), NULL, NULL\n  FROM \"main\".\"taxonomies\" WHERE \"taxonomy_id\" = new.\"taxonomy_id\";\nEND;"
    ],
    "version": "9"
  }
]