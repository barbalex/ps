export default [
  {
    "statements": [
      "CREATE TABLE \"users\" (\n  \"user_id\" TEXT NOT NULL,\n  \"email\" TEXT,\n  \"label_replace_by_generated_column\" TEXT,\n  CONSTRAINT \"users_pkey\" PRIMARY KEY (\"user_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"users_email_idx\" ON \"users\" (\"email\" ASC);\n",
      "CREATE TABLE \"accounts\" (\n  \"account_id\" TEXT NOT NULL,\n  \"user_id\" TEXT,\n  \"type\" TEXT,\n  \"period_start\" TEXT,\n  \"period_end\" TEXT,\n  \"projects_label_by\" TEXT,\n  \"label\" TEXT,\n  CONSTRAINT \"accounts_user_id_fkey\" FOREIGN KEY (\"user_id\") REFERENCES \"users\" (\"user_id\"),\n  CONSTRAINT \"accounts_pkey\" PRIMARY KEY (\"account_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"accounts_label_idx\" ON \"accounts\" (\"label\" ASC);\n",
      "CREATE INDEX \"accounts_period_end_idx\" ON \"accounts\" (\"period_end\" ASC);\n",
      "CREATE INDEX \"accounts_period_start_idx\" ON \"accounts\" (\"period_start\" ASC);\n",
      "CREATE INDEX \"accounts_user_id_idx\" ON \"accounts\" (\"user_id\" ASC);\n",
      "CREATE TABLE \"projects\" (\n  \"project_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"name\" TEXT,\n  \"label\" TEXT,\n  \"type\" TEXT,\n  \"subproject_name_singular\" TEXT,\n  \"subproject_name_plural\" TEXT,\n  \"subproject_order_by\" TEXT,\n  \"places_label_by\" TEXT,\n  \"places_order_by\" TEXT_JSON,\n  \"persons_label_by\" TEXT_JSON,\n  \"persons_order_by\" TEXT_JSON,\n  \"goals_label_by\" TEXT_JSON,\n  \"goal_reports_label_by\" TEXT,\n  \"goal_reports_order_by\" TEXT,\n  \"values_on_multiple_levels\" TEXT,\n  \"multiple_action_values_on_same_level\" TEXT,\n  \"multiple_check_values_on_same_level\" TEXT,\n  \"data\" TEXT_JSON,\n  \"files_offline\" INTEGER,\n  \"files_active_projects\" INTEGER,\n  \"files_active_subprojects\" INTEGER,\n  \"files_active_places\" INTEGER,\n  \"files_active_actions\" INTEGER,\n  \"files_active_checks\" INTEGER,\n  \"map_presentation_crs\" TEXT,\n  CONSTRAINT \"projects_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"projects_pkey\" PRIMARY KEY (\"project_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"projects_account_id_idx\" ON \"projects\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"projects_label_idx\" ON \"projects\" (\"label\" ASC);\n",
      "CREATE INDEX \"projects_name_idx\" ON \"projects\" (\"name\" ASC);\n",
      "CREATE TABLE \"place_levels\" (\n  \"place_level_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"project_id\" TEXT,\n  \"level\" INTEGER,\n  \"name_singular\" TEXT,\n  \"name_plural\" TEXT,\n  \"name_short\" TEXT,\n  \"reports\" INTEGER,\n  \"report_values\" INTEGER,\n  \"actions\" INTEGER,\n  \"action_values\" INTEGER,\n  \"action_reports\" INTEGER,\n  \"checks\" INTEGER,\n  \"check_values\" INTEGER,\n  \"check_taxa\" INTEGER,\n  \"occurrences\" INTEGER,\n  \"label_replace_by_generated_column\" TEXT,\n  CONSTRAINT \"place_levels_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"place_levels_project_id_fkey\" FOREIGN KEY (\"project_id\") REFERENCES \"projects\" (\"project_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"place_levels_pkey\" PRIMARY KEY (\"place_level_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"place_levels_account_id_idx\" ON \"place_levels\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"place_levels_level_idx\" ON \"place_levels\" (\"level\" ASC);\n",
      "CREATE INDEX \"place_levels_name_singular_idx\" ON \"place_levels\" (\"name_singular\" ASC);\n",
      "CREATE INDEX \"place_levels_project_id_idx\" ON \"place_levels\" (\"project_id\" ASC);\n",
      "CREATE TABLE \"subprojects\" (\n  \"subproject_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"project_id\" TEXT,\n  \"name\" TEXT,\n  \"start_year\" INTEGER,\n  \"end_year\" INTEGER,\n  \"data\" TEXT_JSON,\n  \"label_replace_by_generated_column\" TEXT,\n  CONSTRAINT \"subprojects_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"subprojects_project_id_fkey\" FOREIGN KEY (\"project_id\") REFERENCES \"projects\" (\"project_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"subprojects_pkey\" PRIMARY KEY (\"subproject_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"subprojects_account_id_idx\" ON \"subprojects\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"subprojects_name_idx\" ON \"subprojects\" (\"name\" ASC);\n",
      "CREATE INDEX \"subprojects_project_id_idx\" ON \"subprojects\" (\"project_id\" ASC);\n",
      "CREATE INDEX \"subprojects_start_year_idx\" ON \"subprojects\" (\"start_year\" ASC);\n",
      "CREATE TABLE \"project_users\" (\n  \"project_user_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"project_id\" TEXT,\n  \"user_id\" TEXT,\n  \"role\" TEXT,\n  \"label\" TEXT,\n  CONSTRAINT \"project_users_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"project_users_project_id_fkey\" FOREIGN KEY (\"project_id\") REFERENCES \"projects\" (\"project_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"project_users_user_id_fkey\" FOREIGN KEY (\"user_id\") REFERENCES \"users\" (\"user_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"project_users_pkey\" PRIMARY KEY (\"project_user_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"project_users_account_id_idx\" ON \"project_users\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"project_users_label_idx\" ON \"project_users\" (\"label\" ASC);\n",
      "CREATE INDEX \"project_users_project_id_idx\" ON \"project_users\" (\"project_id\" ASC);\n",
      "CREATE INDEX \"project_users_user_id_idx\" ON \"project_users\" (\"user_id\" ASC);\n",
      "CREATE TABLE \"subproject_users\" (\n  \"subproject_user_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"subproject_id\" TEXT,\n  \"user_id\" TEXT,\n  \"role\" TEXT,\n  \"label\" TEXT,\n  CONSTRAINT \"subproject_users_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"subproject_users_subproject_id_fkey\" FOREIGN KEY (\"subproject_id\") REFERENCES \"subprojects\" (\"subproject_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"subproject_users_user_id_fkey\" FOREIGN KEY (\"user_id\") REFERENCES \"users\" (\"user_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"subproject_users_pkey\" PRIMARY KEY (\"subproject_user_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"subproject_users_account_id_idx\" ON \"subproject_users\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"subproject_users_label_idx\" ON \"subproject_users\" (\"label\" ASC);\n",
      "CREATE INDEX \"subproject_users_subproject_id_idx\" ON \"subproject_users\" (\"subproject_id\" ASC);\n",
      "CREATE INDEX \"subproject_users_user_id_idx\" ON \"subproject_users\" (\"user_id\" ASC);\n",
      "CREATE TABLE \"taxonomies\" (\n  \"taxonomy_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"project_id\" TEXT,\n  \"type\" TEXT,\n  \"name\" TEXT,\n  \"url\" TEXT,\n  \"obsolete\" INTEGER,\n  \"data\" TEXT_JSON,\n  \"label_replace_by_generated_column\" TEXT,\n  CONSTRAINT \"taxonomies_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"taxonomies_project_id_fkey\" FOREIGN KEY (\"project_id\") REFERENCES \"projects\" (\"project_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"taxonomies_pkey\" PRIMARY KEY (\"taxonomy_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"taxonomies_account_id_idx\" ON \"taxonomies\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"taxonomies_name_idx\" ON \"taxonomies\" (\"name\" ASC);\n",
      "CREATE INDEX \"taxonomies_project_id_idx\" ON \"taxonomies\" (\"project_id\" ASC);\n",
      "CREATE INDEX \"taxonomies_type_idx\" ON \"taxonomies\" (\"type\" ASC);\n",
      "CREATE TABLE \"taxa\" (\n  \"taxon_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"taxonomy_id\" TEXT,\n  \"name\" TEXT,\n  \"id_in_source\" TEXT,\n  \"data\" TEXT_JSON,\n  \"url\" TEXT,\n  \"label\" TEXT,\n  CONSTRAINT \"taxa_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"taxa_taxonomy_id_fkey\" FOREIGN KEY (\"taxonomy_id\") REFERENCES \"taxonomies\" (\"taxonomy_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"taxa_pkey\" PRIMARY KEY (\"taxon_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"taxa_account_id_idx\" ON \"taxa\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"taxa_label_idx\" ON \"taxa\" (\"label\" ASC);\n",
      "CREATE INDEX \"taxa_name_idx\" ON \"taxa\" (\"name\" ASC);\n",
      "CREATE INDEX \"taxa_taxonomy_id_idx\" ON \"taxa\" (\"taxonomy_id\" ASC);\n",
      "CREATE TABLE \"subproject_taxa\" (\n  \"subproject_taxon_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"subproject_id\" TEXT,\n  \"taxon_id\" TEXT,\n  \"label\" TEXT,\n  CONSTRAINT \"subproject_taxa_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"subproject_taxa_subproject_id_fkey\" FOREIGN KEY (\"subproject_id\") REFERENCES \"subprojects\" (\"subproject_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"subproject_taxa_taxon_id_fkey\" FOREIGN KEY (\"taxon_id\") REFERENCES \"taxa\" (\"taxon_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"subproject_taxa_pkey\" PRIMARY KEY (\"subproject_taxon_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"subproject_taxa_account_id_idx\" ON \"subproject_taxa\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"subproject_taxa_label_idx\" ON \"subproject_taxa\" (\"label\" ASC);\n",
      "CREATE INDEX \"subproject_taxa_subproject_id_idx\" ON \"subproject_taxa\" (\"subproject_id\" ASC);\n",
      "CREATE INDEX \"subproject_taxa_taxon_id_idx\" ON \"subproject_taxa\" (\"taxon_id\" ASC);\n",
      "CREATE TABLE \"lists\" (\n  \"list_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"project_id\" TEXT,\n  \"name\" TEXT,\n  \"data\" TEXT_JSON,\n  \"obsolete\" INTEGER,\n  \"label_replace_by_generated_column\" TEXT,\n  CONSTRAINT \"lists_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"lists_project_id_fkey\" FOREIGN KEY (\"project_id\") REFERENCES \"projects\" (\"project_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"lists_pkey\" PRIMARY KEY (\"list_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"lists_account_id_idx\" ON \"lists\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"lists_name_idx\" ON \"lists\" (\"name\" ASC);\n",
      "CREATE INDEX \"lists_project_id_idx\" ON \"lists\" (\"project_id\" ASC);\n",
      "CREATE TABLE \"list_values\" (\n  \"list_value_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"list_id\" TEXT,\n  \"value\" TEXT,\n  \"obsolete\" INTEGER,\n  \"label_replace_by_generated_column\" TEXT,\n  CONSTRAINT \"list_values_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"list_values_list_id_fkey\" FOREIGN KEY (\"list_id\") REFERENCES \"lists\" (\"list_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"list_values_pkey\" PRIMARY KEY (\"list_value_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"list_values_account_id_idx\" ON \"list_values\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"list_values_list_id_idx\" ON \"list_values\" (\"list_id\" ASC);\n",
      "CREATE INDEX \"list_values_value_idx\" ON \"list_values\" (\"value\" ASC);\n",
      "CREATE TABLE \"units\" (\n  \"unit_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"project_id\" TEXT,\n  \"use_for_action_values\" INTEGER,\n  \"use_for_action_report_values\" INTEGER,\n  \"use_for_check_values\" INTEGER,\n  \"use_for_place_report_values\" INTEGER,\n  \"use_for_goal_report_values\" INTEGER,\n  \"use_for_subproject_taxa\" INTEGER,\n  \"use_for_check_taxa\" INTEGER,\n  \"name\" TEXT,\n  \"summable\" INTEGER,\n  \"sort\" INTEGER,\n  \"type\" TEXT,\n  \"list_id\" TEXT,\n  \"label_replace_by_generated_column\" TEXT,\n  CONSTRAINT \"units_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"units_list_id_fkey\" FOREIGN KEY (\"list_id\") REFERENCES \"lists\" (\"list_id\") ON UPDATE CASCADE,\n  CONSTRAINT \"units_project_id_fkey\" FOREIGN KEY (\"project_id\") REFERENCES \"projects\" (\"project_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"units_pkey\" PRIMARY KEY (\"unit_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"units_account_id_idx\" ON \"units\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"units_list_id_idx\" ON \"units\" (\"list_id\" ASC);\n",
      "CREATE INDEX \"units_name_idx\" ON \"units\" (\"name\" ASC);\n",
      "CREATE INDEX \"units_project_id_idx\" ON \"units\" (\"project_id\" ASC);\n",
      "CREATE INDEX \"units_sort_idx\" ON \"units\" (\"sort\" ASC);\n",
      "CREATE TABLE \"places\" (\n  \"place_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"subproject_id\" TEXT,\n  \"parent_id\" TEXT,\n  \"level\" INTEGER,\n  \"since\" INTEGER,\n  \"until\" INTEGER,\n  \"data\" TEXT_JSON,\n  \"geometry\" TEXT_JSON,\n  \"bbox\" TEXT_JSON,\n  \"label\" TEXT,\n  \"files_active_places\" INTEGER,\n  CONSTRAINT \"places_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"places_parent_id_fkey\" FOREIGN KEY (\"parent_id\") REFERENCES \"places\" (\"place_id\") ON UPDATE CASCADE,\n  CONSTRAINT \"places_subproject_id_fkey\" FOREIGN KEY (\"subproject_id\") REFERENCES \"subprojects\" (\"subproject_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"places_pkey\" PRIMARY KEY (\"place_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"places_account_id_idx\" ON \"places\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"places_label_idx\" ON \"places\" (\"label\" ASC);\n",
      "CREATE INDEX \"places_level_idx\" ON \"places\" (\"level\" ASC);\n",
      "CREATE INDEX \"places_parent_id_idx\" ON \"places\" (\"parent_id\" ASC);\n",
      "CREATE INDEX \"places_subproject_id_idx\" ON \"places\" (\"subproject_id\" ASC);\n",
      "CREATE TABLE \"actions\" (\n  \"action_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"place_id\" TEXT,\n  \"date\" TEXT,\n  \"data\" TEXT_JSON,\n  \"geometry\" TEXT_JSON,\n  \"bbox\" TEXT_JSON,\n  \"relevant_for_reports\" INTEGER,\n  \"label_replace_by_generated_column\" TEXT,\n  CONSTRAINT \"actions_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"actions_place_id_fkey\" FOREIGN KEY (\"place_id\") REFERENCES \"places\" (\"place_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"actions_pkey\" PRIMARY KEY (\"action_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"actions_account_id_idx\" ON \"actions\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"actions_date_idx\" ON \"actions\" (\"date\" ASC);\n",
      "CREATE INDEX \"actions_place_id_idx\" ON \"actions\" (\"place_id\" ASC);\n",
      "CREATE TABLE \"action_values\" (\n  \"action_value_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"action_id\" TEXT,\n  \"unit_id\" TEXT,\n  \"value_integer\" INTEGER,\n  \"value_numeric\" REAL,\n  \"value_text\" TEXT,\n  \"label\" TEXT,\n  CONSTRAINT \"action_values_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"action_values_action_id_fkey\" FOREIGN KEY (\"action_id\") REFERENCES \"actions\" (\"action_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"action_values_unit_id_fkey\" FOREIGN KEY (\"unit_id\") REFERENCES \"units\" (\"unit_id\") ON UPDATE CASCADE,\n  CONSTRAINT \"action_values_pkey\" PRIMARY KEY (\"action_value_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"action_values_account_id_idx\" ON \"action_values\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"action_values_action_id_idx\" ON \"action_values\" (\"action_id\" ASC);\n",
      "CREATE INDEX \"action_values_label_idx\" ON \"action_values\" (\"label\" ASC);\n",
      "CREATE INDEX \"action_values_unit_id_idx\" ON \"action_values\" (\"unit_id\" ASC);\n",
      "CREATE INDEX \"action_values_value_integer_idx\" ON \"action_values\" (\"value_integer\" ASC);\n",
      "CREATE INDEX \"action_values_value_numeric_idx\" ON \"action_values\" (\"value_numeric\" ASC);\n",
      "CREATE INDEX \"action_values_value_text_idx\" ON \"action_values\" (\"value_text\" ASC);\n",
      "CREATE TABLE \"action_reports\" (\n  \"action_report_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"action_id\" TEXT,\n  \"year\" INTEGER,\n  \"data\" TEXT_JSON,\n  \"label_replace_by_generated_column\" TEXT,\n  CONSTRAINT \"action_reports_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"action_reports_action_id_fkey\" FOREIGN KEY (\"action_id\") REFERENCES \"actions\" (\"action_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"action_reports_pkey\" PRIMARY KEY (\"action_report_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"action_reports_account_id_idx\" ON \"action_reports\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"action_reports_action_id_idx\" ON \"action_reports\" (\"action_id\" ASC);\n",
      "CREATE INDEX \"action_reports_year_idx\" ON \"action_reports\" (\"year\" ASC);\n",
      "CREATE TABLE \"action_report_values\" (\n  \"action_report_value_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"action_report_id\" TEXT,\n  \"unit_id\" TEXT,\n  \"value_integer\" INTEGER,\n  \"value_numeric\" REAL,\n  \"value_text\" TEXT,\n  \"label\" TEXT,\n  CONSTRAINT \"action_report_values_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"action_report_values_action_report_id_fkey\" FOREIGN KEY (\"action_report_id\") REFERENCES \"action_reports\" (\"action_report_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"action_report_values_unit_id_fkey\" FOREIGN KEY (\"unit_id\") REFERENCES \"units\" (\"unit_id\") ON UPDATE CASCADE,\n  CONSTRAINT \"action_report_values_pkey\" PRIMARY KEY (\"action_report_value_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"action_report_values_account_id_idx\" ON \"action_report_values\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"action_report_values_action_report_id_idx\" ON \"action_report_values\" (\"action_report_id\" ASC);\n",
      "CREATE INDEX \"action_report_values_label_idx\" ON \"action_report_values\" (\"label\" ASC);\n",
      "CREATE INDEX \"action_report_values_unit_id_idx\" ON \"action_report_values\" (\"unit_id\" ASC);\n",
      "CREATE INDEX \"action_report_values_value_integer_idx\" ON \"action_report_values\" (\"value_integer\" ASC);\n",
      "CREATE INDEX \"action_report_values_value_numeric_idx\" ON \"action_report_values\" (\"value_numeric\" ASC);\n",
      "CREATE INDEX \"action_report_values_value_text_idx\" ON \"action_report_values\" (\"value_text\" ASC);\n",
      "CREATE TABLE \"checks\" (\n  \"check_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"place_id\" TEXT,\n  \"date\" TEXT,\n  \"data\" TEXT_JSON,\n  \"geometry\" TEXT_JSON,\n  \"bbox\" TEXT_JSON,\n  \"relevant_for_reports\" INTEGER,\n  \"label_replace_by_generated_column\" TEXT,\n  CONSTRAINT \"checks_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"checks_place_id_fkey\" FOREIGN KEY (\"place_id\") REFERENCES \"places\" (\"place_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"checks_pkey\" PRIMARY KEY (\"check_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"checks_account_id_idx\" ON \"checks\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"checks_date_idx\" ON \"checks\" (\"date\" ASC);\n",
      "CREATE INDEX \"checks_place_id_idx\" ON \"checks\" (\"place_id\" ASC);\n",
      "CREATE TABLE \"check_values\" (\n  \"check_value_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"check_id\" TEXT,\n  \"unit_id\" TEXT,\n  \"value_integer\" INTEGER,\n  \"value_numeric\" REAL,\n  \"value_text\" TEXT,\n  \"label\" TEXT,\n  CONSTRAINT \"check_values_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"check_values_check_id_fkey\" FOREIGN KEY (\"check_id\") REFERENCES \"checks\" (\"check_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"check_values_unit_id_fkey\" FOREIGN KEY (\"unit_id\") REFERENCES \"units\" (\"unit_id\") ON UPDATE CASCADE,\n  CONSTRAINT \"check_values_pkey\" PRIMARY KEY (\"check_value_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"check_values_account_id_idx\" ON \"check_values\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"check_values_check_id_idx\" ON \"check_values\" (\"check_id\" ASC);\n",
      "CREATE INDEX \"check_values_label_idx\" ON \"check_values\" (\"label\" ASC);\n",
      "CREATE INDEX \"check_values_unit_id_idx\" ON \"check_values\" (\"unit_id\" ASC);\n",
      "CREATE INDEX \"check_values_value_integer_idx\" ON \"check_values\" (\"value_integer\" ASC);\n",
      "CREATE INDEX \"check_values_value_numeric_idx\" ON \"check_values\" (\"value_numeric\" ASC);\n",
      "CREATE INDEX \"check_values_value_text_idx\" ON \"check_values\" (\"value_text\" ASC);\n",
      "CREATE TABLE \"check_taxa\" (\n  \"check_taxon_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"check_id\" TEXT,\n  \"taxon_id\" TEXT,\n  \"unit_id\" TEXT,\n  \"value_integer\" INTEGER,\n  \"value_numeric\" REAL,\n  \"value_text\" TEXT,\n  \"label\" TEXT,\n  CONSTRAINT \"check_taxa_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"check_taxa_check_id_fkey\" FOREIGN KEY (\"check_id\") REFERENCES \"checks\" (\"check_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"check_taxa_taxon_id_fkey\" FOREIGN KEY (\"taxon_id\") REFERENCES \"taxa\" (\"taxon_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"check_taxa_unit_id_fkey\" FOREIGN KEY (\"unit_id\") REFERENCES \"units\" (\"unit_id\") ON UPDATE CASCADE,\n  CONSTRAINT \"check_taxa_pkey\" PRIMARY KEY (\"check_taxon_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"check_taxa_account_id_idx\" ON \"check_taxa\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"check_taxa_check_id_idx\" ON \"check_taxa\" (\"check_id\" ASC);\n",
      "CREATE INDEX \"check_taxa_label_idx\" ON \"check_taxa\" (\"label\" ASC);\n",
      "CREATE INDEX \"check_taxa_taxon_id_idx\" ON \"check_taxa\" (\"taxon_id\" ASC);\n",
      "CREATE INDEX \"check_taxa_unit_id_idx\" ON \"check_taxa\" (\"unit_id\" ASC);\n",
      "CREATE INDEX \"check_taxa_value_integer_idx\" ON \"check_taxa\" (\"value_integer\" ASC);\n",
      "CREATE INDEX \"check_taxa_value_numeric_idx\" ON \"check_taxa\" (\"value_numeric\" ASC);\n",
      "CREATE INDEX \"check_taxa_value_text_idx\" ON \"check_taxa\" (\"value_text\" ASC);\n",
      "CREATE TABLE \"place_reports\" (\n  \"place_report_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"place_id\" TEXT,\n  \"year\" INTEGER,\n  \"data\" TEXT_JSON,\n  \"label_replace_by_generated_column\" TEXT,\n  CONSTRAINT \"place_reports_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"place_reports_place_id_fkey\" FOREIGN KEY (\"place_id\") REFERENCES \"places\" (\"place_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"place_reports_pkey\" PRIMARY KEY (\"place_report_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"place_reports_account_id_idx\" ON \"place_reports\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"place_reports_place_id_idx\" ON \"place_reports\" (\"place_id\" ASC);\n",
      "CREATE INDEX \"place_reports_year_idx\" ON \"place_reports\" (\"year\" ASC);\n",
      "CREATE TABLE \"place_report_values\" (\n  \"place_report_value_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"place_report_id\" TEXT,\n  \"unit_id\" TEXT,\n  \"value_integer\" INTEGER,\n  \"value_numeric\" REAL,\n  \"value_text\" TEXT,\n  \"label\" TEXT,\n  CONSTRAINT \"place_report_values_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"place_report_values_place_report_id_fkey\" FOREIGN KEY (\"place_report_id\") REFERENCES \"place_reports\" (\"place_report_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"place_report_values_unit_id_fkey\" FOREIGN KEY (\"unit_id\") REFERENCES \"units\" (\"unit_id\") ON UPDATE CASCADE,\n  CONSTRAINT \"place_report_values_pkey\" PRIMARY KEY (\"place_report_value_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"place_report_values_account_id_idx\" ON \"place_report_values\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"place_report_values_label_idx\" ON \"place_report_values\" (\"label\" ASC);\n",
      "CREATE INDEX \"place_report_values_place_report_id_idx\" ON \"place_report_values\" (\"place_report_id\" ASC);\n",
      "CREATE INDEX \"place_report_values_unit_id_idx\" ON \"place_report_values\" (\"unit_id\" ASC);\n",
      "CREATE INDEX \"place_report_values_value_integer_idx\" ON \"place_report_values\" (\"value_integer\" ASC);\n",
      "CREATE INDEX \"place_report_values_value_numeric_idx\" ON \"place_report_values\" (\"value_numeric\" ASC);\n",
      "CREATE INDEX \"place_report_values_value_text_idx\" ON \"place_report_values\" (\"value_text\" ASC);\n",
      "CREATE TABLE \"messages\" (\n  \"message_id\" TEXT NOT NULL,\n  \"label_replace_by_generated_column\" TEXT,\n  \"date\" TEXT,\n  \"message\" TEXT,\n  CONSTRAINT \"messages_pkey\" PRIMARY KEY (\"message_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"messages_date_idx\" ON \"messages\" (\"date\" ASC);\n",
      "CREATE TABLE \"user_messages\" (\n  \"user_message_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"user_id\" TEXT,\n  \"message_id\" TEXT,\n  \"label_replace_by_generated_column\" TEXT,\n  \"read\" INTEGER,\n  CONSTRAINT \"user_messages_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"user_messages_message_id_fkey\" FOREIGN KEY (\"message_id\") REFERENCES \"messages\" (\"message_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"user_messages_user_id_fkey\" FOREIGN KEY (\"user_id\") REFERENCES \"users\" (\"user_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"user_messages_pkey\" PRIMARY KEY (\"user_message_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"user_messages_message_id_idx\" ON \"user_messages\" (\"message_id\" ASC);\n",
      "CREATE INDEX \"user_messages_user_id_idx\" ON \"user_messages\" (\"user_id\" ASC);\n",
      "CREATE TABLE \"place_users\" (\n  \"place_user_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"place_id\" TEXT,\n  \"user_id\" TEXT,\n  \"role\" TEXT,\n  \"label\" TEXT,\n  CONSTRAINT \"place_users_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"place_users_place_id_fkey\" FOREIGN KEY (\"place_id\") REFERENCES \"places\" (\"place_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"place_users_user_id_fkey\" FOREIGN KEY (\"user_id\") REFERENCES \"users\" (\"user_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"place_users_pkey\" PRIMARY KEY (\"place_user_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"place_users_account_id_idx\" ON \"place_users\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"place_users_label_idx\" ON \"place_users\" (\"label\" ASC);\n",
      "CREATE INDEX \"place_users_place_id_idx\" ON \"place_users\" (\"place_id\" ASC);\n",
      "CREATE INDEX \"place_users_user_id_idx\" ON \"place_users\" (\"user_id\" ASC);\n",
      "CREATE TABLE \"goals\" (\n  \"goal_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"subproject_id\" TEXT,\n  \"year\" INTEGER,\n  \"name\" TEXT,\n  \"data\" TEXT_JSON,\n  \"label_replace_by_generated_column\" TEXT,\n  CONSTRAINT \"goals_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"goals_subproject_id_fkey\" FOREIGN KEY (\"subproject_id\") REFERENCES \"subprojects\" (\"subproject_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"goals_pkey\" PRIMARY KEY (\"goal_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"goals_account_id_idx\" ON \"goals\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"goals_subproject_id_idx\" ON \"goals\" (\"subproject_id\" ASC);\n",
      "CREATE INDEX \"goals_year_idx\" ON \"goals\" (\"year\" ASC);\n",
      "CREATE TABLE \"goal_reports\" (\n  \"goal_report_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"goal_id\" TEXT,\n  \"data\" TEXT_JSON,\n  \"label\" TEXT,\n  CONSTRAINT \"goal_reports_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"goal_reports_goal_id_fkey\" FOREIGN KEY (\"goal_id\") REFERENCES \"goals\" (\"goal_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"goal_reports_pkey\" PRIMARY KEY (\"goal_report_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"goal_reports_account_id_idx\" ON \"goal_reports\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"goal_reports_goal_id_idx\" ON \"goal_reports\" (\"goal_id\" ASC);\n",
      "CREATE INDEX \"goal_reports_label_idx\" ON \"goal_reports\" (\"label\" ASC);\n",
      "CREATE TABLE \"goal_report_values\" (\n  \"goal_report_value_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"goal_report_id\" TEXT,\n  \"unit_id\" TEXT,\n  \"value_integer\" INTEGER,\n  \"value_numeric\" REAL,\n  \"value_text\" TEXT,\n  \"label\" TEXT,\n  CONSTRAINT \"goal_report_values_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"goal_report_values_goal_report_id_fkey\" FOREIGN KEY (\"goal_report_id\") REFERENCES \"goal_reports\" (\"goal_report_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"goal_report_values_unit_id_fkey\" FOREIGN KEY (\"unit_id\") REFERENCES \"units\" (\"unit_id\") ON UPDATE CASCADE,\n  CONSTRAINT \"goal_report_values_pkey\" PRIMARY KEY (\"goal_report_value_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"goal_report_values_account_id_idx\" ON \"goal_report_values\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"goal_report_values_goal_report_id_idx\" ON \"goal_report_values\" (\"goal_report_id\" ASC);\n",
      "CREATE INDEX \"goal_report_values_label_idx\" ON \"goal_report_values\" (\"label\" ASC);\n",
      "CREATE INDEX \"goal_report_values_unit_id_idx\" ON \"goal_report_values\" (\"unit_id\" ASC);\n",
      "CREATE INDEX \"goal_report_values_value_integer_idx\" ON \"goal_report_values\" (\"value_integer\" ASC);\n",
      "CREATE INDEX \"goal_report_values_value_numeric_idx\" ON \"goal_report_values\" (\"value_numeric\" ASC);\n",
      "CREATE INDEX \"goal_report_values_value_text_idx\" ON \"goal_report_values\" (\"value_text\" ASC);\n",
      "CREATE TABLE \"subproject_reports\" (\n  \"subproject_report_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"subproject_id\" TEXT,\n  \"year\" INTEGER,\n  \"data\" TEXT_JSON,\n  \"label_replace_by_generated_column\" TEXT,\n  CONSTRAINT \"subproject_reports_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"subproject_reports_subproject_id_fkey\" FOREIGN KEY (\"subproject_id\") REFERENCES \"subprojects\" (\"subproject_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"subproject_reports_pkey\" PRIMARY KEY (\"subproject_report_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"subproject_reports_account_id_idx\" ON \"subproject_reports\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"subproject_reports_subproject_id_idx\" ON \"subproject_reports\" (\"subproject_id\" ASC);\n",
      "CREATE INDEX \"subproject_reports_year_idx\" ON \"subproject_reports\" (\"year\" ASC);\n",
      "CREATE TABLE \"project_reports\" (\n  \"project_report_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"project_id\" TEXT,\n  \"year\" INTEGER,\n  \"data\" TEXT_JSON,\n  \"label_replace_by_generated_column\" TEXT,\n  CONSTRAINT \"project_reports_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"project_reports_project_id_fkey\" FOREIGN KEY (\"project_id\") REFERENCES \"projects\" (\"project_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"project_reports_pkey\" PRIMARY KEY (\"project_report_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"project_reports_account_id_idx\" ON \"project_reports\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"project_reports_project_id_idx\" ON \"project_reports\" (\"project_id\" ASC);\n",
      "CREATE INDEX \"project_reports_year_idx\" ON \"project_reports\" (\"year\" ASC);\n",
      "CREATE TABLE \"files\" (\n  \"file_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"project_id\" TEXT,\n  \"subproject_id\" TEXT,\n  \"place_id\" TEXT,\n  \"action_id\" TEXT,\n  \"check_id\" TEXT,\n  \"name\" TEXT,\n  \"size\" INTEGER,\n  \"label_replace_by_generated_column\" TEXT,\n  \"data\" TEXT_JSON,\n  \"mimetype\" TEXT,\n  \"width\" INTEGER,\n  \"height\" INTEGER,\n  \"url\" TEXT,\n  \"uuid\" TEXT,\n  \"preview_uuid\" TEXT,\n  CONSTRAINT \"files_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"files_action_id_fkey\" FOREIGN KEY (\"action_id\") REFERENCES \"actions\" (\"action_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"files_check_id_fkey\" FOREIGN KEY (\"check_id\") REFERENCES \"checks\" (\"check_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"files_place_id_fkey\" FOREIGN KEY (\"place_id\") REFERENCES \"places\" (\"place_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"files_project_id_fkey\" FOREIGN KEY (\"project_id\") REFERENCES \"projects\" (\"project_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"files_subproject_id_fkey\" FOREIGN KEY (\"subproject_id\") REFERENCES \"subprojects\" (\"subproject_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"files_pkey\" PRIMARY KEY (\"file_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"files_account_id_idx\" ON \"files\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"files_action_id_idx\" ON \"files\" (\"action_id\" ASC);\n",
      "CREATE INDEX \"files_check_id_idx\" ON \"files\" (\"check_id\" ASC);\n",
      "CREATE INDEX \"files_name_idx\" ON \"files\" (\"name\" ASC);\n",
      "CREATE INDEX \"files_place_id_idx\" ON \"files\" (\"place_id\" ASC);\n",
      "CREATE INDEX \"files_project_id_idx\" ON \"files\" (\"project_id\" ASC);\n",
      "CREATE INDEX \"files_subproject_id_idx\" ON \"files\" (\"subproject_id\" ASC);\n",
      "CREATE TABLE \"persons\" (\n  \"person_id\" TEXT NOT NULL,\n  \"project_id\" TEXT,\n  \"account_id\" TEXT,\n  \"email\" TEXT,\n  \"data\" TEXT_JSON,\n  \"label_replace_by_generated_column\" TEXT,\n  CONSTRAINT \"persons_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"persons_project_id_fkey\" FOREIGN KEY (\"project_id\") REFERENCES \"projects\" (\"project_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"persons_pkey\" PRIMARY KEY (\"person_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"persons_account_id_idx\" ON \"persons\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"persons_email_idx\" ON \"persons\" (\"email\" ASC);\n",
      "CREATE INDEX \"persons_project_id_idx\" ON \"persons\" (\"project_id\" ASC);\n",
      "CREATE TABLE \"field_types\" (\n  \"field_type_id\" TEXT NOT NULL,\n  \"name\" TEXT,\n  \"sort\" INTEGER,\n  \"comment\" TEXT,\n  \"label_replace_by_generated_column\" TEXT,\n  CONSTRAINT \"field_types_pkey\" PRIMARY KEY (\"field_type_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"field_types_name_idx\" ON \"field_types\" (\"name\" ASC);\n",
      "CREATE INDEX \"field_types_sort_idx\" ON \"field_types\" (\"sort\" ASC);\n",
      "CREATE TABLE \"widget_types\" (\n  \"widget_type_id\" TEXT NOT NULL,\n  \"name\" TEXT,\n  \"needs_list\" INTEGER,\n  \"sort\" INTEGER,\n  \"comment\" TEXT,\n  \"label_replace_by_generated_column\" TEXT,\n  CONSTRAINT \"widget_types_pkey\" PRIMARY KEY (\"widget_type_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"widget_types_name_idx\" ON \"widget_types\" (\"name\" ASC);\n",
      "CREATE INDEX \"widget_types_sort_idx\" ON \"widget_types\" (\"sort\" ASC);\n",
      "CREATE TABLE \"widgets_for_fields\" (\n  \"widget_for_field_id\" TEXT NOT NULL,\n  \"field_type_id\" TEXT,\n  \"widget_type_id\" TEXT,\n  \"label\" TEXT,\n  CONSTRAINT \"widgets_for_fields_field_type_id_fkey\" FOREIGN KEY (\"field_type_id\") REFERENCES \"field_types\" (\"field_type_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"widgets_for_fields_widget_type_id_fkey\" FOREIGN KEY (\"widget_type_id\") REFERENCES \"widget_types\" (\"widget_type_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"widgets_for_fields_pkey\" PRIMARY KEY (\"widget_for_field_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"widgets_for_fields_field_type_id_idx\" ON \"widgets_for_fields\" (\"field_type_id\" ASC);\n",
      "CREATE INDEX \"widgets_for_fields_label_idx\" ON \"widgets_for_fields\" (\"label\" ASC);\n",
      "CREATE INDEX \"widgets_for_fields_widget_type_id_idx\" ON \"widgets_for_fields\" (\"widget_type_id\" ASC);\n",
      "CREATE TABLE \"fields\" (\n  \"field_id\" TEXT NOT NULL,\n  \"project_id\" TEXT,\n  \"account_id\" TEXT,\n  \"table_name\" TEXT,\n  \"level\" INTEGER,\n  \"field_type_id\" TEXT,\n  \"widget_type_id\" TEXT,\n  \"name\" TEXT,\n  \"field_label\" TEXT,\n  \"list_id\" TEXT,\n  \"preset\" TEXT,\n  \"obsolete\" INTEGER,\n  \"label_replace_by_generated_column\" TEXT,\n  CONSTRAINT \"fields_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"fields_field_type_id_fkey\" FOREIGN KEY (\"field_type_id\") REFERENCES \"field_types\" (\"field_type_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"fields_list_id_fkey\" FOREIGN KEY (\"list_id\") REFERENCES \"lists\" (\"list_id\") ON UPDATE CASCADE,\n  CONSTRAINT \"fields_project_id_fkey\" FOREIGN KEY (\"project_id\") REFERENCES \"projects\" (\"project_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"fields_widget_type_id_fkey\" FOREIGN KEY (\"widget_type_id\") REFERENCES \"widget_types\" (\"widget_type_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"fields_pkey\" PRIMARY KEY (\"field_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"fields_account_id_idx\" ON \"fields\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"fields_field_type_id_idx\" ON \"fields\" (\"field_type_id\" ASC);\n",
      "CREATE INDEX \"fields_level_idx\" ON \"fields\" (\"level\" ASC);\n",
      "CREATE INDEX \"fields_list_id_idx\" ON \"fields\" (\"list_id\" ASC);\n",
      "CREATE INDEX \"fields_name_idx\" ON \"fields\" (\"name\" ASC);\n",
      "CREATE INDEX \"fields_project_id_idx\" ON \"fields\" (\"project_id\" ASC);\n",
      "CREATE INDEX \"fields_table_name_idx\" ON \"fields\" (\"table_name\" ASC);\n",
      "CREATE INDEX \"fields_widget_type_id_idx\" ON \"fields\" (\"widget_type_id\" ASC);\n",
      "CREATE TABLE \"app_states\" (\n  \"app_state_id\" TEXT NOT NULL,\n  \"user_email\" TEXT,\n  \"user_id\" TEXT,\n  \"account_id\" TEXT,\n  \"designing\" INTEGER,\n  \"breadcrumbs_overflowing\" INTEGER,\n  \"navs_overflowing\" INTEGER,\n  \"tabs\" TEXT_JSON,\n  \"map_bounds\" TEXT_JSON,\n  \"show_local_map\" TEXT_JSON,\n  \"map_maximized\" INTEGER,\n  \"map_hide_ui\" INTEGER,\n  \"map_locate\" INTEGER,\n  \"map_info\" TEXT_JSON,\n  \"map_show_center\" INTEGER,\n  \"tile_layer_sorter\" TEXT,\n  \"vector_layer_sorter\" TEXT,\n  \"editing_place_geometry\" TEXT,\n  \"editing_check_geometry\" TEXT,\n  \"editing_action_geometry\" TEXT,\n  \"draggable_layers\" TEXT_JSON,\n  \"droppable_layer\" TEXT,\n  \"confirm_assigning_to_single_target\" INTEGER,\n  \"places_to_assign_occurrence_to\" TEXT_JSON,\n  \"occurrence_fields_sorted\" TEXT_JSON,\n  \"syncing\" INTEGER,\n  \"tree_open_nodes\" TEXT_JSON,\n  \"filter_projects\" TEXT_JSON,\n  \"filter_fields\" TEXT_JSON,\n  \"filter_account_users\" TEXT_JSON,\n  \"filter_field_types\" TEXT_JSON,\n  \"filter_widget_types\" TEXT_JSON,\n  \"filter_widgets_for_fields\" TEXT_JSON,\n  \"filter_account_fields\" TEXT_JSON,\n  \"filter_account_messages\" TEXT_JSON,\n  \"filter_project_reports\" TEXT_JSON,\n  \"filter_persons\" TEXT_JSON,\n  \"filter_tile_layers\" TEXT_JSON,\n  \"filter_vector_layers\" TEXT_JSON,\n  \"filter_project_users\" TEXT_JSON,\n  \"filter_lists\" TEXT_JSON,\n  \"filter_units\" TEXT_JSON,\n  \"filter_place_levels\" TEXT_JSON,\n  \"filter_project_fields\" TEXT_JSON,\n  \"filter_subprojects\" TEXT_JSON,\n  \"filter_subproject_reports\" TEXT_JSON,\n  \"filter_goals\" TEXT_JSON,\n  \"filter_subproject_users\" TEXT_JSON,\n  \"filter_places_1\" TEXT_JSON,\n  \"filter_checks_1\" TEXT_JSON,\n  \"filter_actions_1\" TEXT_JSON,\n  \"filter_place_reports_1\" TEXT_JSON,\n  \"filter_places_2\" TEXT_JSON,\n  \"filter_place_reports_2\" TEXT_JSON,\n  \"filter_place_checks_2\" TEXT_JSON,\n  \"filter_actions_2\" TEXT_JSON,\n  \"label\" TEXT,\n  CONSTRAINT \"app_states_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"app_states_user_id_fkey\" FOREIGN KEY (\"user_id\") REFERENCES \"users\" (\"user_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"app_states_pkey\" PRIMARY KEY (\"app_state_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"app_states_account_id_idx\" ON \"app_states\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"app_states_user_email_idx\" ON \"app_states\" (\"user_email\" ASC);\n",
      "CREATE INDEX \"app_states_user_id_idx\" ON \"app_states\" (\"user_id\" ASC);\n",
      "CREATE TABLE \"occurrence_imports\" (\n  \"occurrence_import_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"subproject_id\" TEXT,\n  \"created_time\" TEXT,\n  \"inserted_count\" INTEGER,\n  \"id_field\" TEXT,\n  \"geometry_method\" TEXT,\n  \"geojson_geometry_field\" TEXT,\n  \"x_coordinate_field\" TEXT,\n  \"y_coordinate_field\" TEXT,\n  \"crs\" TEXT,\n  \"label_creation\" TEXT_JSON,\n  \"name\" TEXT,\n  \"attribution\" TEXT,\n  \"previous_import\" TEXT,\n  \"previous_import_operation\" TEXT,\n  \"download_from_gbif\" INTEGER,\n  \"gbif_filters\" TEXT_JSON,\n  \"gbif_download_key\" TEXT,\n  \"gbif_error\" TEXT,\n  \"label_replace_by_generated_column\" TEXT,\n  CONSTRAINT \"occurrence_imports_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"occurrence_imports_previous_import_fkey\" FOREIGN KEY (\"previous_import\") REFERENCES \"occurrence_imports\" (\"occurrence_import_id\") ON UPDATE CASCADE,\n  CONSTRAINT \"occurrence_imports_subproject_id_fkey\" FOREIGN KEY (\"subproject_id\") REFERENCES \"subprojects\" (\"subproject_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"occurrence_imports_pkey\" PRIMARY KEY (\"occurrence_import_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"occurrence_imports_account_id_idx\" ON \"occurrence_imports\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"occurrence_imports_created_time_idx\" ON \"occurrence_imports\" (\"created_time\" ASC);\n",
      "CREATE INDEX \"occurrence_imports_previous_import_idx\" ON \"occurrence_imports\" (\"previous_import\" ASC);\n",
      "CREATE INDEX \"occurrence_imports_subproject_id_idx\" ON \"occurrence_imports\" (\"subproject_id\" ASC);\n",
      "CREATE TABLE \"occurrences\" (\n  \"occurrence_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"occurrence_import_id\" TEXT,\n  \"place_id\" TEXT,\n  \"not_to_assign\" INTEGER,\n  \"comment\" TEXT,\n  \"data\" TEXT_JSON,\n  \"id_in_source\" TEXT,\n  \"geometry\" TEXT_JSON,\n  \"label\" TEXT,\n  CONSTRAINT \"occurrences_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"occurrences_occurrence_import_id_fkey\" FOREIGN KEY (\"occurrence_import_id\") REFERENCES \"occurrence_imports\" (\"occurrence_import_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"occurrences_place_id_fkey\" FOREIGN KEY (\"place_id\") REFERENCES \"places\" (\"place_id\") ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT \"occurrences_pkey\" PRIMARY KEY (\"occurrence_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"occurrences_account_id_idx\" ON \"occurrences\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"occurrences_label_idx\" ON \"occurrences\" (\"label\" ASC);\n",
      "CREATE INDEX \"occurrences_occurrence_import_id_idx\" ON \"occurrences\" (\"occurrence_import_id\" ASC);\n",
      "CREATE INDEX \"occurrences_place_id_idx\" ON \"occurrences\" (\"place_id\" ASC);\n",
      "CREATE TABLE \"tile_layers\" (\n  \"tile_layer_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"project_id\" TEXT NOT NULL,\n  \"label\" TEXT,\n  \"sort\" INTEGER,\n  \"active\" INTEGER,\n  \"type\" TEXT,\n  \"wmts_url_template\" TEXT,\n  \"wmts_subdomains\" TEXT_JSON,\n  \"wms_base_url\" TEXT,\n  \"wms_format\" TEXT_JSON,\n  \"wms_layer\" TEXT_JSON,\n  \"wms_parameters\" TEXT_JSON,\n  \"wms_styles\" TEXT_JSON,\n  \"wms_transparent\" INTEGER,\n  \"wms_version\" TEXT,\n  \"wms_info_format\" TEXT_JSON,\n  \"wms_legend\" BLOB,\n  \"max_zoom\" INTEGER,\n  \"min_zoom\" INTEGER,\n  \"opacity_percent\" INTEGER,\n  \"grayscale\" INTEGER,\n  \"local_data_size\" INTEGER,\n  \"local_data_bounds\" TEXT_JSON,\n  CONSTRAINT \"tile_layers_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"tile_layers_project_id_fkey\" FOREIGN KEY (\"project_id\") REFERENCES \"projects\" (\"project_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"tile_layers_pkey\" PRIMARY KEY (\"tile_layer_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"tile_layers_account_id_idx\" ON \"tile_layers\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"tile_layers_sort_idx\" ON \"tile_layers\" (\"sort\" ASC);\n",
      "CREATE TABLE \"vector_layers\" (\n  \"vector_layer_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"label\" TEXT,\n  \"project_id\" TEXT NOT NULL,\n  \"type\" TEXT,\n  \"display_by_property_field\" TEXT,\n  \"sort\" INTEGER,\n  \"active\" INTEGER,\n  \"max_zoom\" INTEGER,\n  \"min_zoom\" INTEGER,\n  \"max_features\" INTEGER,\n  \"wfs_url\" TEXT,\n  \"wfs_layer\" TEXT_JSON,\n  \"wfs_version\" TEXT,\n  \"wfs_output_format\" TEXT_JSON,\n  \"wfs_default_crs\" TEXT,\n  \"feature_count\" INTEGER,\n  \"point_count\" INTEGER,\n  \"line_count\" INTEGER,\n  \"polygon_count\" INTEGER,\n  CONSTRAINT \"vector_layers_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"vector_layers_project_id_fkey\" FOREIGN KEY (\"project_id\") REFERENCES \"projects\" (\"project_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"vector_layers_pkey\" PRIMARY KEY (\"vector_layer_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"vector_layers_account_id_idx\" ON \"vector_layers\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"vector_layers_label_idx\" ON \"vector_layers\" (\"label\" ASC);\n",
      "CREATE INDEX \"vector_layers_project_id_idx\" ON \"vector_layers\" (\"project_id\" ASC);\n",
      "CREATE INDEX \"vector_layers_sort_idx\" ON \"vector_layers\" (\"sort\" ASC);\n",
      "CREATE INDEX \"vector_layers_type_idx\" ON \"vector_layers\" (\"type\" ASC);\n",
      "CREATE TABLE \"layer_options\" (\n  \"layer_option_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"tile_layer_id\" TEXT,\n  \"vector_layer_id\" TEXT,\n  \"field\" TEXT,\n  \"value\" TEXT,\n  \"label\" TEXT,\n  \"queryable\" INTEGER,\n  \"legend_url\" TEXT,\n  CONSTRAINT \"layer_options_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"layer_options_tile_layer_id_fkey\" FOREIGN KEY (\"tile_layer_id\") REFERENCES \"tile_layers\" (\"tile_layer_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"layer_options_vector_layer_id_fkey\" FOREIGN KEY (\"vector_layer_id\") REFERENCES \"vector_layers\" (\"vector_layer_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"layer_options_pkey\" PRIMARY KEY (\"layer_option_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"layer_options_account_id_idx\" ON \"layer_options\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"layer_options_field_idx\" ON \"layer_options\" (\"field\" ASC);\n",
      "CREATE INDEX \"layer_options_label_idx\" ON \"layer_options\" (\"label\" ASC);\n",
      "CREATE INDEX \"layer_options_tile_layer_id_idx\" ON \"layer_options\" (\"tile_layer_id\" ASC);\n",
      "CREATE INDEX \"layer_options_value_idx\" ON \"layer_options\" (\"value\" ASC);\n",
      "CREATE INDEX \"layer_options_vector_layer_id_idx\" ON \"layer_options\" (\"vector_layer_id\" ASC);\n",
      "CREATE TABLE \"vector_layer_geoms\" (\n  \"vector_layer_geom_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"vector_layer_id\" TEXT,\n  \"geometry\" TEXT_JSON,\n  \"properties\" TEXT_JSON,\n  \"bbox_sw_lng\" REAL,\n  \"bbox_sw_lat\" REAL,\n  \"bbox_ne_lng\" REAL,\n  \"bbox_ne_lat\" REAL,\n  CONSTRAINT \"vector_layer_geoms_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"vector_layer_geoms_vector_layer_id_fkey\" FOREIGN KEY (\"vector_layer_id\") REFERENCES \"vector_layers\" (\"vector_layer_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"vector_layer_geoms_pkey\" PRIMARY KEY (\"vector_layer_geom_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"vector_layer_geoms_account_id_idx\" ON \"vector_layer_geoms\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"vector_layer_geoms_vector_layer_id_idx\" ON \"vector_layer_geoms\" (\"vector_layer_id\" ASC);\n",
      "CREATE TABLE \"vector_layer_displays\" (\n  \"vector_layer_display_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"vector_layer_id\" TEXT,\n  \"display_property_value\" TEXT,\n  \"marker_type\" TEXT,\n  \"circle_marker_radius\" INTEGER,\n  \"marker_symbol\" TEXT,\n  \"marker_size\" INTEGER,\n  \"stroke\" INTEGER,\n  \"color\" TEXT,\n  \"weight\" INTEGER,\n  \"opacity_percent\" INTEGER,\n  \"line_cap\" TEXT,\n  \"line_join\" TEXT,\n  \"dash_array\" TEXT,\n  \"dash_offset\" TEXT,\n  \"fill\" INTEGER,\n  \"fill_color\" TEXT,\n  \"fill_opacity_percent\" INTEGER,\n  \"fill_rule\" TEXT,\n  \"label_replace_by_generated_column\" TEXT,\n  CONSTRAINT \"vector_layer_displays_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"vector_layer_displays_vector_layer_id_fkey\" FOREIGN KEY (\"vector_layer_id\") REFERENCES \"vector_layers\" (\"vector_layer_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"vector_layer_displays_pkey\" PRIMARY KEY (\"vector_layer_display_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"vector_layer_displays_account_id_idx\" ON \"vector_layer_displays\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"vector_layer_displays_display_property_value_idx\" ON \"vector_layer_displays\" (\"display_property_value\" ASC);\n",
      "CREATE INDEX \"vector_layer_displays_vector_layer_id_idx\" ON \"vector_layer_displays\" (\"vector_layer_id\" ASC);\n",
      "CREATE TABLE \"notifications\" (\n  \"notification_id\" TEXT NOT NULL,\n  \"title\" TEXT,\n  \"body\" TEXT,\n  \"intent\" TEXT,\n  \"timeout\" INTEGER,\n  \"paused\" INTEGER,\n  \"progress_percent\" INTEGER,\n  CONSTRAINT \"notifications_pkey\" PRIMARY KEY (\"notification_id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"charts\" (\n  \"chart_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"project_id\" TEXT,\n  \"subproject_id\" TEXT,\n  \"place_id\" TEXT,\n  \"years_current\" INTEGER,\n  \"years_previous\" INTEGER,\n  \"years_specific\" INTEGER,\n  \"years_last_x\" INTEGER,\n  \"years_since\" INTEGER,\n  \"years_until\" INTEGER,\n  \"chart_type\" TEXT,\n  \"title\" TEXT,\n  \"subjects_stacked\" INTEGER,\n  \"subjects_single\" INTEGER,\n  \"percent\" INTEGER,\n  \"label_replace_by_generated_column\" TEXT,\n  CONSTRAINT \"charts_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"charts_place_id_fkey\" FOREIGN KEY (\"place_id\") REFERENCES \"places\" (\"place_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"charts_project_id_fkey\" FOREIGN KEY (\"project_id\") REFERENCES \"projects\" (\"project_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"charts_subproject_id_fkey\" FOREIGN KEY (\"subproject_id\") REFERENCES \"subprojects\" (\"subproject_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"charts_pkey\" PRIMARY KEY (\"chart_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"charts_account_id_idx\" ON \"charts\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"charts_chart_id_idx\" ON \"charts\" (\"chart_id\" ASC);\n",
      "CREATE INDEX \"charts_place_id_idx\" ON \"charts\" (\"place_id\" ASC);\n",
      "CREATE INDEX \"charts_project_id_idx\" ON \"charts\" (\"project_id\" ASC);\n",
      "CREATE INDEX \"charts_subproject_id_idx\" ON \"charts\" (\"subproject_id\" ASC);\n",
      "CREATE TABLE \"chart_subjects\" (\n  \"chart_subject_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"chart_id\" TEXT,\n  \"table_name\" TEXT,\n  \"table_level\" INTEGER,\n  \"table_filter\" TEXT_JSON,\n  \"value_source\" TEXT,\n  \"value_field\" TEXT,\n  \"value_unit\" TEXT,\n  \"name\" TEXT,\n  \"label_replace_by_generated_column\" TEXT,\n  \"type\" TEXT,\n  \"stroke\" TEXT,\n  \"fill\" TEXT,\n  \"fill_graded\" INTEGER,\n  \"connect_nulls\" INTEGER,\n  \"sort\" INTEGER,\n  CONSTRAINT \"chart_subjects_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"chart_subjects_chart_id_fkey\" FOREIGN KEY (\"chart_id\") REFERENCES \"charts\" (\"chart_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"chart_subjects_value_unit_fkey\" FOREIGN KEY (\"value_unit\") REFERENCES \"units\" (\"unit_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"chart_subjects_pkey\" PRIMARY KEY (\"chart_subject_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"chart_subjects_account_id_idx\" ON \"chart_subjects\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"chart_subjects_chart_id_idx\" ON \"chart_subjects\" (\"chart_id\" ASC);\n",
      "CREATE INDEX \"chart_subjects_chart_subject_id_idx\" ON \"chart_subjects\" (\"chart_subject_id\" ASC);\n",
      "CREATE INDEX \"chart_subjects_table_level_idx\" ON \"chart_subjects\" (\"table_level\" ASC);\n",
      "CREATE INDEX \"chart_subjects_table_name_idx\" ON \"chart_subjects\" (\"table_name\" ASC);\n",
      "CREATE INDEX \"chart_subjects_value_field_idx\" ON \"chart_subjects\" (\"value_field\" ASC);\n",
      "CREATE INDEX \"chart_subjects_value_unit_idx\" ON \"chart_subjects\" (\"value_unit\" ASC);\n",
      "CREATE TABLE \"crs\" (\n  \"crs_id\" TEXT NOT NULL,\n  \"project_id\" TEXT,\n  \"account_id\" TEXT,\n  \"code\" TEXT,\n  \"name\" TEXT,\n  \"proj4\" TEXT,\n  \"label_replace_by_generated_column\" TEXT,\n  CONSTRAINT \"crs_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"crs_project_id_fkey\" FOREIGN KEY (\"project_id\") REFERENCES \"projects\" (\"project_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"crs_pkey\" PRIMARY KEY (\"crs_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"crs_account_id_idx\" ON \"crs\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"crs_project_id_idx\" ON \"crs\" (\"project_id\" ASC);\n",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'users', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_users_primarykey;",
      "CREATE TRIGGER update_ensure_main_users_primarykey\n  BEFORE UPDATE ON \"main\".\"users\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"user_id\" != new.\"user_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column user_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_users_into_oplog;",
      "CREATE TRIGGER insert_main_users_into_oplog\n   AFTER INSERT ON \"main\".\"users\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'users')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'users', 'INSERT', json_patch('{}', json_object('user_id', new.\"user_id\")), json_object('email', new.\"email\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'user_id', new.\"user_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_users_into_oplog;",
      "CREATE TRIGGER update_main_users_into_oplog\n   AFTER UPDATE ON \"main\".\"users\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'users')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'users', 'UPDATE', json_patch('{}', json_object('user_id', new.\"user_id\")), json_object('email', new.\"email\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'user_id', new.\"user_id\"), json_object('email', old.\"email\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'user_id', old.\"user_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_users_into_oplog;",
      "CREATE TRIGGER delete_main_users_into_oplog\n   AFTER DELETE ON \"main\".\"users\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'users')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'users', 'DELETE', json_patch('{}', json_object('user_id', old.\"user_id\")), NULL, json_object('email', old.\"email\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'user_id', old.\"user_id\"), NULL);\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'accounts', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_accounts_primarykey;",
      "CREATE TRIGGER update_ensure_main_accounts_primarykey\n  BEFORE UPDATE ON \"main\".\"accounts\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"account_id\" != new.\"account_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column account_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_accounts_into_oplog;",
      "CREATE TRIGGER insert_main_accounts_into_oplog\n   AFTER INSERT ON \"main\".\"accounts\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'accounts')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'accounts', 'INSERT', json_patch('{}', json_object('account_id', new.\"account_id\")), json_object('account_id', new.\"account_id\", 'label', new.\"label\", 'period_end', new.\"period_end\", 'period_start', new.\"period_start\", 'projects_label_by', new.\"projects_label_by\", 'type', new.\"type\", 'user_id', new.\"user_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_accounts_into_oplog;",
      "CREATE TRIGGER update_main_accounts_into_oplog\n   AFTER UPDATE ON \"main\".\"accounts\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'accounts')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'accounts', 'UPDATE', json_patch('{}', json_object('account_id', new.\"account_id\")), json_object('account_id', new.\"account_id\", 'label', new.\"label\", 'period_end', new.\"period_end\", 'period_start', new.\"period_start\", 'projects_label_by', new.\"projects_label_by\", 'type', new.\"type\", 'user_id', new.\"user_id\"), json_object('account_id', old.\"account_id\", 'label', old.\"label\", 'period_end', old.\"period_end\", 'period_start', old.\"period_start\", 'projects_label_by', old.\"projects_label_by\", 'type', old.\"type\", 'user_id', old.\"user_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_accounts_into_oplog;",
      "CREATE TRIGGER delete_main_accounts_into_oplog\n   AFTER DELETE ON \"main\".\"accounts\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'accounts')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'accounts', 'DELETE', json_patch('{}', json_object('account_id', old.\"account_id\")), NULL, json_object('account_id', old.\"account_id\", 'label', old.\"label\", 'period_end', old.\"period_end\", 'period_start', old.\"period_start\", 'projects_label_by', old.\"projects_label_by\", 'type', old.\"type\", 'user_id', old.\"user_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_accounts_user_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_accounts_user_id_into_oplog\n  AFTER INSERT ON \"main\".\"accounts\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'accounts') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'users', 'COMPENSATION', json_patch('{}', json_object('user_id', \"user_id\")), json_object('user_id', \"user_id\"), NULL, NULL\n  FROM \"main\".\"users\" WHERE \"user_id\" = new.\"user_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_accounts_user_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_accounts_user_id_into_oplog\n  AFTER UPDATE ON \"main\".\"accounts\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'accounts') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'users', 'COMPENSATION', json_patch('{}', json_object('user_id', \"user_id\")), json_object('user_id', \"user_id\"), NULL, NULL\n  FROM \"main\".\"users\" WHERE \"user_id\" = new.\"user_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'projects', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_projects_primarykey;",
      "CREATE TRIGGER update_ensure_main_projects_primarykey\n  BEFORE UPDATE ON \"main\".\"projects\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"project_id\" != new.\"project_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column project_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_projects_into_oplog;",
      "CREATE TRIGGER insert_main_projects_into_oplog\n   AFTER INSERT ON \"main\".\"projects\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'projects')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'projects', 'INSERT', json_patch('{}', json_object('project_id', new.\"project_id\")), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'files_active_actions', new.\"files_active_actions\", 'files_active_checks', new.\"files_active_checks\", 'files_active_places', new.\"files_active_places\", 'files_active_projects', new.\"files_active_projects\", 'files_active_subprojects', new.\"files_active_subprojects\", 'files_offline', new.\"files_offline\", 'goal_reports_label_by', new.\"goal_reports_label_by\", 'goal_reports_order_by', new.\"goal_reports_order_by\", 'goals_label_by', new.\"goals_label_by\", 'label', new.\"label\", 'map_presentation_crs', new.\"map_presentation_crs\", 'multiple_action_values_on_same_level', new.\"multiple_action_values_on_same_level\", 'multiple_check_values_on_same_level', new.\"multiple_check_values_on_same_level\", 'name', new.\"name\", 'persons_label_by', new.\"persons_label_by\", 'persons_order_by', new.\"persons_order_by\", 'places_label_by', new.\"places_label_by\", 'places_order_by', new.\"places_order_by\", 'project_id', new.\"project_id\", 'subproject_name_plural', new.\"subproject_name_plural\", 'subproject_name_singular', new.\"subproject_name_singular\", 'subproject_order_by', new.\"subproject_order_by\", 'type', new.\"type\", 'values_on_multiple_levels', new.\"values_on_multiple_levels\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_projects_into_oplog;",
      "CREATE TRIGGER update_main_projects_into_oplog\n   AFTER UPDATE ON \"main\".\"projects\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'projects')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'projects', 'UPDATE', json_patch('{}', json_object('project_id', new.\"project_id\")), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'files_active_actions', new.\"files_active_actions\", 'files_active_checks', new.\"files_active_checks\", 'files_active_places', new.\"files_active_places\", 'files_active_projects', new.\"files_active_projects\", 'files_active_subprojects', new.\"files_active_subprojects\", 'files_offline', new.\"files_offline\", 'goal_reports_label_by', new.\"goal_reports_label_by\", 'goal_reports_order_by', new.\"goal_reports_order_by\", 'goals_label_by', new.\"goals_label_by\", 'label', new.\"label\", 'map_presentation_crs', new.\"map_presentation_crs\", 'multiple_action_values_on_same_level', new.\"multiple_action_values_on_same_level\", 'multiple_check_values_on_same_level', new.\"multiple_check_values_on_same_level\", 'name', new.\"name\", 'persons_label_by', new.\"persons_label_by\", 'persons_order_by', new.\"persons_order_by\", 'places_label_by', new.\"places_label_by\", 'places_order_by', new.\"places_order_by\", 'project_id', new.\"project_id\", 'subproject_name_plural', new.\"subproject_name_plural\", 'subproject_name_singular', new.\"subproject_name_singular\", 'subproject_order_by', new.\"subproject_order_by\", 'type', new.\"type\", 'values_on_multiple_levels', new.\"values_on_multiple_levels\"), json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'files_active_actions', old.\"files_active_actions\", 'files_active_checks', old.\"files_active_checks\", 'files_active_places', old.\"files_active_places\", 'files_active_projects', old.\"files_active_projects\", 'files_active_subprojects', old.\"files_active_subprojects\", 'files_offline', old.\"files_offline\", 'goal_reports_label_by', old.\"goal_reports_label_by\", 'goal_reports_order_by', old.\"goal_reports_order_by\", 'goals_label_by', old.\"goals_label_by\", 'label', old.\"label\", 'map_presentation_crs', old.\"map_presentation_crs\", 'multiple_action_values_on_same_level', old.\"multiple_action_values_on_same_level\", 'multiple_check_values_on_same_level', old.\"multiple_check_values_on_same_level\", 'name', old.\"name\", 'persons_label_by', old.\"persons_label_by\", 'persons_order_by', old.\"persons_order_by\", 'places_label_by', old.\"places_label_by\", 'places_order_by', old.\"places_order_by\", 'project_id', old.\"project_id\", 'subproject_name_plural', old.\"subproject_name_plural\", 'subproject_name_singular', old.\"subproject_name_singular\", 'subproject_order_by', old.\"subproject_order_by\", 'type', old.\"type\", 'values_on_multiple_levels', old.\"values_on_multiple_levels\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_projects_into_oplog;",
      "CREATE TRIGGER delete_main_projects_into_oplog\n   AFTER DELETE ON \"main\".\"projects\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'projects')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'projects', 'DELETE', json_patch('{}', json_object('project_id', old.\"project_id\")), NULL, json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'files_active_actions', old.\"files_active_actions\", 'files_active_checks', old.\"files_active_checks\", 'files_active_places', old.\"files_active_places\", 'files_active_projects', old.\"files_active_projects\", 'files_active_subprojects', old.\"files_active_subprojects\", 'files_offline', old.\"files_offline\", 'goal_reports_label_by', old.\"goal_reports_label_by\", 'goal_reports_order_by', old.\"goal_reports_order_by\", 'goals_label_by', old.\"goals_label_by\", 'label', old.\"label\", 'map_presentation_crs', old.\"map_presentation_crs\", 'multiple_action_values_on_same_level', old.\"multiple_action_values_on_same_level\", 'multiple_check_values_on_same_level', old.\"multiple_check_values_on_same_level\", 'name', old.\"name\", 'persons_label_by', old.\"persons_label_by\", 'persons_order_by', old.\"persons_order_by\", 'places_label_by', old.\"places_label_by\", 'places_order_by', old.\"places_order_by\", 'project_id', old.\"project_id\", 'subproject_name_plural', old.\"subproject_name_plural\", 'subproject_name_singular', old.\"subproject_name_singular\", 'subproject_order_by', old.\"subproject_order_by\", 'type', old.\"type\", 'values_on_multiple_levels', old.\"values_on_multiple_levels\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_projects_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_projects_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"projects\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'projects') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_projects_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_projects_account_id_into_oplog\n  AFTER UPDATE ON \"main\".\"projects\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'projects') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'place_levels', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_place_levels_primarykey;",
      "CREATE TRIGGER update_ensure_main_place_levels_primarykey\n  BEFORE UPDATE ON \"main\".\"place_levels\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"place_level_id\" != new.\"place_level_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column place_level_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_place_levels_into_oplog;",
      "CREATE TRIGGER insert_main_place_levels_into_oplog\n   AFTER INSERT ON \"main\".\"place_levels\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'place_levels')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'place_levels', 'INSERT', json_patch('{}', json_object('place_level_id', new.\"place_level_id\")), json_object('account_id', new.\"account_id\", 'action_reports', new.\"action_reports\", 'action_values', new.\"action_values\", 'actions', new.\"actions\", 'check_taxa', new.\"check_taxa\", 'check_values', new.\"check_values\", 'checks', new.\"checks\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'level', new.\"level\", 'name_plural', new.\"name_plural\", 'name_short', new.\"name_short\", 'name_singular', new.\"name_singular\", 'occurrences', new.\"occurrences\", 'place_level_id', new.\"place_level_id\", 'project_id', new.\"project_id\", 'report_values', new.\"report_values\", 'reports', new.\"reports\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_place_levels_into_oplog;",
      "CREATE TRIGGER update_main_place_levels_into_oplog\n   AFTER UPDATE ON \"main\".\"place_levels\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'place_levels')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'place_levels', 'UPDATE', json_patch('{}', json_object('place_level_id', new.\"place_level_id\")), json_object('account_id', new.\"account_id\", 'action_reports', new.\"action_reports\", 'action_values', new.\"action_values\", 'actions', new.\"actions\", 'check_taxa', new.\"check_taxa\", 'check_values', new.\"check_values\", 'checks', new.\"checks\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'level', new.\"level\", 'name_plural', new.\"name_plural\", 'name_short', new.\"name_short\", 'name_singular', new.\"name_singular\", 'occurrences', new.\"occurrences\", 'place_level_id', new.\"place_level_id\", 'project_id', new.\"project_id\", 'report_values', new.\"report_values\", 'reports', new.\"reports\"), json_object('account_id', old.\"account_id\", 'action_reports', old.\"action_reports\", 'action_values', old.\"action_values\", 'actions', old.\"actions\", 'check_taxa', old.\"check_taxa\", 'check_values', old.\"check_values\", 'checks', old.\"checks\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'level', old.\"level\", 'name_plural', old.\"name_plural\", 'name_short', old.\"name_short\", 'name_singular', old.\"name_singular\", 'occurrences', old.\"occurrences\", 'place_level_id', old.\"place_level_id\", 'project_id', old.\"project_id\", 'report_values', old.\"report_values\", 'reports', old.\"reports\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_place_levels_into_oplog;",
      "CREATE TRIGGER delete_main_place_levels_into_oplog\n   AFTER DELETE ON \"main\".\"place_levels\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'place_levels')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'place_levels', 'DELETE', json_patch('{}', json_object('place_level_id', old.\"place_level_id\")), NULL, json_object('account_id', old.\"account_id\", 'action_reports', old.\"action_reports\", 'action_values', old.\"action_values\", 'actions', old.\"actions\", 'check_taxa', old.\"check_taxa\", 'check_values', old.\"check_values\", 'checks', old.\"checks\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'level', old.\"level\", 'name_plural', old.\"name_plural\", 'name_short', old.\"name_short\", 'name_singular', old.\"name_singular\", 'occurrences', old.\"occurrences\", 'place_level_id', old.\"place_level_id\", 'project_id', old.\"project_id\", 'report_values', old.\"report_values\", 'reports', old.\"reports\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_place_levels_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_place_levels_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"place_levels\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'place_levels') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_place_levels_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_place_levels_account_id_into_oplog\n  AFTER UPDATE ON \"main\".\"place_levels\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'place_levels') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_place_levels_project_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_place_levels_project_id_into_oplog\n  AFTER INSERT ON \"main\".\"place_levels\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'place_levels') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_patch('{}', json_object('project_id', \"project_id\")), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_place_levels_project_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_place_levels_project_id_into_oplog\n  AFTER UPDATE ON \"main\".\"place_levels\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'place_levels') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_patch('{}', json_object('project_id', \"project_id\")), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'subprojects', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_subprojects_primarykey;",
      "CREATE TRIGGER update_ensure_main_subprojects_primarykey\n  BEFORE UPDATE ON \"main\".\"subprojects\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"subproject_id\" != new.\"subproject_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column subproject_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_subprojects_into_oplog;",
      "CREATE TRIGGER insert_main_subprojects_into_oplog\n   AFTER INSERT ON \"main\".\"subprojects\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'subprojects')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'subprojects', 'INSERT', json_patch('{}', json_object('subproject_id', new.\"subproject_id\")), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'end_year', new.\"end_year\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'name', new.\"name\", 'project_id', new.\"project_id\", 'start_year', new.\"start_year\", 'subproject_id', new.\"subproject_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_subprojects_into_oplog;",
      "CREATE TRIGGER update_main_subprojects_into_oplog\n   AFTER UPDATE ON \"main\".\"subprojects\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'subprojects')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'subprojects', 'UPDATE', json_patch('{}', json_object('subproject_id', new.\"subproject_id\")), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'end_year', new.\"end_year\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'name', new.\"name\", 'project_id', new.\"project_id\", 'start_year', new.\"start_year\", 'subproject_id', new.\"subproject_id\"), json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'end_year', old.\"end_year\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'name', old.\"name\", 'project_id', old.\"project_id\", 'start_year', old.\"start_year\", 'subproject_id', old.\"subproject_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_subprojects_into_oplog;",
      "CREATE TRIGGER delete_main_subprojects_into_oplog\n   AFTER DELETE ON \"main\".\"subprojects\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'subprojects')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'subprojects', 'DELETE', json_patch('{}', json_object('subproject_id', old.\"subproject_id\")), NULL, json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'end_year', old.\"end_year\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'name', old.\"name\", 'project_id', old.\"project_id\", 'start_year', old.\"start_year\", 'subproject_id', old.\"subproject_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_subprojects_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_subprojects_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"subprojects\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'subprojects') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_subprojects_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_subprojects_account_id_into_oplog\n  AFTER UPDATE ON \"main\".\"subprojects\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'subprojects') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_subprojects_project_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_subprojects_project_id_into_oplog\n  AFTER INSERT ON \"main\".\"subprojects\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'subprojects') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_patch('{}', json_object('project_id', \"project_id\")), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_subprojects_project_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_subprojects_project_id_into_oplog\n  AFTER UPDATE ON \"main\".\"subprojects\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'subprojects') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_patch('{}', json_object('project_id', \"project_id\")), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'project_users', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_project_users_primarykey;",
      "CREATE TRIGGER update_ensure_main_project_users_primarykey\n  BEFORE UPDATE ON \"main\".\"project_users\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"project_user_id\" != new.\"project_user_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column project_user_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_project_users_into_oplog;",
      "CREATE TRIGGER insert_main_project_users_into_oplog\n   AFTER INSERT ON \"main\".\"project_users\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'project_users')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'project_users', 'INSERT', json_patch('{}', json_object('project_user_id', new.\"project_user_id\")), json_object('account_id', new.\"account_id\", 'label', new.\"label\", 'project_id', new.\"project_id\", 'project_user_id', new.\"project_user_id\", 'role', new.\"role\", 'user_id', new.\"user_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_project_users_into_oplog;",
      "CREATE TRIGGER update_main_project_users_into_oplog\n   AFTER UPDATE ON \"main\".\"project_users\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'project_users')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'project_users', 'UPDATE', json_patch('{}', json_object('project_user_id', new.\"project_user_id\")), json_object('account_id', new.\"account_id\", 'label', new.\"label\", 'project_id', new.\"project_id\", 'project_user_id', new.\"project_user_id\", 'role', new.\"role\", 'user_id', new.\"user_id\"), json_object('account_id', old.\"account_id\", 'label', old.\"label\", 'project_id', old.\"project_id\", 'project_user_id', old.\"project_user_id\", 'role', old.\"role\", 'user_id', old.\"user_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_project_users_into_oplog;",
      "CREATE TRIGGER delete_main_project_users_into_oplog\n   AFTER DELETE ON \"main\".\"project_users\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'project_users')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'project_users', 'DELETE', json_patch('{}', json_object('project_user_id', old.\"project_user_id\")), NULL, json_object('account_id', old.\"account_id\", 'label', old.\"label\", 'project_id', old.\"project_id\", 'project_user_id', old.\"project_user_id\", 'role', old.\"role\", 'user_id', old.\"user_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_project_users_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_project_users_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"project_users\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'project_users') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_project_users_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_project_users_account_id_into_oplog\n  AFTER UPDATE ON \"main\".\"project_users\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'project_users') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_project_users_project_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_project_users_project_id_into_oplog\n  AFTER INSERT ON \"main\".\"project_users\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'project_users') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_patch('{}', json_object('project_id', \"project_id\")), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_project_users_project_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_project_users_project_id_into_oplog\n  AFTER UPDATE ON \"main\".\"project_users\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'project_users') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_patch('{}', json_object('project_id', \"project_id\")), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_project_users_user_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_project_users_user_id_into_oplog\n  AFTER INSERT ON \"main\".\"project_users\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'project_users') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'users', 'COMPENSATION', json_patch('{}', json_object('user_id', \"user_id\")), json_object('user_id', \"user_id\"), NULL, NULL\n  FROM \"main\".\"users\" WHERE \"user_id\" = new.\"user_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_project_users_user_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_project_users_user_id_into_oplog\n  AFTER UPDATE ON \"main\".\"project_users\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'project_users') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'users', 'COMPENSATION', json_patch('{}', json_object('user_id', \"user_id\")), json_object('user_id', \"user_id\"), NULL, NULL\n  FROM \"main\".\"users\" WHERE \"user_id\" = new.\"user_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'subproject_users', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_subproject_users_primarykey;",
      "CREATE TRIGGER update_ensure_main_subproject_users_primarykey\n  BEFORE UPDATE ON \"main\".\"subproject_users\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"subproject_user_id\" != new.\"subproject_user_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column subproject_user_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_subproject_users_into_oplog;",
      "CREATE TRIGGER insert_main_subproject_users_into_oplog\n   AFTER INSERT ON \"main\".\"subproject_users\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'subproject_users')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'subproject_users', 'INSERT', json_patch('{}', json_object('subproject_user_id', new.\"subproject_user_id\")), json_object('account_id', new.\"account_id\", 'label', new.\"label\", 'role', new.\"role\", 'subproject_id', new.\"subproject_id\", 'subproject_user_id', new.\"subproject_user_id\", 'user_id', new.\"user_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_subproject_users_into_oplog;",
      "CREATE TRIGGER update_main_subproject_users_into_oplog\n   AFTER UPDATE ON \"main\".\"subproject_users\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'subproject_users')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'subproject_users', 'UPDATE', json_patch('{}', json_object('subproject_user_id', new.\"subproject_user_id\")), json_object('account_id', new.\"account_id\", 'label', new.\"label\", 'role', new.\"role\", 'subproject_id', new.\"subproject_id\", 'subproject_user_id', new.\"subproject_user_id\", 'user_id', new.\"user_id\"), json_object('account_id', old.\"account_id\", 'label', old.\"label\", 'role', old.\"role\", 'subproject_id', old.\"subproject_id\", 'subproject_user_id', old.\"subproject_user_id\", 'user_id', old.\"user_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_subproject_users_into_oplog;",
      "CREATE TRIGGER delete_main_subproject_users_into_oplog\n   AFTER DELETE ON \"main\".\"subproject_users\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'subproject_users')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'subproject_users', 'DELETE', json_patch('{}', json_object('subproject_user_id', old.\"subproject_user_id\")), NULL, json_object('account_id', old.\"account_id\", 'label', old.\"label\", 'role', old.\"role\", 'subproject_id', old.\"subproject_id\", 'subproject_user_id', old.\"subproject_user_id\", 'user_id', old.\"user_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_subproject_users_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_subproject_users_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"subproject_users\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'subproject_users') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_subproject_users_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_subproject_users_account_id_into_oplog\n  AFTER UPDATE ON \"main\".\"subproject_users\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'subproject_users') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_subproject_users_subproject_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_subproject_users_subproject_id_into_oplog\n  AFTER INSERT ON \"main\".\"subproject_users\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'subproject_users') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'subprojects', 'COMPENSATION', json_patch('{}', json_object('subproject_id', \"subproject_id\")), json_object('subproject_id', \"subproject_id\"), NULL, NULL\n  FROM \"main\".\"subprojects\" WHERE \"subproject_id\" = new.\"subproject_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_subproject_users_subproject_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_subproject_users_subproject_id_into_oplog\n  AFTER UPDATE ON \"main\".\"subproject_users\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'subproject_users') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'subprojects', 'COMPENSATION', json_patch('{}', json_object('subproject_id', \"subproject_id\")), json_object('subproject_id', \"subproject_id\"), NULL, NULL\n  FROM \"main\".\"subprojects\" WHERE \"subproject_id\" = new.\"subproject_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_subproject_users_user_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_subproject_users_user_id_into_oplog\n  AFTER INSERT ON \"main\".\"subproject_users\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'subproject_users') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'users', 'COMPENSATION', json_patch('{}', json_object('user_id', \"user_id\")), json_object('user_id', \"user_id\"), NULL, NULL\n  FROM \"main\".\"users\" WHERE \"user_id\" = new.\"user_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_subproject_users_user_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_subproject_users_user_id_into_oplog\n  AFTER UPDATE ON \"main\".\"subproject_users\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'subproject_users') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'users', 'COMPENSATION', json_patch('{}', json_object('user_id', \"user_id\")), json_object('user_id', \"user_id\"), NULL, NULL\n  FROM \"main\".\"users\" WHERE \"user_id\" = new.\"user_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'taxonomies', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_taxonomies_primarykey;",
      "CREATE TRIGGER update_ensure_main_taxonomies_primarykey\n  BEFORE UPDATE ON \"main\".\"taxonomies\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"taxonomy_id\" != new.\"taxonomy_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column taxonomy_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_taxonomies_into_oplog;",
      "CREATE TRIGGER insert_main_taxonomies_into_oplog\n   AFTER INSERT ON \"main\".\"taxonomies\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'taxonomies')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'taxonomies', 'INSERT', json_patch('{}', json_object('taxonomy_id', new.\"taxonomy_id\")), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'name', new.\"name\", 'obsolete', new.\"obsolete\", 'project_id', new.\"project_id\", 'taxonomy_id', new.\"taxonomy_id\", 'type', new.\"type\", 'url', new.\"url\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_taxonomies_into_oplog;",
      "CREATE TRIGGER update_main_taxonomies_into_oplog\n   AFTER UPDATE ON \"main\".\"taxonomies\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'taxonomies')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'taxonomies', 'UPDATE', json_patch('{}', json_object('taxonomy_id', new.\"taxonomy_id\")), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'name', new.\"name\", 'obsolete', new.\"obsolete\", 'project_id', new.\"project_id\", 'taxonomy_id', new.\"taxonomy_id\", 'type', new.\"type\", 'url', new.\"url\"), json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'name', old.\"name\", 'obsolete', old.\"obsolete\", 'project_id', old.\"project_id\", 'taxonomy_id', old.\"taxonomy_id\", 'type', old.\"type\", 'url', old.\"url\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_taxonomies_into_oplog;",
      "CREATE TRIGGER delete_main_taxonomies_into_oplog\n   AFTER DELETE ON \"main\".\"taxonomies\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'taxonomies')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'taxonomies', 'DELETE', json_patch('{}', json_object('taxonomy_id', old.\"taxonomy_id\")), NULL, json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'name', old.\"name\", 'obsolete', old.\"obsolete\", 'project_id', old.\"project_id\", 'taxonomy_id', old.\"taxonomy_id\", 'type', old.\"type\", 'url', old.\"url\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_taxonomies_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_taxonomies_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"taxonomies\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'taxonomies') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_taxonomies_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_taxonomies_account_id_into_oplog\n  AFTER UPDATE ON \"main\".\"taxonomies\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'taxonomies') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_taxonomies_project_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_taxonomies_project_id_into_oplog\n  AFTER INSERT ON \"main\".\"taxonomies\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'taxonomies') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_patch('{}', json_object('project_id', \"project_id\")), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_taxonomies_project_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_taxonomies_project_id_into_oplog\n  AFTER UPDATE ON \"main\".\"taxonomies\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'taxonomies') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_patch('{}', json_object('project_id', \"project_id\")), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'taxa', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_taxa_primarykey;",
      "CREATE TRIGGER update_ensure_main_taxa_primarykey\n  BEFORE UPDATE ON \"main\".\"taxa\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"taxon_id\" != new.\"taxon_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column taxon_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_taxa_into_oplog;",
      "CREATE TRIGGER insert_main_taxa_into_oplog\n   AFTER INSERT ON \"main\".\"taxa\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'taxa')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'taxa', 'INSERT', json_patch('{}', json_object('taxon_id', new.\"taxon_id\")), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'id_in_source', new.\"id_in_source\", 'label', new.\"label\", 'name', new.\"name\", 'taxon_id', new.\"taxon_id\", 'taxonomy_id', new.\"taxonomy_id\", 'url', new.\"url\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_taxa_into_oplog;",
      "CREATE TRIGGER update_main_taxa_into_oplog\n   AFTER UPDATE ON \"main\".\"taxa\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'taxa')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'taxa', 'UPDATE', json_patch('{}', json_object('taxon_id', new.\"taxon_id\")), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'id_in_source', new.\"id_in_source\", 'label', new.\"label\", 'name', new.\"name\", 'taxon_id', new.\"taxon_id\", 'taxonomy_id', new.\"taxonomy_id\", 'url', new.\"url\"), json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'id_in_source', old.\"id_in_source\", 'label', old.\"label\", 'name', old.\"name\", 'taxon_id', old.\"taxon_id\", 'taxonomy_id', old.\"taxonomy_id\", 'url', old.\"url\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_taxa_into_oplog;",
      "CREATE TRIGGER delete_main_taxa_into_oplog\n   AFTER DELETE ON \"main\".\"taxa\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'taxa')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'taxa', 'DELETE', json_patch('{}', json_object('taxon_id', old.\"taxon_id\")), NULL, json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'id_in_source', old.\"id_in_source\", 'label', old.\"label\", 'name', old.\"name\", 'taxon_id', old.\"taxon_id\", 'taxonomy_id', old.\"taxonomy_id\", 'url', old.\"url\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_taxa_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_taxa_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"taxa\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'taxa') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_taxa_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_taxa_account_id_into_oplog\n  AFTER UPDATE ON \"main\".\"taxa\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'taxa') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_taxa_taxonomy_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_taxa_taxonomy_id_into_oplog\n  AFTER INSERT ON \"main\".\"taxa\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'taxa') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'taxonomies', 'COMPENSATION', json_patch('{}', json_object('taxonomy_id', \"taxonomy_id\")), json_object('taxonomy_id', \"taxonomy_id\"), NULL, NULL\n  FROM \"main\".\"taxonomies\" WHERE \"taxonomy_id\" = new.\"taxonomy_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_taxa_taxonomy_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_taxa_taxonomy_id_into_oplog\n  AFTER UPDATE ON \"main\".\"taxa\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'taxa') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'taxonomies', 'COMPENSATION', json_patch('{}', json_object('taxonomy_id', \"taxonomy_id\")), json_object('taxonomy_id', \"taxonomy_id\"), NULL, NULL\n  FROM \"main\".\"taxonomies\" WHERE \"taxonomy_id\" = new.\"taxonomy_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'subproject_taxa', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_subproject_taxa_primarykey;",
      "CREATE TRIGGER update_ensure_main_subproject_taxa_primarykey\n  BEFORE UPDATE ON \"main\".\"subproject_taxa\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"subproject_taxon_id\" != new.\"subproject_taxon_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column subproject_taxon_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_subproject_taxa_into_oplog;",
      "CREATE TRIGGER insert_main_subproject_taxa_into_oplog\n   AFTER INSERT ON \"main\".\"subproject_taxa\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'subproject_taxa')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'subproject_taxa', 'INSERT', json_patch('{}', json_object('subproject_taxon_id', new.\"subproject_taxon_id\")), json_object('account_id', new.\"account_id\", 'label', new.\"label\", 'subproject_id', new.\"subproject_id\", 'subproject_taxon_id', new.\"subproject_taxon_id\", 'taxon_id', new.\"taxon_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_subproject_taxa_into_oplog;",
      "CREATE TRIGGER update_main_subproject_taxa_into_oplog\n   AFTER UPDATE ON \"main\".\"subproject_taxa\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'subproject_taxa')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'subproject_taxa', 'UPDATE', json_patch('{}', json_object('subproject_taxon_id', new.\"subproject_taxon_id\")), json_object('account_id', new.\"account_id\", 'label', new.\"label\", 'subproject_id', new.\"subproject_id\", 'subproject_taxon_id', new.\"subproject_taxon_id\", 'taxon_id', new.\"taxon_id\"), json_object('account_id', old.\"account_id\", 'label', old.\"label\", 'subproject_id', old.\"subproject_id\", 'subproject_taxon_id', old.\"subproject_taxon_id\", 'taxon_id', old.\"taxon_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_subproject_taxa_into_oplog;",
      "CREATE TRIGGER delete_main_subproject_taxa_into_oplog\n   AFTER DELETE ON \"main\".\"subproject_taxa\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'subproject_taxa')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'subproject_taxa', 'DELETE', json_patch('{}', json_object('subproject_taxon_id', old.\"subproject_taxon_id\")), NULL, json_object('account_id', old.\"account_id\", 'label', old.\"label\", 'subproject_id', old.\"subproject_id\", 'subproject_taxon_id', old.\"subproject_taxon_id\", 'taxon_id', old.\"taxon_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_subproject_taxa_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_subproject_taxa_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"subproject_taxa\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'subproject_taxa') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_subproject_taxa_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_subproject_taxa_account_id_into_oplog\n  AFTER UPDATE ON \"main\".\"subproject_taxa\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'subproject_taxa') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_subproject_taxa_subproject_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_subproject_taxa_subproject_id_into_oplog\n  AFTER INSERT ON \"main\".\"subproject_taxa\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'subproject_taxa') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'subprojects', 'COMPENSATION', json_patch('{}', json_object('subproject_id', \"subproject_id\")), json_object('subproject_id', \"subproject_id\"), NULL, NULL\n  FROM \"main\".\"subprojects\" WHERE \"subproject_id\" = new.\"subproject_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_subproject_taxa_subproject_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_subproject_taxa_subproject_id_into_oplog\n  AFTER UPDATE ON \"main\".\"subproject_taxa\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'subproject_taxa') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'subprojects', 'COMPENSATION', json_patch('{}', json_object('subproject_id', \"subproject_id\")), json_object('subproject_id', \"subproject_id\"), NULL, NULL\n  FROM \"main\".\"subprojects\" WHERE \"subproject_id\" = new.\"subproject_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_subproject_taxa_taxon_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_subproject_taxa_taxon_id_into_oplog\n  AFTER INSERT ON \"main\".\"subproject_taxa\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'subproject_taxa') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'taxa', 'COMPENSATION', json_patch('{}', json_object('taxon_id', \"taxon_id\")), json_object('taxon_id', \"taxon_id\"), NULL, NULL\n  FROM \"main\".\"taxa\" WHERE \"taxon_id\" = new.\"taxon_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_subproject_taxa_taxon_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_subproject_taxa_taxon_id_into_oplog\n  AFTER UPDATE ON \"main\".\"subproject_taxa\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'subproject_taxa') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'taxa', 'COMPENSATION', json_patch('{}', json_object('taxon_id', \"taxon_id\")), json_object('taxon_id', \"taxon_id\"), NULL, NULL\n  FROM \"main\".\"taxa\" WHERE \"taxon_id\" = new.\"taxon_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'lists', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_lists_primarykey;",
      "CREATE TRIGGER update_ensure_main_lists_primarykey\n  BEFORE UPDATE ON \"main\".\"lists\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"list_id\" != new.\"list_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column list_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_lists_into_oplog;",
      "CREATE TRIGGER insert_main_lists_into_oplog\n   AFTER INSERT ON \"main\".\"lists\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'lists')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'lists', 'INSERT', json_patch('{}', json_object('list_id', new.\"list_id\")), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'list_id', new.\"list_id\", 'name', new.\"name\", 'obsolete', new.\"obsolete\", 'project_id', new.\"project_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_lists_into_oplog;",
      "CREATE TRIGGER update_main_lists_into_oplog\n   AFTER UPDATE ON \"main\".\"lists\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'lists')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'lists', 'UPDATE', json_patch('{}', json_object('list_id', new.\"list_id\")), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'list_id', new.\"list_id\", 'name', new.\"name\", 'obsolete', new.\"obsolete\", 'project_id', new.\"project_id\"), json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'list_id', old.\"list_id\", 'name', old.\"name\", 'obsolete', old.\"obsolete\", 'project_id', old.\"project_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_lists_into_oplog;",
      "CREATE TRIGGER delete_main_lists_into_oplog\n   AFTER DELETE ON \"main\".\"lists\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'lists')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'lists', 'DELETE', json_patch('{}', json_object('list_id', old.\"list_id\")), NULL, json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'list_id', old.\"list_id\", 'name', old.\"name\", 'obsolete', old.\"obsolete\", 'project_id', old.\"project_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_lists_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_lists_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"lists\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'lists') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_lists_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_lists_account_id_into_oplog\n  AFTER UPDATE ON \"main\".\"lists\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'lists') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_lists_project_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_lists_project_id_into_oplog\n  AFTER INSERT ON \"main\".\"lists\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'lists') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_patch('{}', json_object('project_id', \"project_id\")), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_lists_project_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_lists_project_id_into_oplog\n  AFTER UPDATE ON \"main\".\"lists\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'lists') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_patch('{}', json_object('project_id', \"project_id\")), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'list_values', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_list_values_primarykey;",
      "CREATE TRIGGER update_ensure_main_list_values_primarykey\n  BEFORE UPDATE ON \"main\".\"list_values\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"list_value_id\" != new.\"list_value_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column list_value_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_list_values_into_oplog;",
      "CREATE TRIGGER insert_main_list_values_into_oplog\n   AFTER INSERT ON \"main\".\"list_values\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'list_values')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'list_values', 'INSERT', json_patch('{}', json_object('list_value_id', new.\"list_value_id\")), json_object('account_id', new.\"account_id\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'list_id', new.\"list_id\", 'list_value_id', new.\"list_value_id\", 'obsolete', new.\"obsolete\", 'value', new.\"value\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_list_values_into_oplog;",
      "CREATE TRIGGER update_main_list_values_into_oplog\n   AFTER UPDATE ON \"main\".\"list_values\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'list_values')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'list_values', 'UPDATE', json_patch('{}', json_object('list_value_id', new.\"list_value_id\")), json_object('account_id', new.\"account_id\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'list_id', new.\"list_id\", 'list_value_id', new.\"list_value_id\", 'obsolete', new.\"obsolete\", 'value', new.\"value\"), json_object('account_id', old.\"account_id\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'list_id', old.\"list_id\", 'list_value_id', old.\"list_value_id\", 'obsolete', old.\"obsolete\", 'value', old.\"value\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_list_values_into_oplog;",
      "CREATE TRIGGER delete_main_list_values_into_oplog\n   AFTER DELETE ON \"main\".\"list_values\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'list_values')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'list_values', 'DELETE', json_patch('{}', json_object('list_value_id', old.\"list_value_id\")), NULL, json_object('account_id', old.\"account_id\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'list_id', old.\"list_id\", 'list_value_id', old.\"list_value_id\", 'obsolete', old.\"obsolete\", 'value', old.\"value\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_list_values_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_list_values_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"list_values\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'list_values') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_list_values_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_list_values_account_id_into_oplog\n  AFTER UPDATE ON \"main\".\"list_values\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'list_values') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_list_values_list_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_list_values_list_id_into_oplog\n  AFTER INSERT ON \"main\".\"list_values\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'list_values') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'lists', 'COMPENSATION', json_patch('{}', json_object('list_id', \"list_id\")), json_object('list_id', \"list_id\"), NULL, NULL\n  FROM \"main\".\"lists\" WHERE \"list_id\" = new.\"list_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_list_values_list_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_list_values_list_id_into_oplog\n  AFTER UPDATE ON \"main\".\"list_values\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'list_values') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'lists', 'COMPENSATION', json_patch('{}', json_object('list_id', \"list_id\")), json_object('list_id', \"list_id\"), NULL, NULL\n  FROM \"main\".\"lists\" WHERE \"list_id\" = new.\"list_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'units', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_units_primarykey;",
      "CREATE TRIGGER update_ensure_main_units_primarykey\n  BEFORE UPDATE ON \"main\".\"units\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"unit_id\" != new.\"unit_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column unit_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_units_into_oplog;",
      "CREATE TRIGGER insert_main_units_into_oplog\n   AFTER INSERT ON \"main\".\"units\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'units')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'units', 'INSERT', json_patch('{}', json_object('unit_id', new.\"unit_id\")), json_object('account_id', new.\"account_id\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'list_id', new.\"list_id\", 'name', new.\"name\", 'project_id', new.\"project_id\", 'sort', new.\"sort\", 'summable', new.\"summable\", 'type', new.\"type\", 'unit_id', new.\"unit_id\", 'use_for_action_report_values', new.\"use_for_action_report_values\", 'use_for_action_values', new.\"use_for_action_values\", 'use_for_check_taxa', new.\"use_for_check_taxa\", 'use_for_check_values', new.\"use_for_check_values\", 'use_for_goal_report_values', new.\"use_for_goal_report_values\", 'use_for_place_report_values', new.\"use_for_place_report_values\", 'use_for_subproject_taxa', new.\"use_for_subproject_taxa\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_units_into_oplog;",
      "CREATE TRIGGER update_main_units_into_oplog\n   AFTER UPDATE ON \"main\".\"units\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'units')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'units', 'UPDATE', json_patch('{}', json_object('unit_id', new.\"unit_id\")), json_object('account_id', new.\"account_id\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'list_id', new.\"list_id\", 'name', new.\"name\", 'project_id', new.\"project_id\", 'sort', new.\"sort\", 'summable', new.\"summable\", 'type', new.\"type\", 'unit_id', new.\"unit_id\", 'use_for_action_report_values', new.\"use_for_action_report_values\", 'use_for_action_values', new.\"use_for_action_values\", 'use_for_check_taxa', new.\"use_for_check_taxa\", 'use_for_check_values', new.\"use_for_check_values\", 'use_for_goal_report_values', new.\"use_for_goal_report_values\", 'use_for_place_report_values', new.\"use_for_place_report_values\", 'use_for_subproject_taxa', new.\"use_for_subproject_taxa\"), json_object('account_id', old.\"account_id\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'list_id', old.\"list_id\", 'name', old.\"name\", 'project_id', old.\"project_id\", 'sort', old.\"sort\", 'summable', old.\"summable\", 'type', old.\"type\", 'unit_id', old.\"unit_id\", 'use_for_action_report_values', old.\"use_for_action_report_values\", 'use_for_action_values', old.\"use_for_action_values\", 'use_for_check_taxa', old.\"use_for_check_taxa\", 'use_for_check_values', old.\"use_for_check_values\", 'use_for_goal_report_values', old.\"use_for_goal_report_values\", 'use_for_place_report_values', old.\"use_for_place_report_values\", 'use_for_subproject_taxa', old.\"use_for_subproject_taxa\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_units_into_oplog;",
      "CREATE TRIGGER delete_main_units_into_oplog\n   AFTER DELETE ON \"main\".\"units\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'units')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'units', 'DELETE', json_patch('{}', json_object('unit_id', old.\"unit_id\")), NULL, json_object('account_id', old.\"account_id\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'list_id', old.\"list_id\", 'name', old.\"name\", 'project_id', old.\"project_id\", 'sort', old.\"sort\", 'summable', old.\"summable\", 'type', old.\"type\", 'unit_id', old.\"unit_id\", 'use_for_action_report_values', old.\"use_for_action_report_values\", 'use_for_action_values', old.\"use_for_action_values\", 'use_for_check_taxa', old.\"use_for_check_taxa\", 'use_for_check_values', old.\"use_for_check_values\", 'use_for_goal_report_values', old.\"use_for_goal_report_values\", 'use_for_place_report_values', old.\"use_for_place_report_values\", 'use_for_subproject_taxa', old.\"use_for_subproject_taxa\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_units_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_units_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"units\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'units') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_units_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_units_account_id_into_oplog\n  AFTER UPDATE ON \"main\".\"units\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'units') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_units_list_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_units_list_id_into_oplog\n  AFTER INSERT ON \"main\".\"units\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'units') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'lists', 'COMPENSATION', json_patch('{}', json_object('list_id', \"list_id\")), json_object('list_id', \"list_id\"), NULL, NULL\n  FROM \"main\".\"lists\" WHERE \"list_id\" = new.\"list_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_units_list_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_units_list_id_into_oplog\n  AFTER UPDATE ON \"main\".\"units\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'units') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'lists', 'COMPENSATION', json_patch('{}', json_object('list_id', \"list_id\")), json_object('list_id', \"list_id\"), NULL, NULL\n  FROM \"main\".\"lists\" WHERE \"list_id\" = new.\"list_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_units_project_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_units_project_id_into_oplog\n  AFTER INSERT ON \"main\".\"units\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'units') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_patch('{}', json_object('project_id', \"project_id\")), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_units_project_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_units_project_id_into_oplog\n  AFTER UPDATE ON \"main\".\"units\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'units') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_patch('{}', json_object('project_id', \"project_id\")), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'places', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_places_primarykey;",
      "CREATE TRIGGER update_ensure_main_places_primarykey\n  BEFORE UPDATE ON \"main\".\"places\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"place_id\" != new.\"place_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column place_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_places_into_oplog;",
      "CREATE TRIGGER insert_main_places_into_oplog\n   AFTER INSERT ON \"main\".\"places\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'places')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'places', 'INSERT', json_patch('{}', json_object('place_id', new.\"place_id\")), json_object('account_id', new.\"account_id\", 'bbox', new.\"bbox\", 'data', new.\"data\", 'files_active_places', new.\"files_active_places\", 'geometry', new.\"geometry\", 'label', new.\"label\", 'level', new.\"level\", 'parent_id', new.\"parent_id\", 'place_id', new.\"place_id\", 'since', new.\"since\", 'subproject_id', new.\"subproject_id\", 'until', new.\"until\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_places_into_oplog;",
      "CREATE TRIGGER update_main_places_into_oplog\n   AFTER UPDATE ON \"main\".\"places\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'places')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'places', 'UPDATE', json_patch('{}', json_object('place_id', new.\"place_id\")), json_object('account_id', new.\"account_id\", 'bbox', new.\"bbox\", 'data', new.\"data\", 'files_active_places', new.\"files_active_places\", 'geometry', new.\"geometry\", 'label', new.\"label\", 'level', new.\"level\", 'parent_id', new.\"parent_id\", 'place_id', new.\"place_id\", 'since', new.\"since\", 'subproject_id', new.\"subproject_id\", 'until', new.\"until\"), json_object('account_id', old.\"account_id\", 'bbox', old.\"bbox\", 'data', old.\"data\", 'files_active_places', old.\"files_active_places\", 'geometry', old.\"geometry\", 'label', old.\"label\", 'level', old.\"level\", 'parent_id', old.\"parent_id\", 'place_id', old.\"place_id\", 'since', old.\"since\", 'subproject_id', old.\"subproject_id\", 'until', old.\"until\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_places_into_oplog;",
      "CREATE TRIGGER delete_main_places_into_oplog\n   AFTER DELETE ON \"main\".\"places\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'places')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'places', 'DELETE', json_patch('{}', json_object('place_id', old.\"place_id\")), NULL, json_object('account_id', old.\"account_id\", 'bbox', old.\"bbox\", 'data', old.\"data\", 'files_active_places', old.\"files_active_places\", 'geometry', old.\"geometry\", 'label', old.\"label\", 'level', old.\"level\", 'parent_id', old.\"parent_id\", 'place_id', old.\"place_id\", 'since', old.\"since\", 'subproject_id', old.\"subproject_id\", 'until', old.\"until\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_places_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_places_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"places\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'places') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_places_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_places_account_id_into_oplog\n  AFTER UPDATE ON \"main\".\"places\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'places') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_places_parent_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_places_parent_id_into_oplog\n  AFTER INSERT ON \"main\".\"places\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'places') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'places', 'COMPENSATION', json_patch('{}', json_object('place_id', \"place_id\")), json_object('place_id', \"place_id\"), NULL, NULL\n  FROM \"main\".\"places\" WHERE \"place_id\" = new.\"parent_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_places_parent_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_places_parent_id_into_oplog\n  AFTER UPDATE ON \"main\".\"places\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'places') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'places', 'COMPENSATION', json_patch('{}', json_object('place_id', \"place_id\")), json_object('place_id', \"place_id\"), NULL, NULL\n  FROM \"main\".\"places\" WHERE \"place_id\" = new.\"parent_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_places_subproject_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_places_subproject_id_into_oplog\n  AFTER INSERT ON \"main\".\"places\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'places') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'subprojects', 'COMPENSATION', json_patch('{}', json_object('subproject_id', \"subproject_id\")), json_object('subproject_id', \"subproject_id\"), NULL, NULL\n  FROM \"main\".\"subprojects\" WHERE \"subproject_id\" = new.\"subproject_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_places_subproject_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_places_subproject_id_into_oplog\n  AFTER UPDATE ON \"main\".\"places\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'places') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'subprojects', 'COMPENSATION', json_patch('{}', json_object('subproject_id', \"subproject_id\")), json_object('subproject_id', \"subproject_id\"), NULL, NULL\n  FROM \"main\".\"subprojects\" WHERE \"subproject_id\" = new.\"subproject_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'actions', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_actions_primarykey;",
      "CREATE TRIGGER update_ensure_main_actions_primarykey\n  BEFORE UPDATE ON \"main\".\"actions\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"action_id\" != new.\"action_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column action_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_actions_into_oplog;",
      "CREATE TRIGGER insert_main_actions_into_oplog\n   AFTER INSERT ON \"main\".\"actions\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'actions')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'actions', 'INSERT', json_patch('{}', json_object('action_id', new.\"action_id\")), json_object('account_id', new.\"account_id\", 'action_id', new.\"action_id\", 'bbox', new.\"bbox\", 'data', new.\"data\", 'date', new.\"date\", 'geometry', new.\"geometry\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'place_id', new.\"place_id\", 'relevant_for_reports', new.\"relevant_for_reports\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_actions_into_oplog;",
      "CREATE TRIGGER update_main_actions_into_oplog\n   AFTER UPDATE ON \"main\".\"actions\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'actions')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'actions', 'UPDATE', json_patch('{}', json_object('action_id', new.\"action_id\")), json_object('account_id', new.\"account_id\", 'action_id', new.\"action_id\", 'bbox', new.\"bbox\", 'data', new.\"data\", 'date', new.\"date\", 'geometry', new.\"geometry\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'place_id', new.\"place_id\", 'relevant_for_reports', new.\"relevant_for_reports\"), json_object('account_id', old.\"account_id\", 'action_id', old.\"action_id\", 'bbox', old.\"bbox\", 'data', old.\"data\", 'date', old.\"date\", 'geometry', old.\"geometry\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'place_id', old.\"place_id\", 'relevant_for_reports', old.\"relevant_for_reports\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_actions_into_oplog;",
      "CREATE TRIGGER delete_main_actions_into_oplog\n   AFTER DELETE ON \"main\".\"actions\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'actions')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'actions', 'DELETE', json_patch('{}', json_object('action_id', old.\"action_id\")), NULL, json_object('account_id', old.\"account_id\", 'action_id', old.\"action_id\", 'bbox', old.\"bbox\", 'data', old.\"data\", 'date', old.\"date\", 'geometry', old.\"geometry\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'place_id', old.\"place_id\", 'relevant_for_reports', old.\"relevant_for_reports\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_actions_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_actions_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"actions\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'actions') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_actions_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_actions_account_id_into_oplog\n  AFTER UPDATE ON \"main\".\"actions\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'actions') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_actions_place_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_actions_place_id_into_oplog\n  AFTER INSERT ON \"main\".\"actions\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'actions') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'places', 'COMPENSATION', json_patch('{}', json_object('place_id', \"place_id\")), json_object('place_id', \"place_id\"), NULL, NULL\n  FROM \"main\".\"places\" WHERE \"place_id\" = new.\"place_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_actions_place_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_actions_place_id_into_oplog\n  AFTER UPDATE ON \"main\".\"actions\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'actions') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'places', 'COMPENSATION', json_patch('{}', json_object('place_id', \"place_id\")), json_object('place_id', \"place_id\"), NULL, NULL\n  FROM \"main\".\"places\" WHERE \"place_id\" = new.\"place_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'action_values', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_action_values_primarykey;",
      "CREATE TRIGGER update_ensure_main_action_values_primarykey\n  BEFORE UPDATE ON \"main\".\"action_values\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"action_value_id\" != new.\"action_value_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column action_value_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_action_values_into_oplog;",
      "CREATE TRIGGER insert_main_action_values_into_oplog\n   AFTER INSERT ON \"main\".\"action_values\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'action_values')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'action_values', 'INSERT', json_patch('{}', json_object('action_value_id', new.\"action_value_id\")), json_object('account_id', new.\"account_id\", 'action_id', new.\"action_id\", 'action_value_id', new.\"action_value_id\", 'label', new.\"label\", 'unit_id', new.\"unit_id\", 'value_integer', new.\"value_integer\", 'value_numeric', cast(new.\"value_numeric\" as TEXT), 'value_text', new.\"value_text\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_action_values_into_oplog;",
      "CREATE TRIGGER update_main_action_values_into_oplog\n   AFTER UPDATE ON \"main\".\"action_values\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'action_values')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'action_values', 'UPDATE', json_patch('{}', json_object('action_value_id', new.\"action_value_id\")), json_object('account_id', new.\"account_id\", 'action_id', new.\"action_id\", 'action_value_id', new.\"action_value_id\", 'label', new.\"label\", 'unit_id', new.\"unit_id\", 'value_integer', new.\"value_integer\", 'value_numeric', cast(new.\"value_numeric\" as TEXT), 'value_text', new.\"value_text\"), json_object('account_id', old.\"account_id\", 'action_id', old.\"action_id\", 'action_value_id', old.\"action_value_id\", 'label', old.\"label\", 'unit_id', old.\"unit_id\", 'value_integer', old.\"value_integer\", 'value_numeric', cast(old.\"value_numeric\" as TEXT), 'value_text', old.\"value_text\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_action_values_into_oplog;",
      "CREATE TRIGGER delete_main_action_values_into_oplog\n   AFTER DELETE ON \"main\".\"action_values\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'action_values')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'action_values', 'DELETE', json_patch('{}', json_object('action_value_id', old.\"action_value_id\")), NULL, json_object('account_id', old.\"account_id\", 'action_id', old.\"action_id\", 'action_value_id', old.\"action_value_id\", 'label', old.\"label\", 'unit_id', old.\"unit_id\", 'value_integer', old.\"value_integer\", 'value_numeric', cast(old.\"value_numeric\" as TEXT), 'value_text', old.\"value_text\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_action_values_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_action_values_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"action_values\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'action_values') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_action_values_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_action_values_account_id_into_oplog\n  AFTER UPDATE ON \"main\".\"action_values\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'action_values') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_action_values_action_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_action_values_action_id_into_oplog\n  AFTER INSERT ON \"main\".\"action_values\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'action_values') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'actions', 'COMPENSATION', json_patch('{}', json_object('action_id', \"action_id\")), json_object('action_id', \"action_id\"), NULL, NULL\n  FROM \"main\".\"actions\" WHERE \"action_id\" = new.\"action_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_action_values_action_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_action_values_action_id_into_oplog\n  AFTER UPDATE ON \"main\".\"action_values\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'action_values') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'actions', 'COMPENSATION', json_patch('{}', json_object('action_id', \"action_id\")), json_object('action_id', \"action_id\"), NULL, NULL\n  FROM \"main\".\"actions\" WHERE \"action_id\" = new.\"action_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_action_values_unit_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_action_values_unit_id_into_oplog\n  AFTER INSERT ON \"main\".\"action_values\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'action_values') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'units', 'COMPENSATION', json_patch('{}', json_object('unit_id', \"unit_id\")), json_object('unit_id', \"unit_id\"), NULL, NULL\n  FROM \"main\".\"units\" WHERE \"unit_id\" = new.\"unit_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_action_values_unit_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_action_values_unit_id_into_oplog\n  AFTER UPDATE ON \"main\".\"action_values\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'action_values') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'units', 'COMPENSATION', json_patch('{}', json_object('unit_id', \"unit_id\")), json_object('unit_id', \"unit_id\"), NULL, NULL\n  FROM \"main\".\"units\" WHERE \"unit_id\" = new.\"unit_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'action_reports', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_action_reports_primarykey;",
      "CREATE TRIGGER update_ensure_main_action_reports_primarykey\n  BEFORE UPDATE ON \"main\".\"action_reports\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"action_report_id\" != new.\"action_report_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column action_report_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_action_reports_into_oplog;",
      "CREATE TRIGGER insert_main_action_reports_into_oplog\n   AFTER INSERT ON \"main\".\"action_reports\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'action_reports')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'action_reports', 'INSERT', json_patch('{}', json_object('action_report_id', new.\"action_report_id\")), json_object('account_id', new.\"account_id\", 'action_id', new.\"action_id\", 'action_report_id', new.\"action_report_id\", 'data', new.\"data\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'year', new.\"year\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_action_reports_into_oplog;",
      "CREATE TRIGGER update_main_action_reports_into_oplog\n   AFTER UPDATE ON \"main\".\"action_reports\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'action_reports')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'action_reports', 'UPDATE', json_patch('{}', json_object('action_report_id', new.\"action_report_id\")), json_object('account_id', new.\"account_id\", 'action_id', new.\"action_id\", 'action_report_id', new.\"action_report_id\", 'data', new.\"data\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'year', new.\"year\"), json_object('account_id', old.\"account_id\", 'action_id', old.\"action_id\", 'action_report_id', old.\"action_report_id\", 'data', old.\"data\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'year', old.\"year\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_action_reports_into_oplog;",
      "CREATE TRIGGER delete_main_action_reports_into_oplog\n   AFTER DELETE ON \"main\".\"action_reports\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'action_reports')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'action_reports', 'DELETE', json_patch('{}', json_object('action_report_id', old.\"action_report_id\")), NULL, json_object('account_id', old.\"account_id\", 'action_id', old.\"action_id\", 'action_report_id', old.\"action_report_id\", 'data', old.\"data\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'year', old.\"year\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_action_reports_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_action_reports_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"action_reports\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'action_reports') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_action_reports_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_action_reports_account_id_into_oplog\n  AFTER UPDATE ON \"main\".\"action_reports\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'action_reports') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_action_reports_action_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_action_reports_action_id_into_oplog\n  AFTER INSERT ON \"main\".\"action_reports\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'action_reports') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'actions', 'COMPENSATION', json_patch('{}', json_object('action_id', \"action_id\")), json_object('action_id', \"action_id\"), NULL, NULL\n  FROM \"main\".\"actions\" WHERE \"action_id\" = new.\"action_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_action_reports_action_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_action_reports_action_id_into_oplog\n  AFTER UPDATE ON \"main\".\"action_reports\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'action_reports') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'actions', 'COMPENSATION', json_patch('{}', json_object('action_id', \"action_id\")), json_object('action_id', \"action_id\"), NULL, NULL\n  FROM \"main\".\"actions\" WHERE \"action_id\" = new.\"action_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'action_report_values', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_action_report_values_primarykey;",
      "CREATE TRIGGER update_ensure_main_action_report_values_primarykey\n  BEFORE UPDATE ON \"main\".\"action_report_values\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"action_report_value_id\" != new.\"action_report_value_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column action_report_value_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_action_report_values_into_oplog;",
      "CREATE TRIGGER insert_main_action_report_values_into_oplog\n   AFTER INSERT ON \"main\".\"action_report_values\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'action_report_values')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'action_report_values', 'INSERT', json_patch('{}', json_object('action_report_value_id', new.\"action_report_value_id\")), json_object('account_id', new.\"account_id\", 'action_report_id', new.\"action_report_id\", 'action_report_value_id', new.\"action_report_value_id\", 'label', new.\"label\", 'unit_id', new.\"unit_id\", 'value_integer', new.\"value_integer\", 'value_numeric', cast(new.\"value_numeric\" as TEXT), 'value_text', new.\"value_text\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_action_report_values_into_oplog;",
      "CREATE TRIGGER update_main_action_report_values_into_oplog\n   AFTER UPDATE ON \"main\".\"action_report_values\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'action_report_values')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'action_report_values', 'UPDATE', json_patch('{}', json_object('action_report_value_id', new.\"action_report_value_id\")), json_object('account_id', new.\"account_id\", 'action_report_id', new.\"action_report_id\", 'action_report_value_id', new.\"action_report_value_id\", 'label', new.\"label\", 'unit_id', new.\"unit_id\", 'value_integer', new.\"value_integer\", 'value_numeric', cast(new.\"value_numeric\" as TEXT), 'value_text', new.\"value_text\"), json_object('account_id', old.\"account_id\", 'action_report_id', old.\"action_report_id\", 'action_report_value_id', old.\"action_report_value_id\", 'label', old.\"label\", 'unit_id', old.\"unit_id\", 'value_integer', old.\"value_integer\", 'value_numeric', cast(old.\"value_numeric\" as TEXT), 'value_text', old.\"value_text\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_action_report_values_into_oplog;",
      "CREATE TRIGGER delete_main_action_report_values_into_oplog\n   AFTER DELETE ON \"main\".\"action_report_values\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'action_report_values')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'action_report_values', 'DELETE', json_patch('{}', json_object('action_report_value_id', old.\"action_report_value_id\")), NULL, json_object('account_id', old.\"account_id\", 'action_report_id', old.\"action_report_id\", 'action_report_value_id', old.\"action_report_value_id\", 'label', old.\"label\", 'unit_id', old.\"unit_id\", 'value_integer', old.\"value_integer\", 'value_numeric', cast(old.\"value_numeric\" as TEXT), 'value_text', old.\"value_text\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_action_report_values_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_action_report_values_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"action_report_values\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'action_report_values') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_action_report_values_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_action_report_values_account_id_into_oplog\n  AFTER UPDATE ON \"main\".\"action_report_values\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'action_report_values') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_action_report_values_action_report_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_action_report_values_action_report_id_into_oplog\n  AFTER INSERT ON \"main\".\"action_report_values\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'action_report_values') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'action_reports', 'COMPENSATION', json_patch('{}', json_object('action_report_id', \"action_report_id\")), json_object('action_report_id', \"action_report_id\"), NULL, NULL\n  FROM \"main\".\"action_reports\" WHERE \"action_report_id\" = new.\"action_report_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_action_report_values_action_report_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_action_report_values_action_report_id_into_oplog\n  AFTER UPDATE ON \"main\".\"action_report_values\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'action_report_values') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'action_reports', 'COMPENSATION', json_patch('{}', json_object('action_report_id', \"action_report_id\")), json_object('action_report_id', \"action_report_id\"), NULL, NULL\n  FROM \"main\".\"action_reports\" WHERE \"action_report_id\" = new.\"action_report_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_action_report_values_unit_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_action_report_values_unit_id_into_oplog\n  AFTER INSERT ON \"main\".\"action_report_values\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'action_report_values') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'units', 'COMPENSATION', json_patch('{}', json_object('unit_id', \"unit_id\")), json_object('unit_id', \"unit_id\"), NULL, NULL\n  FROM \"main\".\"units\" WHERE \"unit_id\" = new.\"unit_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_action_report_values_unit_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_action_report_values_unit_id_into_oplog\n  AFTER UPDATE ON \"main\".\"action_report_values\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'action_report_values') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'units', 'COMPENSATION', json_patch('{}', json_object('unit_id', \"unit_id\")), json_object('unit_id', \"unit_id\"), NULL, NULL\n  FROM \"main\".\"units\" WHERE \"unit_id\" = new.\"unit_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'checks', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_checks_primarykey;",
      "CREATE TRIGGER update_ensure_main_checks_primarykey\n  BEFORE UPDATE ON \"main\".\"checks\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"check_id\" != new.\"check_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column check_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_checks_into_oplog;",
      "CREATE TRIGGER insert_main_checks_into_oplog\n   AFTER INSERT ON \"main\".\"checks\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'checks')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'checks', 'INSERT', json_patch('{}', json_object('check_id', new.\"check_id\")), json_object('account_id', new.\"account_id\", 'bbox', new.\"bbox\", 'check_id', new.\"check_id\", 'data', new.\"data\", 'date', new.\"date\", 'geometry', new.\"geometry\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'place_id', new.\"place_id\", 'relevant_for_reports', new.\"relevant_for_reports\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_checks_into_oplog;",
      "CREATE TRIGGER update_main_checks_into_oplog\n   AFTER UPDATE ON \"main\".\"checks\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'checks')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'checks', 'UPDATE', json_patch('{}', json_object('check_id', new.\"check_id\")), json_object('account_id', new.\"account_id\", 'bbox', new.\"bbox\", 'check_id', new.\"check_id\", 'data', new.\"data\", 'date', new.\"date\", 'geometry', new.\"geometry\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'place_id', new.\"place_id\", 'relevant_for_reports', new.\"relevant_for_reports\"), json_object('account_id', old.\"account_id\", 'bbox', old.\"bbox\", 'check_id', old.\"check_id\", 'data', old.\"data\", 'date', old.\"date\", 'geometry', old.\"geometry\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'place_id', old.\"place_id\", 'relevant_for_reports', old.\"relevant_for_reports\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_checks_into_oplog;",
      "CREATE TRIGGER delete_main_checks_into_oplog\n   AFTER DELETE ON \"main\".\"checks\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'checks')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'checks', 'DELETE', json_patch('{}', json_object('check_id', old.\"check_id\")), NULL, json_object('account_id', old.\"account_id\", 'bbox', old.\"bbox\", 'check_id', old.\"check_id\", 'data', old.\"data\", 'date', old.\"date\", 'geometry', old.\"geometry\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'place_id', old.\"place_id\", 'relevant_for_reports', old.\"relevant_for_reports\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_checks_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_checks_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"checks\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'checks') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_checks_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_checks_account_id_into_oplog\n  AFTER UPDATE ON \"main\".\"checks\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'checks') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_checks_place_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_checks_place_id_into_oplog\n  AFTER INSERT ON \"main\".\"checks\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'checks') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'places', 'COMPENSATION', json_patch('{}', json_object('place_id', \"place_id\")), json_object('place_id', \"place_id\"), NULL, NULL\n  FROM \"main\".\"places\" WHERE \"place_id\" = new.\"place_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_checks_place_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_checks_place_id_into_oplog\n  AFTER UPDATE ON \"main\".\"checks\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'checks') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'places', 'COMPENSATION', json_patch('{}', json_object('place_id', \"place_id\")), json_object('place_id', \"place_id\"), NULL, NULL\n  FROM \"main\".\"places\" WHERE \"place_id\" = new.\"place_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'check_values', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_check_values_primarykey;",
      "CREATE TRIGGER update_ensure_main_check_values_primarykey\n  BEFORE UPDATE ON \"main\".\"check_values\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"check_value_id\" != new.\"check_value_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column check_value_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_check_values_into_oplog;",
      "CREATE TRIGGER insert_main_check_values_into_oplog\n   AFTER INSERT ON \"main\".\"check_values\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'check_values')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'check_values', 'INSERT', json_patch('{}', json_object('check_value_id', new.\"check_value_id\")), json_object('account_id', new.\"account_id\", 'check_id', new.\"check_id\", 'check_value_id', new.\"check_value_id\", 'label', new.\"label\", 'unit_id', new.\"unit_id\", 'value_integer', new.\"value_integer\", 'value_numeric', cast(new.\"value_numeric\" as TEXT), 'value_text', new.\"value_text\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_check_values_into_oplog;",
      "CREATE TRIGGER update_main_check_values_into_oplog\n   AFTER UPDATE ON \"main\".\"check_values\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'check_values')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'check_values', 'UPDATE', json_patch('{}', json_object('check_value_id', new.\"check_value_id\")), json_object('account_id', new.\"account_id\", 'check_id', new.\"check_id\", 'check_value_id', new.\"check_value_id\", 'label', new.\"label\", 'unit_id', new.\"unit_id\", 'value_integer', new.\"value_integer\", 'value_numeric', cast(new.\"value_numeric\" as TEXT), 'value_text', new.\"value_text\"), json_object('account_id', old.\"account_id\", 'check_id', old.\"check_id\", 'check_value_id', old.\"check_value_id\", 'label', old.\"label\", 'unit_id', old.\"unit_id\", 'value_integer', old.\"value_integer\", 'value_numeric', cast(old.\"value_numeric\" as TEXT), 'value_text', old.\"value_text\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_check_values_into_oplog;",
      "CREATE TRIGGER delete_main_check_values_into_oplog\n   AFTER DELETE ON \"main\".\"check_values\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'check_values')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'check_values', 'DELETE', json_patch('{}', json_object('check_value_id', old.\"check_value_id\")), NULL, json_object('account_id', old.\"account_id\", 'check_id', old.\"check_id\", 'check_value_id', old.\"check_value_id\", 'label', old.\"label\", 'unit_id', old.\"unit_id\", 'value_integer', old.\"value_integer\", 'value_numeric', cast(old.\"value_numeric\" as TEXT), 'value_text', old.\"value_text\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_check_values_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_check_values_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"check_values\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'check_values') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_check_values_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_check_values_account_id_into_oplog\n  AFTER UPDATE ON \"main\".\"check_values\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'check_values') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_check_values_check_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_check_values_check_id_into_oplog\n  AFTER INSERT ON \"main\".\"check_values\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'check_values') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'checks', 'COMPENSATION', json_patch('{}', json_object('check_id', \"check_id\")), json_object('check_id', \"check_id\"), NULL, NULL\n  FROM \"main\".\"checks\" WHERE \"check_id\" = new.\"check_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_check_values_check_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_check_values_check_id_into_oplog\n  AFTER UPDATE ON \"main\".\"check_values\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'check_values') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'checks', 'COMPENSATION', json_patch('{}', json_object('check_id', \"check_id\")), json_object('check_id', \"check_id\"), NULL, NULL\n  FROM \"main\".\"checks\" WHERE \"check_id\" = new.\"check_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_check_values_unit_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_check_values_unit_id_into_oplog\n  AFTER INSERT ON \"main\".\"check_values\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'check_values') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'units', 'COMPENSATION', json_patch('{}', json_object('unit_id', \"unit_id\")), json_object('unit_id', \"unit_id\"), NULL, NULL\n  FROM \"main\".\"units\" WHERE \"unit_id\" = new.\"unit_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_check_values_unit_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_check_values_unit_id_into_oplog\n  AFTER UPDATE ON \"main\".\"check_values\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'check_values') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'units', 'COMPENSATION', json_patch('{}', json_object('unit_id', \"unit_id\")), json_object('unit_id', \"unit_id\"), NULL, NULL\n  FROM \"main\".\"units\" WHERE \"unit_id\" = new.\"unit_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'check_taxa', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_check_taxa_primarykey;",
      "CREATE TRIGGER update_ensure_main_check_taxa_primarykey\n  BEFORE UPDATE ON \"main\".\"check_taxa\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"check_taxon_id\" != new.\"check_taxon_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column check_taxon_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_check_taxa_into_oplog;",
      "CREATE TRIGGER insert_main_check_taxa_into_oplog\n   AFTER INSERT ON \"main\".\"check_taxa\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'check_taxa')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'check_taxa', 'INSERT', json_patch('{}', json_object('check_taxon_id', new.\"check_taxon_id\")), json_object('account_id', new.\"account_id\", 'check_id', new.\"check_id\", 'check_taxon_id', new.\"check_taxon_id\", 'label', new.\"label\", 'taxon_id', new.\"taxon_id\", 'unit_id', new.\"unit_id\", 'value_integer', new.\"value_integer\", 'value_numeric', cast(new.\"value_numeric\" as TEXT), 'value_text', new.\"value_text\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_check_taxa_into_oplog;",
      "CREATE TRIGGER update_main_check_taxa_into_oplog\n   AFTER UPDATE ON \"main\".\"check_taxa\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'check_taxa')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'check_taxa', 'UPDATE', json_patch('{}', json_object('check_taxon_id', new.\"check_taxon_id\")), json_object('account_id', new.\"account_id\", 'check_id', new.\"check_id\", 'check_taxon_id', new.\"check_taxon_id\", 'label', new.\"label\", 'taxon_id', new.\"taxon_id\", 'unit_id', new.\"unit_id\", 'value_integer', new.\"value_integer\", 'value_numeric', cast(new.\"value_numeric\" as TEXT), 'value_text', new.\"value_text\"), json_object('account_id', old.\"account_id\", 'check_id', old.\"check_id\", 'check_taxon_id', old.\"check_taxon_id\", 'label', old.\"label\", 'taxon_id', old.\"taxon_id\", 'unit_id', old.\"unit_id\", 'value_integer', old.\"value_integer\", 'value_numeric', cast(old.\"value_numeric\" as TEXT), 'value_text', old.\"value_text\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_check_taxa_into_oplog;",
      "CREATE TRIGGER delete_main_check_taxa_into_oplog\n   AFTER DELETE ON \"main\".\"check_taxa\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'check_taxa')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'check_taxa', 'DELETE', json_patch('{}', json_object('check_taxon_id', old.\"check_taxon_id\")), NULL, json_object('account_id', old.\"account_id\", 'check_id', old.\"check_id\", 'check_taxon_id', old.\"check_taxon_id\", 'label', old.\"label\", 'taxon_id', old.\"taxon_id\", 'unit_id', old.\"unit_id\", 'value_integer', old.\"value_integer\", 'value_numeric', cast(old.\"value_numeric\" as TEXT), 'value_text', old.\"value_text\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_check_taxa_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_check_taxa_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"check_taxa\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'check_taxa') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_check_taxa_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_check_taxa_account_id_into_oplog\n  AFTER UPDATE ON \"main\".\"check_taxa\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'check_taxa') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_check_taxa_check_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_check_taxa_check_id_into_oplog\n  AFTER INSERT ON \"main\".\"check_taxa\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'check_taxa') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'checks', 'COMPENSATION', json_patch('{}', json_object('check_id', \"check_id\")), json_object('check_id', \"check_id\"), NULL, NULL\n  FROM \"main\".\"checks\" WHERE \"check_id\" = new.\"check_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_check_taxa_check_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_check_taxa_check_id_into_oplog\n  AFTER UPDATE ON \"main\".\"check_taxa\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'check_taxa') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'checks', 'COMPENSATION', json_patch('{}', json_object('check_id', \"check_id\")), json_object('check_id', \"check_id\"), NULL, NULL\n  FROM \"main\".\"checks\" WHERE \"check_id\" = new.\"check_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_check_taxa_taxon_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_check_taxa_taxon_id_into_oplog\n  AFTER INSERT ON \"main\".\"check_taxa\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'check_taxa') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'taxa', 'COMPENSATION', json_patch('{}', json_object('taxon_id', \"taxon_id\")), json_object('taxon_id', \"taxon_id\"), NULL, NULL\n  FROM \"main\".\"taxa\" WHERE \"taxon_id\" = new.\"taxon_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_check_taxa_taxon_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_check_taxa_taxon_id_into_oplog\n  AFTER UPDATE ON \"main\".\"check_taxa\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'check_taxa') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'taxa', 'COMPENSATION', json_patch('{}', json_object('taxon_id', \"taxon_id\")), json_object('taxon_id', \"taxon_id\"), NULL, NULL\n  FROM \"main\".\"taxa\" WHERE \"taxon_id\" = new.\"taxon_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_check_taxa_unit_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_check_taxa_unit_id_into_oplog\n  AFTER INSERT ON \"main\".\"check_taxa\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'check_taxa') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'units', 'COMPENSATION', json_patch('{}', json_object('unit_id', \"unit_id\")), json_object('unit_id', \"unit_id\"), NULL, NULL\n  FROM \"main\".\"units\" WHERE \"unit_id\" = new.\"unit_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_check_taxa_unit_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_check_taxa_unit_id_into_oplog\n  AFTER UPDATE ON \"main\".\"check_taxa\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'check_taxa') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'units', 'COMPENSATION', json_patch('{}', json_object('unit_id', \"unit_id\")), json_object('unit_id', \"unit_id\"), NULL, NULL\n  FROM \"main\".\"units\" WHERE \"unit_id\" = new.\"unit_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'place_reports', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_place_reports_primarykey;",
      "CREATE TRIGGER update_ensure_main_place_reports_primarykey\n  BEFORE UPDATE ON \"main\".\"place_reports\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"place_report_id\" != new.\"place_report_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column place_report_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_place_reports_into_oplog;",
      "CREATE TRIGGER insert_main_place_reports_into_oplog\n   AFTER INSERT ON \"main\".\"place_reports\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'place_reports')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'place_reports', 'INSERT', json_patch('{}', json_object('place_report_id', new.\"place_report_id\")), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'place_id', new.\"place_id\", 'place_report_id', new.\"place_report_id\", 'year', new.\"year\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_place_reports_into_oplog;",
      "CREATE TRIGGER update_main_place_reports_into_oplog\n   AFTER UPDATE ON \"main\".\"place_reports\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'place_reports')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'place_reports', 'UPDATE', json_patch('{}', json_object('place_report_id', new.\"place_report_id\")), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'place_id', new.\"place_id\", 'place_report_id', new.\"place_report_id\", 'year', new.\"year\"), json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'place_id', old.\"place_id\", 'place_report_id', old.\"place_report_id\", 'year', old.\"year\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_place_reports_into_oplog;",
      "CREATE TRIGGER delete_main_place_reports_into_oplog\n   AFTER DELETE ON \"main\".\"place_reports\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'place_reports')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'place_reports', 'DELETE', json_patch('{}', json_object('place_report_id', old.\"place_report_id\")), NULL, json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'place_id', old.\"place_id\", 'place_report_id', old.\"place_report_id\", 'year', old.\"year\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_place_reports_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_place_reports_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"place_reports\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'place_reports') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_place_reports_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_place_reports_account_id_into_oplog\n  AFTER UPDATE ON \"main\".\"place_reports\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'place_reports') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_place_reports_place_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_place_reports_place_id_into_oplog\n  AFTER INSERT ON \"main\".\"place_reports\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'place_reports') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'places', 'COMPENSATION', json_patch('{}', json_object('place_id', \"place_id\")), json_object('place_id', \"place_id\"), NULL, NULL\n  FROM \"main\".\"places\" WHERE \"place_id\" = new.\"place_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_place_reports_place_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_place_reports_place_id_into_oplog\n  AFTER UPDATE ON \"main\".\"place_reports\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'place_reports') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'places', 'COMPENSATION', json_patch('{}', json_object('place_id', \"place_id\")), json_object('place_id', \"place_id\"), NULL, NULL\n  FROM \"main\".\"places\" WHERE \"place_id\" = new.\"place_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'place_report_values', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_place_report_values_primarykey;",
      "CREATE TRIGGER update_ensure_main_place_report_values_primarykey\n  BEFORE UPDATE ON \"main\".\"place_report_values\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"place_report_value_id\" != new.\"place_report_value_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column place_report_value_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_place_report_values_into_oplog;",
      "CREATE TRIGGER insert_main_place_report_values_into_oplog\n   AFTER INSERT ON \"main\".\"place_report_values\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'place_report_values')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'place_report_values', 'INSERT', json_patch('{}', json_object('place_report_value_id', new.\"place_report_value_id\")), json_object('account_id', new.\"account_id\", 'label', new.\"label\", 'place_report_id', new.\"place_report_id\", 'place_report_value_id', new.\"place_report_value_id\", 'unit_id', new.\"unit_id\", 'value_integer', new.\"value_integer\", 'value_numeric', cast(new.\"value_numeric\" as TEXT), 'value_text', new.\"value_text\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_place_report_values_into_oplog;",
      "CREATE TRIGGER update_main_place_report_values_into_oplog\n   AFTER UPDATE ON \"main\".\"place_report_values\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'place_report_values')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'place_report_values', 'UPDATE', json_patch('{}', json_object('place_report_value_id', new.\"place_report_value_id\")), json_object('account_id', new.\"account_id\", 'label', new.\"label\", 'place_report_id', new.\"place_report_id\", 'place_report_value_id', new.\"place_report_value_id\", 'unit_id', new.\"unit_id\", 'value_integer', new.\"value_integer\", 'value_numeric', cast(new.\"value_numeric\" as TEXT), 'value_text', new.\"value_text\"), json_object('account_id', old.\"account_id\", 'label', old.\"label\", 'place_report_id', old.\"place_report_id\", 'place_report_value_id', old.\"place_report_value_id\", 'unit_id', old.\"unit_id\", 'value_integer', old.\"value_integer\", 'value_numeric', cast(old.\"value_numeric\" as TEXT), 'value_text', old.\"value_text\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_place_report_values_into_oplog;",
      "CREATE TRIGGER delete_main_place_report_values_into_oplog\n   AFTER DELETE ON \"main\".\"place_report_values\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'place_report_values')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'place_report_values', 'DELETE', json_patch('{}', json_object('place_report_value_id', old.\"place_report_value_id\")), NULL, json_object('account_id', old.\"account_id\", 'label', old.\"label\", 'place_report_id', old.\"place_report_id\", 'place_report_value_id', old.\"place_report_value_id\", 'unit_id', old.\"unit_id\", 'value_integer', old.\"value_integer\", 'value_numeric', cast(old.\"value_numeric\" as TEXT), 'value_text', old.\"value_text\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_place_report_values_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_place_report_values_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"place_report_values\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'place_report_values') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_place_report_values_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_place_report_values_account_id_into_oplog\n  AFTER UPDATE ON \"main\".\"place_report_values\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'place_report_values') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_place_report_values_place_report_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_place_report_values_place_report_id_into_oplog\n  AFTER INSERT ON \"main\".\"place_report_values\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'place_report_values') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'place_reports', 'COMPENSATION', json_patch('{}', json_object('place_report_id', \"place_report_id\")), json_object('place_report_id', \"place_report_id\"), NULL, NULL\n  FROM \"main\".\"place_reports\" WHERE \"place_report_id\" = new.\"place_report_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_place_report_values_place_report_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_place_report_values_place_report_id_into_oplog\n  AFTER UPDATE ON \"main\".\"place_report_values\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'place_report_values') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'place_reports', 'COMPENSATION', json_patch('{}', json_object('place_report_id', \"place_report_id\")), json_object('place_report_id', \"place_report_id\"), NULL, NULL\n  FROM \"main\".\"place_reports\" WHERE \"place_report_id\" = new.\"place_report_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_place_report_values_unit_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_place_report_values_unit_id_into_oplog\n  AFTER INSERT ON \"main\".\"place_report_values\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'place_report_values') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'units', 'COMPENSATION', json_patch('{}', json_object('unit_id', \"unit_id\")), json_object('unit_id', \"unit_id\"), NULL, NULL\n  FROM \"main\".\"units\" WHERE \"unit_id\" = new.\"unit_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_place_report_values_unit_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_place_report_values_unit_id_into_oplog\n  AFTER UPDATE ON \"main\".\"place_report_values\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'place_report_values') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'units', 'COMPENSATION', json_patch('{}', json_object('unit_id', \"unit_id\")), json_object('unit_id', \"unit_id\"), NULL, NULL\n  FROM \"main\".\"units\" WHERE \"unit_id\" = new.\"unit_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'messages', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_messages_primarykey;",
      "CREATE TRIGGER update_ensure_main_messages_primarykey\n  BEFORE UPDATE ON \"main\".\"messages\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"message_id\" != new.\"message_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column message_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_messages_into_oplog;",
      "CREATE TRIGGER insert_main_messages_into_oplog\n   AFTER INSERT ON \"main\".\"messages\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'messages')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'messages', 'INSERT', json_patch('{}', json_object('message_id', new.\"message_id\")), json_object('date', new.\"date\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'message', new.\"message\", 'message_id', new.\"message_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_messages_into_oplog;",
      "CREATE TRIGGER update_main_messages_into_oplog\n   AFTER UPDATE ON \"main\".\"messages\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'messages')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'messages', 'UPDATE', json_patch('{}', json_object('message_id', new.\"message_id\")), json_object('date', new.\"date\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'message', new.\"message\", 'message_id', new.\"message_id\"), json_object('date', old.\"date\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'message', old.\"message\", 'message_id', old.\"message_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_messages_into_oplog;",
      "CREATE TRIGGER delete_main_messages_into_oplog\n   AFTER DELETE ON \"main\".\"messages\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'messages')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'messages', 'DELETE', json_patch('{}', json_object('message_id', old.\"message_id\")), NULL, json_object('date', old.\"date\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'message', old.\"message\", 'message_id', old.\"message_id\"), NULL);\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'user_messages', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_user_messages_primarykey;",
      "CREATE TRIGGER update_ensure_main_user_messages_primarykey\n  BEFORE UPDATE ON \"main\".\"user_messages\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"user_message_id\" != new.\"user_message_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column user_message_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_user_messages_into_oplog;",
      "CREATE TRIGGER insert_main_user_messages_into_oplog\n   AFTER INSERT ON \"main\".\"user_messages\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'user_messages')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'user_messages', 'INSERT', json_patch('{}', json_object('user_message_id', new.\"user_message_id\")), json_object('account_id', new.\"account_id\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'message_id', new.\"message_id\", 'read', new.\"read\", 'user_id', new.\"user_id\", 'user_message_id', new.\"user_message_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_user_messages_into_oplog;",
      "CREATE TRIGGER update_main_user_messages_into_oplog\n   AFTER UPDATE ON \"main\".\"user_messages\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'user_messages')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'user_messages', 'UPDATE', json_patch('{}', json_object('user_message_id', new.\"user_message_id\")), json_object('account_id', new.\"account_id\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'message_id', new.\"message_id\", 'read', new.\"read\", 'user_id', new.\"user_id\", 'user_message_id', new.\"user_message_id\"), json_object('account_id', old.\"account_id\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'message_id', old.\"message_id\", 'read', old.\"read\", 'user_id', old.\"user_id\", 'user_message_id', old.\"user_message_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_user_messages_into_oplog;",
      "CREATE TRIGGER delete_main_user_messages_into_oplog\n   AFTER DELETE ON \"main\".\"user_messages\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'user_messages')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'user_messages', 'DELETE', json_patch('{}', json_object('user_message_id', old.\"user_message_id\")), NULL, json_object('account_id', old.\"account_id\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'message_id', old.\"message_id\", 'read', old.\"read\", 'user_id', old.\"user_id\", 'user_message_id', old.\"user_message_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_user_messages_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_user_messages_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"user_messages\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'user_messages') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_user_messages_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_user_messages_account_id_into_oplog\n  AFTER UPDATE ON \"main\".\"user_messages\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'user_messages') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_user_messages_message_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_user_messages_message_id_into_oplog\n  AFTER INSERT ON \"main\".\"user_messages\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'user_messages') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'messages', 'COMPENSATION', json_patch('{}', json_object('message_id', \"message_id\")), json_object('message_id', \"message_id\"), NULL, NULL\n  FROM \"main\".\"messages\" WHERE \"message_id\" = new.\"message_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_user_messages_message_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_user_messages_message_id_into_oplog\n  AFTER UPDATE ON \"main\".\"user_messages\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'user_messages') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'messages', 'COMPENSATION', json_patch('{}', json_object('message_id', \"message_id\")), json_object('message_id', \"message_id\"), NULL, NULL\n  FROM \"main\".\"messages\" WHERE \"message_id\" = new.\"message_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_user_messages_user_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_user_messages_user_id_into_oplog\n  AFTER INSERT ON \"main\".\"user_messages\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'user_messages') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'users', 'COMPENSATION', json_patch('{}', json_object('user_id', \"user_id\")), json_object('user_id', \"user_id\"), NULL, NULL\n  FROM \"main\".\"users\" WHERE \"user_id\" = new.\"user_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_user_messages_user_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_user_messages_user_id_into_oplog\n  AFTER UPDATE ON \"main\".\"user_messages\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'user_messages') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'users', 'COMPENSATION', json_patch('{}', json_object('user_id', \"user_id\")), json_object('user_id', \"user_id\"), NULL, NULL\n  FROM \"main\".\"users\" WHERE \"user_id\" = new.\"user_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'place_users', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_place_users_primarykey;",
      "CREATE TRIGGER update_ensure_main_place_users_primarykey\n  BEFORE UPDATE ON \"main\".\"place_users\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"place_user_id\" != new.\"place_user_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column place_user_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_place_users_into_oplog;",
      "CREATE TRIGGER insert_main_place_users_into_oplog\n   AFTER INSERT ON \"main\".\"place_users\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'place_users')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'place_users', 'INSERT', json_patch('{}', json_object('place_user_id', new.\"place_user_id\")), json_object('account_id', new.\"account_id\", 'label', new.\"label\", 'place_id', new.\"place_id\", 'place_user_id', new.\"place_user_id\", 'role', new.\"role\", 'user_id', new.\"user_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_place_users_into_oplog;",
      "CREATE TRIGGER update_main_place_users_into_oplog\n   AFTER UPDATE ON \"main\".\"place_users\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'place_users')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'place_users', 'UPDATE', json_patch('{}', json_object('place_user_id', new.\"place_user_id\")), json_object('account_id', new.\"account_id\", 'label', new.\"label\", 'place_id', new.\"place_id\", 'place_user_id', new.\"place_user_id\", 'role', new.\"role\", 'user_id', new.\"user_id\"), json_object('account_id', old.\"account_id\", 'label', old.\"label\", 'place_id', old.\"place_id\", 'place_user_id', old.\"place_user_id\", 'role', old.\"role\", 'user_id', old.\"user_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_place_users_into_oplog;",
      "CREATE TRIGGER delete_main_place_users_into_oplog\n   AFTER DELETE ON \"main\".\"place_users\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'place_users')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'place_users', 'DELETE', json_patch('{}', json_object('place_user_id', old.\"place_user_id\")), NULL, json_object('account_id', old.\"account_id\", 'label', old.\"label\", 'place_id', old.\"place_id\", 'place_user_id', old.\"place_user_id\", 'role', old.\"role\", 'user_id', old.\"user_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_place_users_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_place_users_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"place_users\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'place_users') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_place_users_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_place_users_account_id_into_oplog\n  AFTER UPDATE ON \"main\".\"place_users\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'place_users') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_place_users_place_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_place_users_place_id_into_oplog\n  AFTER INSERT ON \"main\".\"place_users\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'place_users') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'places', 'COMPENSATION', json_patch('{}', json_object('place_id', \"place_id\")), json_object('place_id', \"place_id\"), NULL, NULL\n  FROM \"main\".\"places\" WHERE \"place_id\" = new.\"place_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_place_users_place_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_place_users_place_id_into_oplog\n  AFTER UPDATE ON \"main\".\"place_users\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'place_users') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'places', 'COMPENSATION', json_patch('{}', json_object('place_id', \"place_id\")), json_object('place_id', \"place_id\"), NULL, NULL\n  FROM \"main\".\"places\" WHERE \"place_id\" = new.\"place_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_place_users_user_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_place_users_user_id_into_oplog\n  AFTER INSERT ON \"main\".\"place_users\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'place_users') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'users', 'COMPENSATION', json_patch('{}', json_object('user_id', \"user_id\")), json_object('user_id', \"user_id\"), NULL, NULL\n  FROM \"main\".\"users\" WHERE \"user_id\" = new.\"user_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_place_users_user_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_place_users_user_id_into_oplog\n  AFTER UPDATE ON \"main\".\"place_users\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'place_users') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'users', 'COMPENSATION', json_patch('{}', json_object('user_id', \"user_id\")), json_object('user_id', \"user_id\"), NULL, NULL\n  FROM \"main\".\"users\" WHERE \"user_id\" = new.\"user_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'goals', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_goals_primarykey;",
      "CREATE TRIGGER update_ensure_main_goals_primarykey\n  BEFORE UPDATE ON \"main\".\"goals\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"goal_id\" != new.\"goal_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column goal_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_goals_into_oplog;",
      "CREATE TRIGGER insert_main_goals_into_oplog\n   AFTER INSERT ON \"main\".\"goals\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'goals')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'goals', 'INSERT', json_patch('{}', json_object('goal_id', new.\"goal_id\")), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'goal_id', new.\"goal_id\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'name', new.\"name\", 'subproject_id', new.\"subproject_id\", 'year', new.\"year\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_goals_into_oplog;",
      "CREATE TRIGGER update_main_goals_into_oplog\n   AFTER UPDATE ON \"main\".\"goals\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'goals')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'goals', 'UPDATE', json_patch('{}', json_object('goal_id', new.\"goal_id\")), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'goal_id', new.\"goal_id\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'name', new.\"name\", 'subproject_id', new.\"subproject_id\", 'year', new.\"year\"), json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'goal_id', old.\"goal_id\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'name', old.\"name\", 'subproject_id', old.\"subproject_id\", 'year', old.\"year\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_goals_into_oplog;",
      "CREATE TRIGGER delete_main_goals_into_oplog\n   AFTER DELETE ON \"main\".\"goals\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'goals')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'goals', 'DELETE', json_patch('{}', json_object('goal_id', old.\"goal_id\")), NULL, json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'goal_id', old.\"goal_id\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'name', old.\"name\", 'subproject_id', old.\"subproject_id\", 'year', old.\"year\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_goals_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_goals_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"goals\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'goals') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_goals_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_goals_account_id_into_oplog\n  AFTER UPDATE ON \"main\".\"goals\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'goals') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_goals_subproject_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_goals_subproject_id_into_oplog\n  AFTER INSERT ON \"main\".\"goals\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'goals') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'subprojects', 'COMPENSATION', json_patch('{}', json_object('subproject_id', \"subproject_id\")), json_object('subproject_id', \"subproject_id\"), NULL, NULL\n  FROM \"main\".\"subprojects\" WHERE \"subproject_id\" = new.\"subproject_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_goals_subproject_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_goals_subproject_id_into_oplog\n  AFTER UPDATE ON \"main\".\"goals\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'goals') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'subprojects', 'COMPENSATION', json_patch('{}', json_object('subproject_id', \"subproject_id\")), json_object('subproject_id', \"subproject_id\"), NULL, NULL\n  FROM \"main\".\"subprojects\" WHERE \"subproject_id\" = new.\"subproject_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'goal_reports', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_goal_reports_primarykey;",
      "CREATE TRIGGER update_ensure_main_goal_reports_primarykey\n  BEFORE UPDATE ON \"main\".\"goal_reports\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"goal_report_id\" != new.\"goal_report_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column goal_report_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_goal_reports_into_oplog;",
      "CREATE TRIGGER insert_main_goal_reports_into_oplog\n   AFTER INSERT ON \"main\".\"goal_reports\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'goal_reports')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'goal_reports', 'INSERT', json_patch('{}', json_object('goal_report_id', new.\"goal_report_id\")), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'goal_id', new.\"goal_id\", 'goal_report_id', new.\"goal_report_id\", 'label', new.\"label\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_goal_reports_into_oplog;",
      "CREATE TRIGGER update_main_goal_reports_into_oplog\n   AFTER UPDATE ON \"main\".\"goal_reports\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'goal_reports')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'goal_reports', 'UPDATE', json_patch('{}', json_object('goal_report_id', new.\"goal_report_id\")), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'goal_id', new.\"goal_id\", 'goal_report_id', new.\"goal_report_id\", 'label', new.\"label\"), json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'goal_id', old.\"goal_id\", 'goal_report_id', old.\"goal_report_id\", 'label', old.\"label\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_goal_reports_into_oplog;",
      "CREATE TRIGGER delete_main_goal_reports_into_oplog\n   AFTER DELETE ON \"main\".\"goal_reports\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'goal_reports')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'goal_reports', 'DELETE', json_patch('{}', json_object('goal_report_id', old.\"goal_report_id\")), NULL, json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'goal_id', old.\"goal_id\", 'goal_report_id', old.\"goal_report_id\", 'label', old.\"label\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_goal_reports_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_goal_reports_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"goal_reports\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'goal_reports') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_goal_reports_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_goal_reports_account_id_into_oplog\n  AFTER UPDATE ON \"main\".\"goal_reports\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'goal_reports') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_goal_reports_goal_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_goal_reports_goal_id_into_oplog\n  AFTER INSERT ON \"main\".\"goal_reports\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'goal_reports') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'goals', 'COMPENSATION', json_patch('{}', json_object('goal_id', \"goal_id\")), json_object('goal_id', \"goal_id\"), NULL, NULL\n  FROM \"main\".\"goals\" WHERE \"goal_id\" = new.\"goal_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_goal_reports_goal_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_goal_reports_goal_id_into_oplog\n  AFTER UPDATE ON \"main\".\"goal_reports\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'goal_reports') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'goals', 'COMPENSATION', json_patch('{}', json_object('goal_id', \"goal_id\")), json_object('goal_id', \"goal_id\"), NULL, NULL\n  FROM \"main\".\"goals\" WHERE \"goal_id\" = new.\"goal_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'goal_report_values', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_goal_report_values_primarykey;",
      "CREATE TRIGGER update_ensure_main_goal_report_values_primarykey\n  BEFORE UPDATE ON \"main\".\"goal_report_values\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"goal_report_value_id\" != new.\"goal_report_value_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column goal_report_value_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_goal_report_values_into_oplog;",
      "CREATE TRIGGER insert_main_goal_report_values_into_oplog\n   AFTER INSERT ON \"main\".\"goal_report_values\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'goal_report_values')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'goal_report_values', 'INSERT', json_patch('{}', json_object('goal_report_value_id', new.\"goal_report_value_id\")), json_object('account_id', new.\"account_id\", 'goal_report_id', new.\"goal_report_id\", 'goal_report_value_id', new.\"goal_report_value_id\", 'label', new.\"label\", 'unit_id', new.\"unit_id\", 'value_integer', new.\"value_integer\", 'value_numeric', cast(new.\"value_numeric\" as TEXT), 'value_text', new.\"value_text\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_goal_report_values_into_oplog;",
      "CREATE TRIGGER update_main_goal_report_values_into_oplog\n   AFTER UPDATE ON \"main\".\"goal_report_values\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'goal_report_values')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'goal_report_values', 'UPDATE', json_patch('{}', json_object('goal_report_value_id', new.\"goal_report_value_id\")), json_object('account_id', new.\"account_id\", 'goal_report_id', new.\"goal_report_id\", 'goal_report_value_id', new.\"goal_report_value_id\", 'label', new.\"label\", 'unit_id', new.\"unit_id\", 'value_integer', new.\"value_integer\", 'value_numeric', cast(new.\"value_numeric\" as TEXT), 'value_text', new.\"value_text\"), json_object('account_id', old.\"account_id\", 'goal_report_id', old.\"goal_report_id\", 'goal_report_value_id', old.\"goal_report_value_id\", 'label', old.\"label\", 'unit_id', old.\"unit_id\", 'value_integer', old.\"value_integer\", 'value_numeric', cast(old.\"value_numeric\" as TEXT), 'value_text', old.\"value_text\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_goal_report_values_into_oplog;",
      "CREATE TRIGGER delete_main_goal_report_values_into_oplog\n   AFTER DELETE ON \"main\".\"goal_report_values\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'goal_report_values')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'goal_report_values', 'DELETE', json_patch('{}', json_object('goal_report_value_id', old.\"goal_report_value_id\")), NULL, json_object('account_id', old.\"account_id\", 'goal_report_id', old.\"goal_report_id\", 'goal_report_value_id', old.\"goal_report_value_id\", 'label', old.\"label\", 'unit_id', old.\"unit_id\", 'value_integer', old.\"value_integer\", 'value_numeric', cast(old.\"value_numeric\" as TEXT), 'value_text', old.\"value_text\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_goal_report_values_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_goal_report_values_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"goal_report_values\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'goal_report_values') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_goal_report_values_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_goal_report_values_account_id_into_oplog\n  AFTER UPDATE ON \"main\".\"goal_report_values\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'goal_report_values') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_goal_report_values_goal_report_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_goal_report_values_goal_report_id_into_oplog\n  AFTER INSERT ON \"main\".\"goal_report_values\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'goal_report_values') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'goal_reports', 'COMPENSATION', json_patch('{}', json_object('goal_report_id', \"goal_report_id\")), json_object('goal_report_id', \"goal_report_id\"), NULL, NULL\n  FROM \"main\".\"goal_reports\" WHERE \"goal_report_id\" = new.\"goal_report_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_goal_report_values_goal_report_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_goal_report_values_goal_report_id_into_oplog\n  AFTER UPDATE ON \"main\".\"goal_report_values\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'goal_report_values') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'goal_reports', 'COMPENSATION', json_patch('{}', json_object('goal_report_id', \"goal_report_id\")), json_object('goal_report_id', \"goal_report_id\"), NULL, NULL\n  FROM \"main\".\"goal_reports\" WHERE \"goal_report_id\" = new.\"goal_report_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_goal_report_values_unit_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_goal_report_values_unit_id_into_oplog\n  AFTER INSERT ON \"main\".\"goal_report_values\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'goal_report_values') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'units', 'COMPENSATION', json_patch('{}', json_object('unit_id', \"unit_id\")), json_object('unit_id', \"unit_id\"), NULL, NULL\n  FROM \"main\".\"units\" WHERE \"unit_id\" = new.\"unit_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_goal_report_values_unit_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_goal_report_values_unit_id_into_oplog\n  AFTER UPDATE ON \"main\".\"goal_report_values\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'goal_report_values') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'units', 'COMPENSATION', json_patch('{}', json_object('unit_id', \"unit_id\")), json_object('unit_id', \"unit_id\"), NULL, NULL\n  FROM \"main\".\"units\" WHERE \"unit_id\" = new.\"unit_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'subproject_reports', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_subproject_reports_primarykey;",
      "CREATE TRIGGER update_ensure_main_subproject_reports_primarykey\n  BEFORE UPDATE ON \"main\".\"subproject_reports\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"subproject_report_id\" != new.\"subproject_report_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column subproject_report_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_subproject_reports_into_oplog;",
      "CREATE TRIGGER insert_main_subproject_reports_into_oplog\n   AFTER INSERT ON \"main\".\"subproject_reports\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'subproject_reports')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'subproject_reports', 'INSERT', json_patch('{}', json_object('subproject_report_id', new.\"subproject_report_id\")), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'subproject_id', new.\"subproject_id\", 'subproject_report_id', new.\"subproject_report_id\", 'year', new.\"year\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_subproject_reports_into_oplog;",
      "CREATE TRIGGER update_main_subproject_reports_into_oplog\n   AFTER UPDATE ON \"main\".\"subproject_reports\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'subproject_reports')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'subproject_reports', 'UPDATE', json_patch('{}', json_object('subproject_report_id', new.\"subproject_report_id\")), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'subproject_id', new.\"subproject_id\", 'subproject_report_id', new.\"subproject_report_id\", 'year', new.\"year\"), json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'subproject_id', old.\"subproject_id\", 'subproject_report_id', old.\"subproject_report_id\", 'year', old.\"year\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_subproject_reports_into_oplog;",
      "CREATE TRIGGER delete_main_subproject_reports_into_oplog\n   AFTER DELETE ON \"main\".\"subproject_reports\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'subproject_reports')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'subproject_reports', 'DELETE', json_patch('{}', json_object('subproject_report_id', old.\"subproject_report_id\")), NULL, json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'subproject_id', old.\"subproject_id\", 'subproject_report_id', old.\"subproject_report_id\", 'year', old.\"year\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_subproject_reports_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_subproject_reports_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"subproject_reports\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'subproject_reports') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_subproject_reports_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_subproject_reports_account_id_into_oplog\n  AFTER UPDATE ON \"main\".\"subproject_reports\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'subproject_reports') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_subproject_reports_subproject_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_subproject_reports_subproject_id_into_oplog\n  AFTER INSERT ON \"main\".\"subproject_reports\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'subproject_reports') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'subprojects', 'COMPENSATION', json_patch('{}', json_object('subproject_id', \"subproject_id\")), json_object('subproject_id', \"subproject_id\"), NULL, NULL\n  FROM \"main\".\"subprojects\" WHERE \"subproject_id\" = new.\"subproject_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_subproject_reports_subproject_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_subproject_reports_subproject_id_into_oplog\n  AFTER UPDATE ON \"main\".\"subproject_reports\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'subproject_reports') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'subprojects', 'COMPENSATION', json_patch('{}', json_object('subproject_id', \"subproject_id\")), json_object('subproject_id', \"subproject_id\"), NULL, NULL\n  FROM \"main\".\"subprojects\" WHERE \"subproject_id\" = new.\"subproject_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'project_reports', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_project_reports_primarykey;",
      "CREATE TRIGGER update_ensure_main_project_reports_primarykey\n  BEFORE UPDATE ON \"main\".\"project_reports\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"project_report_id\" != new.\"project_report_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column project_report_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_project_reports_into_oplog;",
      "CREATE TRIGGER insert_main_project_reports_into_oplog\n   AFTER INSERT ON \"main\".\"project_reports\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'project_reports')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'project_reports', 'INSERT', json_patch('{}', json_object('project_report_id', new.\"project_report_id\")), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'project_id', new.\"project_id\", 'project_report_id', new.\"project_report_id\", 'year', new.\"year\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_project_reports_into_oplog;",
      "CREATE TRIGGER update_main_project_reports_into_oplog\n   AFTER UPDATE ON \"main\".\"project_reports\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'project_reports')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'project_reports', 'UPDATE', json_patch('{}', json_object('project_report_id', new.\"project_report_id\")), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'project_id', new.\"project_id\", 'project_report_id', new.\"project_report_id\", 'year', new.\"year\"), json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'project_id', old.\"project_id\", 'project_report_id', old.\"project_report_id\", 'year', old.\"year\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_project_reports_into_oplog;",
      "CREATE TRIGGER delete_main_project_reports_into_oplog\n   AFTER DELETE ON \"main\".\"project_reports\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'project_reports')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'project_reports', 'DELETE', json_patch('{}', json_object('project_report_id', old.\"project_report_id\")), NULL, json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'project_id', old.\"project_id\", 'project_report_id', old.\"project_report_id\", 'year', old.\"year\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_project_reports_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_project_reports_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"project_reports\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'project_reports') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_project_reports_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_project_reports_account_id_into_oplog\n  AFTER UPDATE ON \"main\".\"project_reports\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'project_reports') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_project_reports_project_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_project_reports_project_id_into_oplog\n  AFTER INSERT ON \"main\".\"project_reports\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'project_reports') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_patch('{}', json_object('project_id', \"project_id\")), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_project_reports_project_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_project_reports_project_id_into_oplog\n  AFTER UPDATE ON \"main\".\"project_reports\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'project_reports') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_patch('{}', json_object('project_id', \"project_id\")), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'files', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_files_primarykey;",
      "CREATE TRIGGER update_ensure_main_files_primarykey\n  BEFORE UPDATE ON \"main\".\"files\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"file_id\" != new.\"file_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column file_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_files_into_oplog;",
      "CREATE TRIGGER insert_main_files_into_oplog\n   AFTER INSERT ON \"main\".\"files\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'files')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'files', 'INSERT', json_patch('{}', json_object('file_id', new.\"file_id\")), json_object('account_id', new.\"account_id\", 'action_id', new.\"action_id\", 'check_id', new.\"check_id\", 'data', new.\"data\", 'file_id', new.\"file_id\", 'height', new.\"height\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'mimetype', new.\"mimetype\", 'name', new.\"name\", 'place_id', new.\"place_id\", 'preview_uuid', new.\"preview_uuid\", 'project_id', new.\"project_id\", 'size', cast(new.\"size\" as TEXT), 'subproject_id', new.\"subproject_id\", 'url', new.\"url\", 'uuid', new.\"uuid\", 'width', new.\"width\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_files_into_oplog;",
      "CREATE TRIGGER update_main_files_into_oplog\n   AFTER UPDATE ON \"main\".\"files\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'files')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'files', 'UPDATE', json_patch('{}', json_object('file_id', new.\"file_id\")), json_object('account_id', new.\"account_id\", 'action_id', new.\"action_id\", 'check_id', new.\"check_id\", 'data', new.\"data\", 'file_id', new.\"file_id\", 'height', new.\"height\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'mimetype', new.\"mimetype\", 'name', new.\"name\", 'place_id', new.\"place_id\", 'preview_uuid', new.\"preview_uuid\", 'project_id', new.\"project_id\", 'size', cast(new.\"size\" as TEXT), 'subproject_id', new.\"subproject_id\", 'url', new.\"url\", 'uuid', new.\"uuid\", 'width', new.\"width\"), json_object('account_id', old.\"account_id\", 'action_id', old.\"action_id\", 'check_id', old.\"check_id\", 'data', old.\"data\", 'file_id', old.\"file_id\", 'height', old.\"height\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'mimetype', old.\"mimetype\", 'name', old.\"name\", 'place_id', old.\"place_id\", 'preview_uuid', old.\"preview_uuid\", 'project_id', old.\"project_id\", 'size', cast(old.\"size\" as TEXT), 'subproject_id', old.\"subproject_id\", 'url', old.\"url\", 'uuid', old.\"uuid\", 'width', old.\"width\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_files_into_oplog;",
      "CREATE TRIGGER delete_main_files_into_oplog\n   AFTER DELETE ON \"main\".\"files\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'files')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'files', 'DELETE', json_patch('{}', json_object('file_id', old.\"file_id\")), NULL, json_object('account_id', old.\"account_id\", 'action_id', old.\"action_id\", 'check_id', old.\"check_id\", 'data', old.\"data\", 'file_id', old.\"file_id\", 'height', old.\"height\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'mimetype', old.\"mimetype\", 'name', old.\"name\", 'place_id', old.\"place_id\", 'preview_uuid', old.\"preview_uuid\", 'project_id', old.\"project_id\", 'size', cast(old.\"size\" as TEXT), 'subproject_id', old.\"subproject_id\", 'url', old.\"url\", 'uuid', old.\"uuid\", 'width', old.\"width\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_files_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_files_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"files\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'files') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_files_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_files_account_id_into_oplog\n  AFTER UPDATE ON \"main\".\"files\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'files') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_files_action_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_files_action_id_into_oplog\n  AFTER INSERT ON \"main\".\"files\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'files') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'actions', 'COMPENSATION', json_patch('{}', json_object('action_id', \"action_id\")), json_object('action_id', \"action_id\"), NULL, NULL\n  FROM \"main\".\"actions\" WHERE \"action_id\" = new.\"action_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_files_action_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_files_action_id_into_oplog\n  AFTER UPDATE ON \"main\".\"files\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'files') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'actions', 'COMPENSATION', json_patch('{}', json_object('action_id', \"action_id\")), json_object('action_id', \"action_id\"), NULL, NULL\n  FROM \"main\".\"actions\" WHERE \"action_id\" = new.\"action_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_files_check_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_files_check_id_into_oplog\n  AFTER INSERT ON \"main\".\"files\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'files') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'checks', 'COMPENSATION', json_patch('{}', json_object('check_id', \"check_id\")), json_object('check_id', \"check_id\"), NULL, NULL\n  FROM \"main\".\"checks\" WHERE \"check_id\" = new.\"check_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_files_check_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_files_check_id_into_oplog\n  AFTER UPDATE ON \"main\".\"files\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'files') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'checks', 'COMPENSATION', json_patch('{}', json_object('check_id', \"check_id\")), json_object('check_id', \"check_id\"), NULL, NULL\n  FROM \"main\".\"checks\" WHERE \"check_id\" = new.\"check_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_files_place_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_files_place_id_into_oplog\n  AFTER INSERT ON \"main\".\"files\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'files') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'places', 'COMPENSATION', json_patch('{}', json_object('place_id', \"place_id\")), json_object('place_id', \"place_id\"), NULL, NULL\n  FROM \"main\".\"places\" WHERE \"place_id\" = new.\"place_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_files_place_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_files_place_id_into_oplog\n  AFTER UPDATE ON \"main\".\"files\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'files') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'places', 'COMPENSATION', json_patch('{}', json_object('place_id', \"place_id\")), json_object('place_id', \"place_id\"), NULL, NULL\n  FROM \"main\".\"places\" WHERE \"place_id\" = new.\"place_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_files_project_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_files_project_id_into_oplog\n  AFTER INSERT ON \"main\".\"files\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'files') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_patch('{}', json_object('project_id', \"project_id\")), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_files_project_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_files_project_id_into_oplog\n  AFTER UPDATE ON \"main\".\"files\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'files') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_patch('{}', json_object('project_id', \"project_id\")), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_files_subproject_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_files_subproject_id_into_oplog\n  AFTER INSERT ON \"main\".\"files\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'files') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'subprojects', 'COMPENSATION', json_patch('{}', json_object('subproject_id', \"subproject_id\")), json_object('subproject_id', \"subproject_id\"), NULL, NULL\n  FROM \"main\".\"subprojects\" WHERE \"subproject_id\" = new.\"subproject_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_files_subproject_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_files_subproject_id_into_oplog\n  AFTER UPDATE ON \"main\".\"files\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'files') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'subprojects', 'COMPENSATION', json_patch('{}', json_object('subproject_id', \"subproject_id\")), json_object('subproject_id', \"subproject_id\"), NULL, NULL\n  FROM \"main\".\"subprojects\" WHERE \"subproject_id\" = new.\"subproject_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'persons', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_persons_primarykey;",
      "CREATE TRIGGER update_ensure_main_persons_primarykey\n  BEFORE UPDATE ON \"main\".\"persons\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"person_id\" != new.\"person_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column person_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_persons_into_oplog;",
      "CREATE TRIGGER insert_main_persons_into_oplog\n   AFTER INSERT ON \"main\".\"persons\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'persons')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'persons', 'INSERT', json_patch('{}', json_object('person_id', new.\"person_id\")), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'email', new.\"email\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'person_id', new.\"person_id\", 'project_id', new.\"project_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_persons_into_oplog;",
      "CREATE TRIGGER update_main_persons_into_oplog\n   AFTER UPDATE ON \"main\".\"persons\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'persons')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'persons', 'UPDATE', json_patch('{}', json_object('person_id', new.\"person_id\")), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'email', new.\"email\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'person_id', new.\"person_id\", 'project_id', new.\"project_id\"), json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'email', old.\"email\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'person_id', old.\"person_id\", 'project_id', old.\"project_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_persons_into_oplog;",
      "CREATE TRIGGER delete_main_persons_into_oplog\n   AFTER DELETE ON \"main\".\"persons\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'persons')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'persons', 'DELETE', json_patch('{}', json_object('person_id', old.\"person_id\")), NULL, json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'email', old.\"email\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'person_id', old.\"person_id\", 'project_id', old.\"project_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_persons_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_persons_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"persons\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'persons') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_persons_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_persons_account_id_into_oplog\n  AFTER UPDATE ON \"main\".\"persons\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'persons') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_persons_project_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_persons_project_id_into_oplog\n  AFTER INSERT ON \"main\".\"persons\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'persons') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_patch('{}', json_object('project_id', \"project_id\")), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_persons_project_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_persons_project_id_into_oplog\n  AFTER UPDATE ON \"main\".\"persons\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'persons') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_patch('{}', json_object('project_id', \"project_id\")), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'field_types', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_field_types_primarykey;",
      "CREATE TRIGGER update_ensure_main_field_types_primarykey\n  BEFORE UPDATE ON \"main\".\"field_types\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"field_type_id\" != new.\"field_type_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column field_type_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_field_types_into_oplog;",
      "CREATE TRIGGER insert_main_field_types_into_oplog\n   AFTER INSERT ON \"main\".\"field_types\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'field_types')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'field_types', 'INSERT', json_patch('{}', json_object('field_type_id', new.\"field_type_id\")), json_object('comment', new.\"comment\", 'field_type_id', new.\"field_type_id\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'name', new.\"name\", 'sort', new.\"sort\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_field_types_into_oplog;",
      "CREATE TRIGGER update_main_field_types_into_oplog\n   AFTER UPDATE ON \"main\".\"field_types\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'field_types')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'field_types', 'UPDATE', json_patch('{}', json_object('field_type_id', new.\"field_type_id\")), json_object('comment', new.\"comment\", 'field_type_id', new.\"field_type_id\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'name', new.\"name\", 'sort', new.\"sort\"), json_object('comment', old.\"comment\", 'field_type_id', old.\"field_type_id\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'name', old.\"name\", 'sort', old.\"sort\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_field_types_into_oplog;",
      "CREATE TRIGGER delete_main_field_types_into_oplog\n   AFTER DELETE ON \"main\".\"field_types\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'field_types')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'field_types', 'DELETE', json_patch('{}', json_object('field_type_id', old.\"field_type_id\")), NULL, json_object('comment', old.\"comment\", 'field_type_id', old.\"field_type_id\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'name', old.\"name\", 'sort', old.\"sort\"), NULL);\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'widget_types', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_widget_types_primarykey;",
      "CREATE TRIGGER update_ensure_main_widget_types_primarykey\n  BEFORE UPDATE ON \"main\".\"widget_types\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"widget_type_id\" != new.\"widget_type_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column widget_type_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_widget_types_into_oplog;",
      "CREATE TRIGGER insert_main_widget_types_into_oplog\n   AFTER INSERT ON \"main\".\"widget_types\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'widget_types')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'widget_types', 'INSERT', json_patch('{}', json_object('widget_type_id', new.\"widget_type_id\")), json_object('comment', new.\"comment\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'name', new.\"name\", 'needs_list', new.\"needs_list\", 'sort', new.\"sort\", 'widget_type_id', new.\"widget_type_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_widget_types_into_oplog;",
      "CREATE TRIGGER update_main_widget_types_into_oplog\n   AFTER UPDATE ON \"main\".\"widget_types\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'widget_types')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'widget_types', 'UPDATE', json_patch('{}', json_object('widget_type_id', new.\"widget_type_id\")), json_object('comment', new.\"comment\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'name', new.\"name\", 'needs_list', new.\"needs_list\", 'sort', new.\"sort\", 'widget_type_id', new.\"widget_type_id\"), json_object('comment', old.\"comment\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'name', old.\"name\", 'needs_list', old.\"needs_list\", 'sort', old.\"sort\", 'widget_type_id', old.\"widget_type_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_widget_types_into_oplog;",
      "CREATE TRIGGER delete_main_widget_types_into_oplog\n   AFTER DELETE ON \"main\".\"widget_types\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'widget_types')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'widget_types', 'DELETE', json_patch('{}', json_object('widget_type_id', old.\"widget_type_id\")), NULL, json_object('comment', old.\"comment\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'name', old.\"name\", 'needs_list', old.\"needs_list\", 'sort', old.\"sort\", 'widget_type_id', old.\"widget_type_id\"), NULL);\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'widgets_for_fields', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_widgets_for_fields_primarykey;",
      "CREATE TRIGGER update_ensure_main_widgets_for_fields_primarykey\n  BEFORE UPDATE ON \"main\".\"widgets_for_fields\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"widget_for_field_id\" != new.\"widget_for_field_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column widget_for_field_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_widgets_for_fields_into_oplog;",
      "CREATE TRIGGER insert_main_widgets_for_fields_into_oplog\n   AFTER INSERT ON \"main\".\"widgets_for_fields\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'widgets_for_fields')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'widgets_for_fields', 'INSERT', json_patch('{}', json_object('widget_for_field_id', new.\"widget_for_field_id\")), json_object('field_type_id', new.\"field_type_id\", 'label', new.\"label\", 'widget_for_field_id', new.\"widget_for_field_id\", 'widget_type_id', new.\"widget_type_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_widgets_for_fields_into_oplog;",
      "CREATE TRIGGER update_main_widgets_for_fields_into_oplog\n   AFTER UPDATE ON \"main\".\"widgets_for_fields\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'widgets_for_fields')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'widgets_for_fields', 'UPDATE', json_patch('{}', json_object('widget_for_field_id', new.\"widget_for_field_id\")), json_object('field_type_id', new.\"field_type_id\", 'label', new.\"label\", 'widget_for_field_id', new.\"widget_for_field_id\", 'widget_type_id', new.\"widget_type_id\"), json_object('field_type_id', old.\"field_type_id\", 'label', old.\"label\", 'widget_for_field_id', old.\"widget_for_field_id\", 'widget_type_id', old.\"widget_type_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_widgets_for_fields_into_oplog;",
      "CREATE TRIGGER delete_main_widgets_for_fields_into_oplog\n   AFTER DELETE ON \"main\".\"widgets_for_fields\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'widgets_for_fields')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'widgets_for_fields', 'DELETE', json_patch('{}', json_object('widget_for_field_id', old.\"widget_for_field_id\")), NULL, json_object('field_type_id', old.\"field_type_id\", 'label', old.\"label\", 'widget_for_field_id', old.\"widget_for_field_id\", 'widget_type_id', old.\"widget_type_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_widgets_for_fields_field_type_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_widgets_for_fields_field_type_id_into_oplog\n  AFTER INSERT ON \"main\".\"widgets_for_fields\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'widgets_for_fields') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'field_types', 'COMPENSATION', json_patch('{}', json_object('field_type_id', \"field_type_id\")), json_object('field_type_id', \"field_type_id\"), NULL, NULL\n  FROM \"main\".\"field_types\" WHERE \"field_type_id\" = new.\"field_type_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_widgets_for_fields_field_type_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_widgets_for_fields_field_type_id_into_oplog\n  AFTER UPDATE ON \"main\".\"widgets_for_fields\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'widgets_for_fields') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'field_types', 'COMPENSATION', json_patch('{}', json_object('field_type_id', \"field_type_id\")), json_object('field_type_id', \"field_type_id\"), NULL, NULL\n  FROM \"main\".\"field_types\" WHERE \"field_type_id\" = new.\"field_type_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_widgets_for_fields_widget_type_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_widgets_for_fields_widget_type_id_into_oplog\n  AFTER INSERT ON \"main\".\"widgets_for_fields\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'widgets_for_fields') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'widget_types', 'COMPENSATION', json_patch('{}', json_object('widget_type_id', \"widget_type_id\")), json_object('widget_type_id', \"widget_type_id\"), NULL, NULL\n  FROM \"main\".\"widget_types\" WHERE \"widget_type_id\" = new.\"widget_type_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_widgets_for_fields_widget_type_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_widgets_for_fields_widget_type_id_into_oplog\n  AFTER UPDATE ON \"main\".\"widgets_for_fields\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'widgets_for_fields') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'widget_types', 'COMPENSATION', json_patch('{}', json_object('widget_type_id', \"widget_type_id\")), json_object('widget_type_id', \"widget_type_id\"), NULL, NULL\n  FROM \"main\".\"widget_types\" WHERE \"widget_type_id\" = new.\"widget_type_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'fields', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_fields_primarykey;",
      "CREATE TRIGGER update_ensure_main_fields_primarykey\n  BEFORE UPDATE ON \"main\".\"fields\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"field_id\" != new.\"field_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column field_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_fields_into_oplog;",
      "CREATE TRIGGER insert_main_fields_into_oplog\n   AFTER INSERT ON \"main\".\"fields\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'fields')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'fields', 'INSERT', json_patch('{}', json_object('field_id', new.\"field_id\")), json_object('account_id', new.\"account_id\", 'field_id', new.\"field_id\", 'field_label', new.\"field_label\", 'field_type_id', new.\"field_type_id\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'level', new.\"level\", 'list_id', new.\"list_id\", 'name', new.\"name\", 'obsolete', new.\"obsolete\", 'preset', new.\"preset\", 'project_id', new.\"project_id\", 'table_name', new.\"table_name\", 'widget_type_id', new.\"widget_type_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_fields_into_oplog;",
      "CREATE TRIGGER update_main_fields_into_oplog\n   AFTER UPDATE ON \"main\".\"fields\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'fields')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'fields', 'UPDATE', json_patch('{}', json_object('field_id', new.\"field_id\")), json_object('account_id', new.\"account_id\", 'field_id', new.\"field_id\", 'field_label', new.\"field_label\", 'field_type_id', new.\"field_type_id\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'level', new.\"level\", 'list_id', new.\"list_id\", 'name', new.\"name\", 'obsolete', new.\"obsolete\", 'preset', new.\"preset\", 'project_id', new.\"project_id\", 'table_name', new.\"table_name\", 'widget_type_id', new.\"widget_type_id\"), json_object('account_id', old.\"account_id\", 'field_id', old.\"field_id\", 'field_label', old.\"field_label\", 'field_type_id', old.\"field_type_id\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'level', old.\"level\", 'list_id', old.\"list_id\", 'name', old.\"name\", 'obsolete', old.\"obsolete\", 'preset', old.\"preset\", 'project_id', old.\"project_id\", 'table_name', old.\"table_name\", 'widget_type_id', old.\"widget_type_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_fields_into_oplog;",
      "CREATE TRIGGER delete_main_fields_into_oplog\n   AFTER DELETE ON \"main\".\"fields\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'fields')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'fields', 'DELETE', json_patch('{}', json_object('field_id', old.\"field_id\")), NULL, json_object('account_id', old.\"account_id\", 'field_id', old.\"field_id\", 'field_label', old.\"field_label\", 'field_type_id', old.\"field_type_id\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'level', old.\"level\", 'list_id', old.\"list_id\", 'name', old.\"name\", 'obsolete', old.\"obsolete\", 'preset', old.\"preset\", 'project_id', old.\"project_id\", 'table_name', old.\"table_name\", 'widget_type_id', old.\"widget_type_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_fields_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_fields_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"fields\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'fields') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_fields_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_fields_account_id_into_oplog\n  AFTER UPDATE ON \"main\".\"fields\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'fields') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_fields_field_type_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_fields_field_type_id_into_oplog\n  AFTER INSERT ON \"main\".\"fields\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'fields') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'field_types', 'COMPENSATION', json_patch('{}', json_object('field_type_id', \"field_type_id\")), json_object('field_type_id', \"field_type_id\"), NULL, NULL\n  FROM \"main\".\"field_types\" WHERE \"field_type_id\" = new.\"field_type_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_fields_field_type_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_fields_field_type_id_into_oplog\n  AFTER UPDATE ON \"main\".\"fields\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'fields') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'field_types', 'COMPENSATION', json_patch('{}', json_object('field_type_id', \"field_type_id\")), json_object('field_type_id', \"field_type_id\"), NULL, NULL\n  FROM \"main\".\"field_types\" WHERE \"field_type_id\" = new.\"field_type_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_fields_list_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_fields_list_id_into_oplog\n  AFTER INSERT ON \"main\".\"fields\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'fields') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'lists', 'COMPENSATION', json_patch('{}', json_object('list_id', \"list_id\")), json_object('list_id', \"list_id\"), NULL, NULL\n  FROM \"main\".\"lists\" WHERE \"list_id\" = new.\"list_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_fields_list_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_fields_list_id_into_oplog\n  AFTER UPDATE ON \"main\".\"fields\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'fields') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'lists', 'COMPENSATION', json_patch('{}', json_object('list_id', \"list_id\")), json_object('list_id', \"list_id\"), NULL, NULL\n  FROM \"main\".\"lists\" WHERE \"list_id\" = new.\"list_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_fields_project_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_fields_project_id_into_oplog\n  AFTER INSERT ON \"main\".\"fields\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'fields') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_patch('{}', json_object('project_id', \"project_id\")), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_fields_project_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_fields_project_id_into_oplog\n  AFTER UPDATE ON \"main\".\"fields\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'fields') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_patch('{}', json_object('project_id', \"project_id\")), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_fields_widget_type_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_fields_widget_type_id_into_oplog\n  AFTER INSERT ON \"main\".\"fields\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'fields') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'widget_types', 'COMPENSATION', json_patch('{}', json_object('widget_type_id', \"widget_type_id\")), json_object('widget_type_id', \"widget_type_id\"), NULL, NULL\n  FROM \"main\".\"widget_types\" WHERE \"widget_type_id\" = new.\"widget_type_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_fields_widget_type_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_fields_widget_type_id_into_oplog\n  AFTER UPDATE ON \"main\".\"fields\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'fields') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'widget_types', 'COMPENSATION', json_patch('{}', json_object('widget_type_id', \"widget_type_id\")), json_object('widget_type_id', \"widget_type_id\"), NULL, NULL\n  FROM \"main\".\"widget_types\" WHERE \"widget_type_id\" = new.\"widget_type_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'app_states', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_app_states_primarykey;",
      "CREATE TRIGGER update_ensure_main_app_states_primarykey\n  BEFORE UPDATE ON \"main\".\"app_states\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"app_state_id\" != new.\"app_state_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column app_state_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_app_states_into_oplog;",
      "CREATE TRIGGER insert_main_app_states_into_oplog\n   AFTER INSERT ON \"main\".\"app_states\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'app_states')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'app_states', 'INSERT', json_patch('{}', json_object('app_state_id', new.\"app_state_id\")), json_object('account_id', new.\"account_id\", 'app_state_id', new.\"app_state_id\", 'breadcrumbs_overflowing', new.\"breadcrumbs_overflowing\", 'confirm_assigning_to_single_target', new.\"confirm_assigning_to_single_target\", 'designing', new.\"designing\", 'draggable_layers', new.\"draggable_layers\", 'droppable_layer', new.\"droppable_layer\", 'editing_action_geometry', new.\"editing_action_geometry\", 'editing_check_geometry', new.\"editing_check_geometry\", 'editing_place_geometry', new.\"editing_place_geometry\", 'filter_account_fields', new.\"filter_account_fields\", 'filter_account_messages', new.\"filter_account_messages\", 'filter_account_users', new.\"filter_account_users\", 'filter_actions_1', new.\"filter_actions_1\", 'filter_actions_2', new.\"filter_actions_2\", 'filter_checks_1', new.\"filter_checks_1\", 'filter_field_types', new.\"filter_field_types\", 'filter_fields', new.\"filter_fields\", 'filter_goals', new.\"filter_goals\", 'filter_lists', new.\"filter_lists\", 'filter_persons', new.\"filter_persons\", 'filter_place_checks_2', new.\"filter_place_checks_2\", 'filter_place_levels', new.\"filter_place_levels\", 'filter_place_reports_1', new.\"filter_place_reports_1\", 'filter_place_reports_2', new.\"filter_place_reports_2\", 'filter_places_1', new.\"filter_places_1\", 'filter_places_2', new.\"filter_places_2\", 'filter_project_fields', new.\"filter_project_fields\", 'filter_project_reports', new.\"filter_project_reports\", 'filter_project_users', new.\"filter_project_users\", 'filter_projects', new.\"filter_projects\", 'filter_subproject_reports', new.\"filter_subproject_reports\", 'filter_subproject_users', new.\"filter_subproject_users\", 'filter_subprojects', new.\"filter_subprojects\", 'filter_tile_layers', new.\"filter_tile_layers\", 'filter_units', new.\"filter_units\", 'filter_vector_layers', new.\"filter_vector_layers\", 'filter_widget_types', new.\"filter_widget_types\", 'filter_widgets_for_fields', new.\"filter_widgets_for_fields\", 'label', new.\"label\", 'map_bounds', new.\"map_bounds\", 'map_hide_ui', new.\"map_hide_ui\", 'map_info', new.\"map_info\", 'map_locate', new.\"map_locate\", 'map_maximized', new.\"map_maximized\", 'map_show_center', new.\"map_show_center\", 'navs_overflowing', new.\"navs_overflowing\", 'occurrence_fields_sorted', new.\"occurrence_fields_sorted\", 'places_to_assign_occurrence_to', new.\"places_to_assign_occurrence_to\", 'show_local_map', new.\"show_local_map\", 'syncing', new.\"syncing\", 'tabs', new.\"tabs\", 'tile_layer_sorter', new.\"tile_layer_sorter\", 'tree_open_nodes', new.\"tree_open_nodes\", 'user_email', new.\"user_email\", 'user_id', new.\"user_id\", 'vector_layer_sorter', new.\"vector_layer_sorter\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_app_states_into_oplog;",
      "CREATE TRIGGER update_main_app_states_into_oplog\n   AFTER UPDATE ON \"main\".\"app_states\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'app_states')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'app_states', 'UPDATE', json_patch('{}', json_object('app_state_id', new.\"app_state_id\")), json_object('account_id', new.\"account_id\", 'app_state_id', new.\"app_state_id\", 'breadcrumbs_overflowing', new.\"breadcrumbs_overflowing\", 'confirm_assigning_to_single_target', new.\"confirm_assigning_to_single_target\", 'designing', new.\"designing\", 'draggable_layers', new.\"draggable_layers\", 'droppable_layer', new.\"droppable_layer\", 'editing_action_geometry', new.\"editing_action_geometry\", 'editing_check_geometry', new.\"editing_check_geometry\", 'editing_place_geometry', new.\"editing_place_geometry\", 'filter_account_fields', new.\"filter_account_fields\", 'filter_account_messages', new.\"filter_account_messages\", 'filter_account_users', new.\"filter_account_users\", 'filter_actions_1', new.\"filter_actions_1\", 'filter_actions_2', new.\"filter_actions_2\", 'filter_checks_1', new.\"filter_checks_1\", 'filter_field_types', new.\"filter_field_types\", 'filter_fields', new.\"filter_fields\", 'filter_goals', new.\"filter_goals\", 'filter_lists', new.\"filter_lists\", 'filter_persons', new.\"filter_persons\", 'filter_place_checks_2', new.\"filter_place_checks_2\", 'filter_place_levels', new.\"filter_place_levels\", 'filter_place_reports_1', new.\"filter_place_reports_1\", 'filter_place_reports_2', new.\"filter_place_reports_2\", 'filter_places_1', new.\"filter_places_1\", 'filter_places_2', new.\"filter_places_2\", 'filter_project_fields', new.\"filter_project_fields\", 'filter_project_reports', new.\"filter_project_reports\", 'filter_project_users', new.\"filter_project_users\", 'filter_projects', new.\"filter_projects\", 'filter_subproject_reports', new.\"filter_subproject_reports\", 'filter_subproject_users', new.\"filter_subproject_users\", 'filter_subprojects', new.\"filter_subprojects\", 'filter_tile_layers', new.\"filter_tile_layers\", 'filter_units', new.\"filter_units\", 'filter_vector_layers', new.\"filter_vector_layers\", 'filter_widget_types', new.\"filter_widget_types\", 'filter_widgets_for_fields', new.\"filter_widgets_for_fields\", 'label', new.\"label\", 'map_bounds', new.\"map_bounds\", 'map_hide_ui', new.\"map_hide_ui\", 'map_info', new.\"map_info\", 'map_locate', new.\"map_locate\", 'map_maximized', new.\"map_maximized\", 'map_show_center', new.\"map_show_center\", 'navs_overflowing', new.\"navs_overflowing\", 'occurrence_fields_sorted', new.\"occurrence_fields_sorted\", 'places_to_assign_occurrence_to', new.\"places_to_assign_occurrence_to\", 'show_local_map', new.\"show_local_map\", 'syncing', new.\"syncing\", 'tabs', new.\"tabs\", 'tile_layer_sorter', new.\"tile_layer_sorter\", 'tree_open_nodes', new.\"tree_open_nodes\", 'user_email', new.\"user_email\", 'user_id', new.\"user_id\", 'vector_layer_sorter', new.\"vector_layer_sorter\"), json_object('account_id', old.\"account_id\", 'app_state_id', old.\"app_state_id\", 'breadcrumbs_overflowing', old.\"breadcrumbs_overflowing\", 'confirm_assigning_to_single_target', old.\"confirm_assigning_to_single_target\", 'designing', old.\"designing\", 'draggable_layers', old.\"draggable_layers\", 'droppable_layer', old.\"droppable_layer\", 'editing_action_geometry', old.\"editing_action_geometry\", 'editing_check_geometry', old.\"editing_check_geometry\", 'editing_place_geometry', old.\"editing_place_geometry\", 'filter_account_fields', old.\"filter_account_fields\", 'filter_account_messages', old.\"filter_account_messages\", 'filter_account_users', old.\"filter_account_users\", 'filter_actions_1', old.\"filter_actions_1\", 'filter_actions_2', old.\"filter_actions_2\", 'filter_checks_1', old.\"filter_checks_1\", 'filter_field_types', old.\"filter_field_types\", 'filter_fields', old.\"filter_fields\", 'filter_goals', old.\"filter_goals\", 'filter_lists', old.\"filter_lists\", 'filter_persons', old.\"filter_persons\", 'filter_place_checks_2', old.\"filter_place_checks_2\", 'filter_place_levels', old.\"filter_place_levels\", 'filter_place_reports_1', old.\"filter_place_reports_1\", 'filter_place_reports_2', old.\"filter_place_reports_2\", 'filter_places_1', old.\"filter_places_1\", 'filter_places_2', old.\"filter_places_2\", 'filter_project_fields', old.\"filter_project_fields\", 'filter_project_reports', old.\"filter_project_reports\", 'filter_project_users', old.\"filter_project_users\", 'filter_projects', old.\"filter_projects\", 'filter_subproject_reports', old.\"filter_subproject_reports\", 'filter_subproject_users', old.\"filter_subproject_users\", 'filter_subprojects', old.\"filter_subprojects\", 'filter_tile_layers', old.\"filter_tile_layers\", 'filter_units', old.\"filter_units\", 'filter_vector_layers', old.\"filter_vector_layers\", 'filter_widget_types', old.\"filter_widget_types\", 'filter_widgets_for_fields', old.\"filter_widgets_for_fields\", 'label', old.\"label\", 'map_bounds', old.\"map_bounds\", 'map_hide_ui', old.\"map_hide_ui\", 'map_info', old.\"map_info\", 'map_locate', old.\"map_locate\", 'map_maximized', old.\"map_maximized\", 'map_show_center', old.\"map_show_center\", 'navs_overflowing', old.\"navs_overflowing\", 'occurrence_fields_sorted', old.\"occurrence_fields_sorted\", 'places_to_assign_occurrence_to', old.\"places_to_assign_occurrence_to\", 'show_local_map', old.\"show_local_map\", 'syncing', old.\"syncing\", 'tabs', old.\"tabs\", 'tile_layer_sorter', old.\"tile_layer_sorter\", 'tree_open_nodes', old.\"tree_open_nodes\", 'user_email', old.\"user_email\", 'user_id', old.\"user_id\", 'vector_layer_sorter', old.\"vector_layer_sorter\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_app_states_into_oplog;",
      "CREATE TRIGGER delete_main_app_states_into_oplog\n   AFTER DELETE ON \"main\".\"app_states\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'app_states')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'app_states', 'DELETE', json_patch('{}', json_object('app_state_id', old.\"app_state_id\")), NULL, json_object('account_id', old.\"account_id\", 'app_state_id', old.\"app_state_id\", 'breadcrumbs_overflowing', old.\"breadcrumbs_overflowing\", 'confirm_assigning_to_single_target', old.\"confirm_assigning_to_single_target\", 'designing', old.\"designing\", 'draggable_layers', old.\"draggable_layers\", 'droppable_layer', old.\"droppable_layer\", 'editing_action_geometry', old.\"editing_action_geometry\", 'editing_check_geometry', old.\"editing_check_geometry\", 'editing_place_geometry', old.\"editing_place_geometry\", 'filter_account_fields', old.\"filter_account_fields\", 'filter_account_messages', old.\"filter_account_messages\", 'filter_account_users', old.\"filter_account_users\", 'filter_actions_1', old.\"filter_actions_1\", 'filter_actions_2', old.\"filter_actions_2\", 'filter_checks_1', old.\"filter_checks_1\", 'filter_field_types', old.\"filter_field_types\", 'filter_fields', old.\"filter_fields\", 'filter_goals', old.\"filter_goals\", 'filter_lists', old.\"filter_lists\", 'filter_persons', old.\"filter_persons\", 'filter_place_checks_2', old.\"filter_place_checks_2\", 'filter_place_levels', old.\"filter_place_levels\", 'filter_place_reports_1', old.\"filter_place_reports_1\", 'filter_place_reports_2', old.\"filter_place_reports_2\", 'filter_places_1', old.\"filter_places_1\", 'filter_places_2', old.\"filter_places_2\", 'filter_project_fields', old.\"filter_project_fields\", 'filter_project_reports', old.\"filter_project_reports\", 'filter_project_users', old.\"filter_project_users\", 'filter_projects', old.\"filter_projects\", 'filter_subproject_reports', old.\"filter_subproject_reports\", 'filter_subproject_users', old.\"filter_subproject_users\", 'filter_subprojects', old.\"filter_subprojects\", 'filter_tile_layers', old.\"filter_tile_layers\", 'filter_units', old.\"filter_units\", 'filter_vector_layers', old.\"filter_vector_layers\", 'filter_widget_types', old.\"filter_widget_types\", 'filter_widgets_for_fields', old.\"filter_widgets_for_fields\", 'label', old.\"label\", 'map_bounds', old.\"map_bounds\", 'map_hide_ui', old.\"map_hide_ui\", 'map_info', old.\"map_info\", 'map_locate', old.\"map_locate\", 'map_maximized', old.\"map_maximized\", 'map_show_center', old.\"map_show_center\", 'navs_overflowing', old.\"navs_overflowing\", 'occurrence_fields_sorted', old.\"occurrence_fields_sorted\", 'places_to_assign_occurrence_to', old.\"places_to_assign_occurrence_to\", 'show_local_map', old.\"show_local_map\", 'syncing', old.\"syncing\", 'tabs', old.\"tabs\", 'tile_layer_sorter', old.\"tile_layer_sorter\", 'tree_open_nodes', old.\"tree_open_nodes\", 'user_email', old.\"user_email\", 'user_id', old.\"user_id\", 'vector_layer_sorter', old.\"vector_layer_sorter\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_app_states_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_app_states_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"app_states\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'app_states') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_app_states_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_app_states_account_id_into_oplog\n  AFTER UPDATE ON \"main\".\"app_states\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'app_states') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_app_states_user_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_app_states_user_id_into_oplog\n  AFTER INSERT ON \"main\".\"app_states\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'app_states') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'users', 'COMPENSATION', json_patch('{}', json_object('user_id', \"user_id\")), json_object('user_id', \"user_id\"), NULL, NULL\n  FROM \"main\".\"users\" WHERE \"user_id\" = new.\"user_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_app_states_user_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_app_states_user_id_into_oplog\n  AFTER UPDATE ON \"main\".\"app_states\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'app_states') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'users', 'COMPENSATION', json_patch('{}', json_object('user_id', \"user_id\")), json_object('user_id', \"user_id\"), NULL, NULL\n  FROM \"main\".\"users\" WHERE \"user_id\" = new.\"user_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'occurrence_imports', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_occurrence_imports_primarykey;",
      "CREATE TRIGGER update_ensure_main_occurrence_imports_primarykey\n  BEFORE UPDATE ON \"main\".\"occurrence_imports\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"occurrence_import_id\" != new.\"occurrence_import_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column occurrence_import_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_occurrence_imports_into_oplog;",
      "CREATE TRIGGER insert_main_occurrence_imports_into_oplog\n   AFTER INSERT ON \"main\".\"occurrence_imports\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'occurrence_imports')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'occurrence_imports', 'INSERT', json_patch('{}', json_object('occurrence_import_id', new.\"occurrence_import_id\")), json_object('account_id', new.\"account_id\", 'attribution', new.\"attribution\", 'created_time', new.\"created_time\", 'crs', new.\"crs\", 'download_from_gbif', new.\"download_from_gbif\", 'gbif_download_key', new.\"gbif_download_key\", 'gbif_error', new.\"gbif_error\", 'gbif_filters', new.\"gbif_filters\", 'geojson_geometry_field', new.\"geojson_geometry_field\", 'geometry_method', new.\"geometry_method\", 'id_field', new.\"id_field\", 'inserted_count', new.\"inserted_count\", 'label_creation', new.\"label_creation\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'name', new.\"name\", 'occurrence_import_id', new.\"occurrence_import_id\", 'previous_import', new.\"previous_import\", 'previous_import_operation', new.\"previous_import_operation\", 'subproject_id', new.\"subproject_id\", 'x_coordinate_field', new.\"x_coordinate_field\", 'y_coordinate_field', new.\"y_coordinate_field\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_occurrence_imports_into_oplog;",
      "CREATE TRIGGER update_main_occurrence_imports_into_oplog\n   AFTER UPDATE ON \"main\".\"occurrence_imports\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'occurrence_imports')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'occurrence_imports', 'UPDATE', json_patch('{}', json_object('occurrence_import_id', new.\"occurrence_import_id\")), json_object('account_id', new.\"account_id\", 'attribution', new.\"attribution\", 'created_time', new.\"created_time\", 'crs', new.\"crs\", 'download_from_gbif', new.\"download_from_gbif\", 'gbif_download_key', new.\"gbif_download_key\", 'gbif_error', new.\"gbif_error\", 'gbif_filters', new.\"gbif_filters\", 'geojson_geometry_field', new.\"geojson_geometry_field\", 'geometry_method', new.\"geometry_method\", 'id_field', new.\"id_field\", 'inserted_count', new.\"inserted_count\", 'label_creation', new.\"label_creation\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'name', new.\"name\", 'occurrence_import_id', new.\"occurrence_import_id\", 'previous_import', new.\"previous_import\", 'previous_import_operation', new.\"previous_import_operation\", 'subproject_id', new.\"subproject_id\", 'x_coordinate_field', new.\"x_coordinate_field\", 'y_coordinate_field', new.\"y_coordinate_field\"), json_object('account_id', old.\"account_id\", 'attribution', old.\"attribution\", 'created_time', old.\"created_time\", 'crs', old.\"crs\", 'download_from_gbif', old.\"download_from_gbif\", 'gbif_download_key', old.\"gbif_download_key\", 'gbif_error', old.\"gbif_error\", 'gbif_filters', old.\"gbif_filters\", 'geojson_geometry_field', old.\"geojson_geometry_field\", 'geometry_method', old.\"geometry_method\", 'id_field', old.\"id_field\", 'inserted_count', old.\"inserted_count\", 'label_creation', old.\"label_creation\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'name', old.\"name\", 'occurrence_import_id', old.\"occurrence_import_id\", 'previous_import', old.\"previous_import\", 'previous_import_operation', old.\"previous_import_operation\", 'subproject_id', old.\"subproject_id\", 'x_coordinate_field', old.\"x_coordinate_field\", 'y_coordinate_field', old.\"y_coordinate_field\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_occurrence_imports_into_oplog;",
      "CREATE TRIGGER delete_main_occurrence_imports_into_oplog\n   AFTER DELETE ON \"main\".\"occurrence_imports\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'occurrence_imports')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'occurrence_imports', 'DELETE', json_patch('{}', json_object('occurrence_import_id', old.\"occurrence_import_id\")), NULL, json_object('account_id', old.\"account_id\", 'attribution', old.\"attribution\", 'created_time', old.\"created_time\", 'crs', old.\"crs\", 'download_from_gbif', old.\"download_from_gbif\", 'gbif_download_key', old.\"gbif_download_key\", 'gbif_error', old.\"gbif_error\", 'gbif_filters', old.\"gbif_filters\", 'geojson_geometry_field', old.\"geojson_geometry_field\", 'geometry_method', old.\"geometry_method\", 'id_field', old.\"id_field\", 'inserted_count', old.\"inserted_count\", 'label_creation', old.\"label_creation\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'name', old.\"name\", 'occurrence_import_id', old.\"occurrence_import_id\", 'previous_import', old.\"previous_import\", 'previous_import_operation', old.\"previous_import_operation\", 'subproject_id', old.\"subproject_id\", 'x_coordinate_field', old.\"x_coordinate_field\", 'y_coordinate_field', old.\"y_coordinate_field\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_occurrence_imports_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_occurrence_imports_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"occurrence_imports\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'occurrence_imports') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_occurrence_imports_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_occurrence_imports_account_id_into_oplog\n  AFTER UPDATE ON \"main\".\"occurrence_imports\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'occurrence_imports') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_occurrence_imports_previous_import_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_occurrence_imports_previous_import_into_oplog\n  AFTER INSERT ON \"main\".\"occurrence_imports\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'occurrence_imports') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'occurrence_imports', 'COMPENSATION', json_patch('{}', json_object('occurrence_import_id', \"occurrence_import_id\")), json_object('occurrence_import_id', \"occurrence_import_id\"), NULL, NULL\n  FROM \"main\".\"occurrence_imports\" WHERE \"occurrence_import_id\" = new.\"previous_import\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_occurrence_imports_previous_import_into_oplog;",
      "CREATE TRIGGER compensation_update_main_occurrence_imports_previous_import_into_oplog\n  AFTER UPDATE ON \"main\".\"occurrence_imports\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'occurrence_imports') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'occurrence_imports', 'COMPENSATION', json_patch('{}', json_object('occurrence_import_id', \"occurrence_import_id\")), json_object('occurrence_import_id', \"occurrence_import_id\"), NULL, NULL\n  FROM \"main\".\"occurrence_imports\" WHERE \"occurrence_import_id\" = new.\"previous_import\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_occurrence_imports_subproject_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_occurrence_imports_subproject_id_into_oplog\n  AFTER INSERT ON \"main\".\"occurrence_imports\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'occurrence_imports') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'subprojects', 'COMPENSATION', json_patch('{}', json_object('subproject_id', \"subproject_id\")), json_object('subproject_id', \"subproject_id\"), NULL, NULL\n  FROM \"main\".\"subprojects\" WHERE \"subproject_id\" = new.\"subproject_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_occurrence_imports_subproject_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_occurrence_imports_subproject_id_into_oplog\n  AFTER UPDATE ON \"main\".\"occurrence_imports\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'occurrence_imports') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'subprojects', 'COMPENSATION', json_patch('{}', json_object('subproject_id', \"subproject_id\")), json_object('subproject_id', \"subproject_id\"), NULL, NULL\n  FROM \"main\".\"subprojects\" WHERE \"subproject_id\" = new.\"subproject_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'occurrences', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_occurrences_primarykey;",
      "CREATE TRIGGER update_ensure_main_occurrences_primarykey\n  BEFORE UPDATE ON \"main\".\"occurrences\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"occurrence_id\" != new.\"occurrence_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column occurrence_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_occurrences_into_oplog;",
      "CREATE TRIGGER insert_main_occurrences_into_oplog\n   AFTER INSERT ON \"main\".\"occurrences\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'occurrences')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'occurrences', 'INSERT', json_patch('{}', json_object('occurrence_id', new.\"occurrence_id\")), json_object('account_id', new.\"account_id\", 'comment', new.\"comment\", 'data', new.\"data\", 'geometry', new.\"geometry\", 'id_in_source', new.\"id_in_source\", 'label', new.\"label\", 'not_to_assign', new.\"not_to_assign\", 'occurrence_id', new.\"occurrence_id\", 'occurrence_import_id', new.\"occurrence_import_id\", 'place_id', new.\"place_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_occurrences_into_oplog;",
      "CREATE TRIGGER update_main_occurrences_into_oplog\n   AFTER UPDATE ON \"main\".\"occurrences\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'occurrences')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'occurrences', 'UPDATE', json_patch('{}', json_object('occurrence_id', new.\"occurrence_id\")), json_object('account_id', new.\"account_id\", 'comment', new.\"comment\", 'data', new.\"data\", 'geometry', new.\"geometry\", 'id_in_source', new.\"id_in_source\", 'label', new.\"label\", 'not_to_assign', new.\"not_to_assign\", 'occurrence_id', new.\"occurrence_id\", 'occurrence_import_id', new.\"occurrence_import_id\", 'place_id', new.\"place_id\"), json_object('account_id', old.\"account_id\", 'comment', old.\"comment\", 'data', old.\"data\", 'geometry', old.\"geometry\", 'id_in_source', old.\"id_in_source\", 'label', old.\"label\", 'not_to_assign', old.\"not_to_assign\", 'occurrence_id', old.\"occurrence_id\", 'occurrence_import_id', old.\"occurrence_import_id\", 'place_id', old.\"place_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_occurrences_into_oplog;",
      "CREATE TRIGGER delete_main_occurrences_into_oplog\n   AFTER DELETE ON \"main\".\"occurrences\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'occurrences')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'occurrences', 'DELETE', json_patch('{}', json_object('occurrence_id', old.\"occurrence_id\")), NULL, json_object('account_id', old.\"account_id\", 'comment', old.\"comment\", 'data', old.\"data\", 'geometry', old.\"geometry\", 'id_in_source', old.\"id_in_source\", 'label', old.\"label\", 'not_to_assign', old.\"not_to_assign\", 'occurrence_id', old.\"occurrence_id\", 'occurrence_import_id', old.\"occurrence_import_id\", 'place_id', old.\"place_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_occurrences_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_occurrences_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"occurrences\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'occurrences') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_occurrences_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_occurrences_account_id_into_oplog\n  AFTER UPDATE ON \"main\".\"occurrences\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'occurrences') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_occurrences_occurrence_import_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_occurrences_occurrence_import_id_into_oplog\n  AFTER INSERT ON \"main\".\"occurrences\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'occurrences') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'occurrence_imports', 'COMPENSATION', json_patch('{}', json_object('occurrence_import_id', \"occurrence_import_id\")), json_object('occurrence_import_id', \"occurrence_import_id\"), NULL, NULL\n  FROM \"main\".\"occurrence_imports\" WHERE \"occurrence_import_id\" = new.\"occurrence_import_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_occurrences_occurrence_import_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_occurrences_occurrence_import_id_into_oplog\n  AFTER UPDATE ON \"main\".\"occurrences\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'occurrences') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'occurrence_imports', 'COMPENSATION', json_patch('{}', json_object('occurrence_import_id', \"occurrence_import_id\")), json_object('occurrence_import_id', \"occurrence_import_id\"), NULL, NULL\n  FROM \"main\".\"occurrence_imports\" WHERE \"occurrence_import_id\" = new.\"occurrence_import_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_occurrences_place_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_occurrences_place_id_into_oplog\n  AFTER INSERT ON \"main\".\"occurrences\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'occurrences') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'places', 'COMPENSATION', json_patch('{}', json_object('place_id', \"place_id\")), json_object('place_id', \"place_id\"), NULL, NULL\n  FROM \"main\".\"places\" WHERE \"place_id\" = new.\"place_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_occurrences_place_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_occurrences_place_id_into_oplog\n  AFTER UPDATE ON \"main\".\"occurrences\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'occurrences') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'places', 'COMPENSATION', json_patch('{}', json_object('place_id', \"place_id\")), json_object('place_id', \"place_id\"), NULL, NULL\n  FROM \"main\".\"places\" WHERE \"place_id\" = new.\"place_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'tile_layers', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_tile_layers_primarykey;",
      "CREATE TRIGGER update_ensure_main_tile_layers_primarykey\n  BEFORE UPDATE ON \"main\".\"tile_layers\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"tile_layer_id\" != new.\"tile_layer_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column tile_layer_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_tile_layers_into_oplog;",
      "CREATE TRIGGER insert_main_tile_layers_into_oplog\n   AFTER INSERT ON \"main\".\"tile_layers\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'tile_layers')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'tile_layers', 'INSERT', json_patch('{}', json_object('tile_layer_id', new.\"tile_layer_id\")), json_object('account_id', new.\"account_id\", 'active', new.\"active\", 'grayscale', new.\"grayscale\", 'label', new.\"label\", 'local_data_bounds', new.\"local_data_bounds\", 'local_data_size', new.\"local_data_size\", 'max_zoom', new.\"max_zoom\", 'min_zoom', new.\"min_zoom\", 'opacity_percent', new.\"opacity_percent\", 'project_id', new.\"project_id\", 'sort', new.\"sort\", 'tile_layer_id', new.\"tile_layer_id\", 'type', new.\"type\", 'wms_base_url', new.\"wms_base_url\", 'wms_format', new.\"wms_format\", 'wms_info_format', new.\"wms_info_format\", 'wms_layer', new.\"wms_layer\", 'wms_legend', CASE WHEN new.\"wms_legend\" IS NOT NULL THEN hex(new.\"wms_legend\") ELSE NULL END, 'wms_parameters', new.\"wms_parameters\", 'wms_styles', new.\"wms_styles\", 'wms_transparent', new.\"wms_transparent\", 'wms_version', new.\"wms_version\", 'wmts_subdomains', new.\"wmts_subdomains\", 'wmts_url_template', new.\"wmts_url_template\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_tile_layers_into_oplog;",
      "CREATE TRIGGER update_main_tile_layers_into_oplog\n   AFTER UPDATE ON \"main\".\"tile_layers\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'tile_layers')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'tile_layers', 'UPDATE', json_patch('{}', json_object('tile_layer_id', new.\"tile_layer_id\")), json_object('account_id', new.\"account_id\", 'active', new.\"active\", 'grayscale', new.\"grayscale\", 'label', new.\"label\", 'local_data_bounds', new.\"local_data_bounds\", 'local_data_size', new.\"local_data_size\", 'max_zoom', new.\"max_zoom\", 'min_zoom', new.\"min_zoom\", 'opacity_percent', new.\"opacity_percent\", 'project_id', new.\"project_id\", 'sort', new.\"sort\", 'tile_layer_id', new.\"tile_layer_id\", 'type', new.\"type\", 'wms_base_url', new.\"wms_base_url\", 'wms_format', new.\"wms_format\", 'wms_info_format', new.\"wms_info_format\", 'wms_layer', new.\"wms_layer\", 'wms_legend', CASE WHEN new.\"wms_legend\" IS NOT NULL THEN hex(new.\"wms_legend\") ELSE NULL END, 'wms_parameters', new.\"wms_parameters\", 'wms_styles', new.\"wms_styles\", 'wms_transparent', new.\"wms_transparent\", 'wms_version', new.\"wms_version\", 'wmts_subdomains', new.\"wmts_subdomains\", 'wmts_url_template', new.\"wmts_url_template\"), json_object('account_id', old.\"account_id\", 'active', old.\"active\", 'grayscale', old.\"grayscale\", 'label', old.\"label\", 'local_data_bounds', old.\"local_data_bounds\", 'local_data_size', old.\"local_data_size\", 'max_zoom', old.\"max_zoom\", 'min_zoom', old.\"min_zoom\", 'opacity_percent', old.\"opacity_percent\", 'project_id', old.\"project_id\", 'sort', old.\"sort\", 'tile_layer_id', old.\"tile_layer_id\", 'type', old.\"type\", 'wms_base_url', old.\"wms_base_url\", 'wms_format', old.\"wms_format\", 'wms_info_format', old.\"wms_info_format\", 'wms_layer', old.\"wms_layer\", 'wms_legend', CASE WHEN old.\"wms_legend\" IS NOT NULL THEN hex(old.\"wms_legend\") ELSE NULL END, 'wms_parameters', old.\"wms_parameters\", 'wms_styles', old.\"wms_styles\", 'wms_transparent', old.\"wms_transparent\", 'wms_version', old.\"wms_version\", 'wmts_subdomains', old.\"wmts_subdomains\", 'wmts_url_template', old.\"wmts_url_template\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_tile_layers_into_oplog;",
      "CREATE TRIGGER delete_main_tile_layers_into_oplog\n   AFTER DELETE ON \"main\".\"tile_layers\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'tile_layers')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'tile_layers', 'DELETE', json_patch('{}', json_object('tile_layer_id', old.\"tile_layer_id\")), NULL, json_object('account_id', old.\"account_id\", 'active', old.\"active\", 'grayscale', old.\"grayscale\", 'label', old.\"label\", 'local_data_bounds', old.\"local_data_bounds\", 'local_data_size', old.\"local_data_size\", 'max_zoom', old.\"max_zoom\", 'min_zoom', old.\"min_zoom\", 'opacity_percent', old.\"opacity_percent\", 'project_id', old.\"project_id\", 'sort', old.\"sort\", 'tile_layer_id', old.\"tile_layer_id\", 'type', old.\"type\", 'wms_base_url', old.\"wms_base_url\", 'wms_format', old.\"wms_format\", 'wms_info_format', old.\"wms_info_format\", 'wms_layer', old.\"wms_layer\", 'wms_legend', CASE WHEN old.\"wms_legend\" IS NOT NULL THEN hex(old.\"wms_legend\") ELSE NULL END, 'wms_parameters', old.\"wms_parameters\", 'wms_styles', old.\"wms_styles\", 'wms_transparent', old.\"wms_transparent\", 'wms_version', old.\"wms_version\", 'wmts_subdomains', old.\"wmts_subdomains\", 'wmts_url_template', old.\"wmts_url_template\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_tile_layers_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_tile_layers_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"tile_layers\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'tile_layers') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_tile_layers_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_tile_layers_account_id_into_oplog\n  AFTER UPDATE ON \"main\".\"tile_layers\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'tile_layers') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_tile_layers_project_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_tile_layers_project_id_into_oplog\n  AFTER INSERT ON \"main\".\"tile_layers\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'tile_layers') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_patch('{}', json_object('project_id', \"project_id\")), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_tile_layers_project_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_tile_layers_project_id_into_oplog\n  AFTER UPDATE ON \"main\".\"tile_layers\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'tile_layers') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_patch('{}', json_object('project_id', \"project_id\")), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'vector_layers', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_vector_layers_primarykey;",
      "CREATE TRIGGER update_ensure_main_vector_layers_primarykey\n  BEFORE UPDATE ON \"main\".\"vector_layers\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"vector_layer_id\" != new.\"vector_layer_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column vector_layer_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_vector_layers_into_oplog;",
      "CREATE TRIGGER insert_main_vector_layers_into_oplog\n   AFTER INSERT ON \"main\".\"vector_layers\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'vector_layers')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'vector_layers', 'INSERT', json_patch('{}', json_object('vector_layer_id', new.\"vector_layer_id\")), json_object('account_id', new.\"account_id\", 'active', new.\"active\", 'display_by_property_field', new.\"display_by_property_field\", 'feature_count', new.\"feature_count\", 'label', new.\"label\", 'line_count', new.\"line_count\", 'max_features', new.\"max_features\", 'max_zoom', new.\"max_zoom\", 'min_zoom', new.\"min_zoom\", 'point_count', new.\"point_count\", 'polygon_count', new.\"polygon_count\", 'project_id', new.\"project_id\", 'sort', new.\"sort\", 'type', new.\"type\", 'vector_layer_id', new.\"vector_layer_id\", 'wfs_default_crs', new.\"wfs_default_crs\", 'wfs_layer', new.\"wfs_layer\", 'wfs_output_format', new.\"wfs_output_format\", 'wfs_url', new.\"wfs_url\", 'wfs_version', new.\"wfs_version\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_vector_layers_into_oplog;",
      "CREATE TRIGGER update_main_vector_layers_into_oplog\n   AFTER UPDATE ON \"main\".\"vector_layers\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'vector_layers')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'vector_layers', 'UPDATE', json_patch('{}', json_object('vector_layer_id', new.\"vector_layer_id\")), json_object('account_id', new.\"account_id\", 'active', new.\"active\", 'display_by_property_field', new.\"display_by_property_field\", 'feature_count', new.\"feature_count\", 'label', new.\"label\", 'line_count', new.\"line_count\", 'max_features', new.\"max_features\", 'max_zoom', new.\"max_zoom\", 'min_zoom', new.\"min_zoom\", 'point_count', new.\"point_count\", 'polygon_count', new.\"polygon_count\", 'project_id', new.\"project_id\", 'sort', new.\"sort\", 'type', new.\"type\", 'vector_layer_id', new.\"vector_layer_id\", 'wfs_default_crs', new.\"wfs_default_crs\", 'wfs_layer', new.\"wfs_layer\", 'wfs_output_format', new.\"wfs_output_format\", 'wfs_url', new.\"wfs_url\", 'wfs_version', new.\"wfs_version\"), json_object('account_id', old.\"account_id\", 'active', old.\"active\", 'display_by_property_field', old.\"display_by_property_field\", 'feature_count', old.\"feature_count\", 'label', old.\"label\", 'line_count', old.\"line_count\", 'max_features', old.\"max_features\", 'max_zoom', old.\"max_zoom\", 'min_zoom', old.\"min_zoom\", 'point_count', old.\"point_count\", 'polygon_count', old.\"polygon_count\", 'project_id', old.\"project_id\", 'sort', old.\"sort\", 'type', old.\"type\", 'vector_layer_id', old.\"vector_layer_id\", 'wfs_default_crs', old.\"wfs_default_crs\", 'wfs_layer', old.\"wfs_layer\", 'wfs_output_format', old.\"wfs_output_format\", 'wfs_url', old.\"wfs_url\", 'wfs_version', old.\"wfs_version\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_vector_layers_into_oplog;",
      "CREATE TRIGGER delete_main_vector_layers_into_oplog\n   AFTER DELETE ON \"main\".\"vector_layers\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'vector_layers')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'vector_layers', 'DELETE', json_patch('{}', json_object('vector_layer_id', old.\"vector_layer_id\")), NULL, json_object('account_id', old.\"account_id\", 'active', old.\"active\", 'display_by_property_field', old.\"display_by_property_field\", 'feature_count', old.\"feature_count\", 'label', old.\"label\", 'line_count', old.\"line_count\", 'max_features', old.\"max_features\", 'max_zoom', old.\"max_zoom\", 'min_zoom', old.\"min_zoom\", 'point_count', old.\"point_count\", 'polygon_count', old.\"polygon_count\", 'project_id', old.\"project_id\", 'sort', old.\"sort\", 'type', old.\"type\", 'vector_layer_id', old.\"vector_layer_id\", 'wfs_default_crs', old.\"wfs_default_crs\", 'wfs_layer', old.\"wfs_layer\", 'wfs_output_format', old.\"wfs_output_format\", 'wfs_url', old.\"wfs_url\", 'wfs_version', old.\"wfs_version\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_vector_layers_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_vector_layers_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"vector_layers\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'vector_layers') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_vector_layers_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_vector_layers_account_id_into_oplog\n  AFTER UPDATE ON \"main\".\"vector_layers\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'vector_layers') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_vector_layers_project_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_vector_layers_project_id_into_oplog\n  AFTER INSERT ON \"main\".\"vector_layers\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'vector_layers') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_patch('{}', json_object('project_id', \"project_id\")), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_vector_layers_project_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_vector_layers_project_id_into_oplog\n  AFTER UPDATE ON \"main\".\"vector_layers\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'vector_layers') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_patch('{}', json_object('project_id', \"project_id\")), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'layer_options', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_layer_options_primarykey;",
      "CREATE TRIGGER update_ensure_main_layer_options_primarykey\n  BEFORE UPDATE ON \"main\".\"layer_options\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"layer_option_id\" != new.\"layer_option_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column layer_option_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_layer_options_into_oplog;",
      "CREATE TRIGGER insert_main_layer_options_into_oplog\n   AFTER INSERT ON \"main\".\"layer_options\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'layer_options')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'layer_options', 'INSERT', json_patch('{}', json_object('layer_option_id', new.\"layer_option_id\")), json_object('account_id', new.\"account_id\", 'field', new.\"field\", 'label', new.\"label\", 'layer_option_id', new.\"layer_option_id\", 'legend_url', new.\"legend_url\", 'queryable', new.\"queryable\", 'tile_layer_id', new.\"tile_layer_id\", 'value', new.\"value\", 'vector_layer_id', new.\"vector_layer_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_layer_options_into_oplog;",
      "CREATE TRIGGER update_main_layer_options_into_oplog\n   AFTER UPDATE ON \"main\".\"layer_options\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'layer_options')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'layer_options', 'UPDATE', json_patch('{}', json_object('layer_option_id', new.\"layer_option_id\")), json_object('account_id', new.\"account_id\", 'field', new.\"field\", 'label', new.\"label\", 'layer_option_id', new.\"layer_option_id\", 'legend_url', new.\"legend_url\", 'queryable', new.\"queryable\", 'tile_layer_id', new.\"tile_layer_id\", 'value', new.\"value\", 'vector_layer_id', new.\"vector_layer_id\"), json_object('account_id', old.\"account_id\", 'field', old.\"field\", 'label', old.\"label\", 'layer_option_id', old.\"layer_option_id\", 'legend_url', old.\"legend_url\", 'queryable', old.\"queryable\", 'tile_layer_id', old.\"tile_layer_id\", 'value', old.\"value\", 'vector_layer_id', old.\"vector_layer_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_layer_options_into_oplog;",
      "CREATE TRIGGER delete_main_layer_options_into_oplog\n   AFTER DELETE ON \"main\".\"layer_options\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'layer_options')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'layer_options', 'DELETE', json_patch('{}', json_object('layer_option_id', old.\"layer_option_id\")), NULL, json_object('account_id', old.\"account_id\", 'field', old.\"field\", 'label', old.\"label\", 'layer_option_id', old.\"layer_option_id\", 'legend_url', old.\"legend_url\", 'queryable', old.\"queryable\", 'tile_layer_id', old.\"tile_layer_id\", 'value', old.\"value\", 'vector_layer_id', old.\"vector_layer_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_layer_options_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_layer_options_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"layer_options\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'layer_options') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_layer_options_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_layer_options_account_id_into_oplog\n  AFTER UPDATE ON \"main\".\"layer_options\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'layer_options') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_layer_options_tile_layer_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_layer_options_tile_layer_id_into_oplog\n  AFTER INSERT ON \"main\".\"layer_options\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'layer_options') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'tile_layers', 'COMPENSATION', json_patch('{}', json_object('tile_layer_id', \"tile_layer_id\")), json_object('tile_layer_id', \"tile_layer_id\"), NULL, NULL\n  FROM \"main\".\"tile_layers\" WHERE \"tile_layer_id\" = new.\"tile_layer_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_layer_options_tile_layer_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_layer_options_tile_layer_id_into_oplog\n  AFTER UPDATE ON \"main\".\"layer_options\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'layer_options') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'tile_layers', 'COMPENSATION', json_patch('{}', json_object('tile_layer_id', \"tile_layer_id\")), json_object('tile_layer_id', \"tile_layer_id\"), NULL, NULL\n  FROM \"main\".\"tile_layers\" WHERE \"tile_layer_id\" = new.\"tile_layer_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_layer_options_vector_layer_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_layer_options_vector_layer_id_into_oplog\n  AFTER INSERT ON \"main\".\"layer_options\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'layer_options') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'vector_layers', 'COMPENSATION', json_patch('{}', json_object('vector_layer_id', \"vector_layer_id\")), json_object('vector_layer_id', \"vector_layer_id\"), NULL, NULL\n  FROM \"main\".\"vector_layers\" WHERE \"vector_layer_id\" = new.\"vector_layer_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_layer_options_vector_layer_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_layer_options_vector_layer_id_into_oplog\n  AFTER UPDATE ON \"main\".\"layer_options\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'layer_options') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'vector_layers', 'COMPENSATION', json_patch('{}', json_object('vector_layer_id', \"vector_layer_id\")), json_object('vector_layer_id', \"vector_layer_id\"), NULL, NULL\n  FROM \"main\".\"vector_layers\" WHERE \"vector_layer_id\" = new.\"vector_layer_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'vector_layer_geoms', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_vector_layer_geoms_primarykey;",
      "CREATE TRIGGER update_ensure_main_vector_layer_geoms_primarykey\n  BEFORE UPDATE ON \"main\".\"vector_layer_geoms\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"vector_layer_geom_id\" != new.\"vector_layer_geom_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column vector_layer_geom_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_vector_layer_geoms_into_oplog;",
      "CREATE TRIGGER insert_main_vector_layer_geoms_into_oplog\n   AFTER INSERT ON \"main\".\"vector_layer_geoms\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'vector_layer_geoms')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'vector_layer_geoms', 'INSERT', json_patch('{}', json_object('vector_layer_geom_id', new.\"vector_layer_geom_id\")), json_object('account_id', new.\"account_id\", 'bbox_ne_lat', cast(new.\"bbox_ne_lat\" as TEXT), 'bbox_ne_lng', cast(new.\"bbox_ne_lng\" as TEXT), 'bbox_sw_lat', cast(new.\"bbox_sw_lat\" as TEXT), 'bbox_sw_lng', cast(new.\"bbox_sw_lng\" as TEXT), 'geometry', new.\"geometry\", 'properties', new.\"properties\", 'vector_layer_geom_id', new.\"vector_layer_geom_id\", 'vector_layer_id', new.\"vector_layer_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_vector_layer_geoms_into_oplog;",
      "CREATE TRIGGER update_main_vector_layer_geoms_into_oplog\n   AFTER UPDATE ON \"main\".\"vector_layer_geoms\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'vector_layer_geoms')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'vector_layer_geoms', 'UPDATE', json_patch('{}', json_object('vector_layer_geom_id', new.\"vector_layer_geom_id\")), json_object('account_id', new.\"account_id\", 'bbox_ne_lat', cast(new.\"bbox_ne_lat\" as TEXT), 'bbox_ne_lng', cast(new.\"bbox_ne_lng\" as TEXT), 'bbox_sw_lat', cast(new.\"bbox_sw_lat\" as TEXT), 'bbox_sw_lng', cast(new.\"bbox_sw_lng\" as TEXT), 'geometry', new.\"geometry\", 'properties', new.\"properties\", 'vector_layer_geom_id', new.\"vector_layer_geom_id\", 'vector_layer_id', new.\"vector_layer_id\"), json_object('account_id', old.\"account_id\", 'bbox_ne_lat', cast(old.\"bbox_ne_lat\" as TEXT), 'bbox_ne_lng', cast(old.\"bbox_ne_lng\" as TEXT), 'bbox_sw_lat', cast(old.\"bbox_sw_lat\" as TEXT), 'bbox_sw_lng', cast(old.\"bbox_sw_lng\" as TEXT), 'geometry', old.\"geometry\", 'properties', old.\"properties\", 'vector_layer_geom_id', old.\"vector_layer_geom_id\", 'vector_layer_id', old.\"vector_layer_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_vector_layer_geoms_into_oplog;",
      "CREATE TRIGGER delete_main_vector_layer_geoms_into_oplog\n   AFTER DELETE ON \"main\".\"vector_layer_geoms\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'vector_layer_geoms')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'vector_layer_geoms', 'DELETE', json_patch('{}', json_object('vector_layer_geom_id', old.\"vector_layer_geom_id\")), NULL, json_object('account_id', old.\"account_id\", 'bbox_ne_lat', cast(old.\"bbox_ne_lat\" as TEXT), 'bbox_ne_lng', cast(old.\"bbox_ne_lng\" as TEXT), 'bbox_sw_lat', cast(old.\"bbox_sw_lat\" as TEXT), 'bbox_sw_lng', cast(old.\"bbox_sw_lng\" as TEXT), 'geometry', old.\"geometry\", 'properties', old.\"properties\", 'vector_layer_geom_id', old.\"vector_layer_geom_id\", 'vector_layer_id', old.\"vector_layer_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_vector_layer_geoms_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_vector_layer_geoms_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"vector_layer_geoms\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'vector_layer_geoms') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_vector_layer_geoms_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_vector_layer_geoms_account_id_into_oplog\n  AFTER UPDATE ON \"main\".\"vector_layer_geoms\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'vector_layer_geoms') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_vector_layer_geoms_vector_layer_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_vector_layer_geoms_vector_layer_id_into_oplog\n  AFTER INSERT ON \"main\".\"vector_layer_geoms\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'vector_layer_geoms') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'vector_layers', 'COMPENSATION', json_patch('{}', json_object('vector_layer_id', \"vector_layer_id\")), json_object('vector_layer_id', \"vector_layer_id\"), NULL, NULL\n  FROM \"main\".\"vector_layers\" WHERE \"vector_layer_id\" = new.\"vector_layer_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_vector_layer_geoms_vector_layer_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_vector_layer_geoms_vector_layer_id_into_oplog\n  AFTER UPDATE ON \"main\".\"vector_layer_geoms\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'vector_layer_geoms') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'vector_layers', 'COMPENSATION', json_patch('{}', json_object('vector_layer_id', \"vector_layer_id\")), json_object('vector_layer_id', \"vector_layer_id\"), NULL, NULL\n  FROM \"main\".\"vector_layers\" WHERE \"vector_layer_id\" = new.\"vector_layer_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'vector_layer_displays', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_vector_layer_displays_primarykey;",
      "CREATE TRIGGER update_ensure_main_vector_layer_displays_primarykey\n  BEFORE UPDATE ON \"main\".\"vector_layer_displays\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"vector_layer_display_id\" != new.\"vector_layer_display_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column vector_layer_display_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_vector_layer_displays_into_oplog;",
      "CREATE TRIGGER insert_main_vector_layer_displays_into_oplog\n   AFTER INSERT ON \"main\".\"vector_layer_displays\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'vector_layer_displays')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'vector_layer_displays', 'INSERT', json_patch('{}', json_object('vector_layer_display_id', new.\"vector_layer_display_id\")), json_object('account_id', new.\"account_id\", 'circle_marker_radius', new.\"circle_marker_radius\", 'color', new.\"color\", 'dash_array', new.\"dash_array\", 'dash_offset', new.\"dash_offset\", 'display_property_value', new.\"display_property_value\", 'fill', new.\"fill\", 'fill_color', new.\"fill_color\", 'fill_opacity_percent', new.\"fill_opacity_percent\", 'fill_rule', new.\"fill_rule\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'line_cap', new.\"line_cap\", 'line_join', new.\"line_join\", 'marker_size', new.\"marker_size\", 'marker_symbol', new.\"marker_symbol\", 'marker_type', new.\"marker_type\", 'opacity_percent', new.\"opacity_percent\", 'stroke', new.\"stroke\", 'vector_layer_display_id', new.\"vector_layer_display_id\", 'vector_layer_id', new.\"vector_layer_id\", 'weight', new.\"weight\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_vector_layer_displays_into_oplog;",
      "CREATE TRIGGER update_main_vector_layer_displays_into_oplog\n   AFTER UPDATE ON \"main\".\"vector_layer_displays\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'vector_layer_displays')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'vector_layer_displays', 'UPDATE', json_patch('{}', json_object('vector_layer_display_id', new.\"vector_layer_display_id\")), json_object('account_id', new.\"account_id\", 'circle_marker_radius', new.\"circle_marker_radius\", 'color', new.\"color\", 'dash_array', new.\"dash_array\", 'dash_offset', new.\"dash_offset\", 'display_property_value', new.\"display_property_value\", 'fill', new.\"fill\", 'fill_color', new.\"fill_color\", 'fill_opacity_percent', new.\"fill_opacity_percent\", 'fill_rule', new.\"fill_rule\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'line_cap', new.\"line_cap\", 'line_join', new.\"line_join\", 'marker_size', new.\"marker_size\", 'marker_symbol', new.\"marker_symbol\", 'marker_type', new.\"marker_type\", 'opacity_percent', new.\"opacity_percent\", 'stroke', new.\"stroke\", 'vector_layer_display_id', new.\"vector_layer_display_id\", 'vector_layer_id', new.\"vector_layer_id\", 'weight', new.\"weight\"), json_object('account_id', old.\"account_id\", 'circle_marker_radius', old.\"circle_marker_radius\", 'color', old.\"color\", 'dash_array', old.\"dash_array\", 'dash_offset', old.\"dash_offset\", 'display_property_value', old.\"display_property_value\", 'fill', old.\"fill\", 'fill_color', old.\"fill_color\", 'fill_opacity_percent', old.\"fill_opacity_percent\", 'fill_rule', old.\"fill_rule\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'line_cap', old.\"line_cap\", 'line_join', old.\"line_join\", 'marker_size', old.\"marker_size\", 'marker_symbol', old.\"marker_symbol\", 'marker_type', old.\"marker_type\", 'opacity_percent', old.\"opacity_percent\", 'stroke', old.\"stroke\", 'vector_layer_display_id', old.\"vector_layer_display_id\", 'vector_layer_id', old.\"vector_layer_id\", 'weight', old.\"weight\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_vector_layer_displays_into_oplog;",
      "CREATE TRIGGER delete_main_vector_layer_displays_into_oplog\n   AFTER DELETE ON \"main\".\"vector_layer_displays\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'vector_layer_displays')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'vector_layer_displays', 'DELETE', json_patch('{}', json_object('vector_layer_display_id', old.\"vector_layer_display_id\")), NULL, json_object('account_id', old.\"account_id\", 'circle_marker_radius', old.\"circle_marker_radius\", 'color', old.\"color\", 'dash_array', old.\"dash_array\", 'dash_offset', old.\"dash_offset\", 'display_property_value', old.\"display_property_value\", 'fill', old.\"fill\", 'fill_color', old.\"fill_color\", 'fill_opacity_percent', old.\"fill_opacity_percent\", 'fill_rule', old.\"fill_rule\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'line_cap', old.\"line_cap\", 'line_join', old.\"line_join\", 'marker_size', old.\"marker_size\", 'marker_symbol', old.\"marker_symbol\", 'marker_type', old.\"marker_type\", 'opacity_percent', old.\"opacity_percent\", 'stroke', old.\"stroke\", 'vector_layer_display_id', old.\"vector_layer_display_id\", 'vector_layer_id', old.\"vector_layer_id\", 'weight', old.\"weight\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_vector_layer_displays_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_vector_layer_displays_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"vector_layer_displays\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'vector_layer_displays') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_vector_layer_displays_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_vector_layer_displays_account_id_into_oplog\n  AFTER UPDATE ON \"main\".\"vector_layer_displays\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'vector_layer_displays') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_vector_layer_displays_vector_layer_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_vector_layer_displays_vector_layer_id_into_oplog\n  AFTER INSERT ON \"main\".\"vector_layer_displays\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'vector_layer_displays') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'vector_layers', 'COMPENSATION', json_patch('{}', json_object('vector_layer_id', \"vector_layer_id\")), json_object('vector_layer_id', \"vector_layer_id\"), NULL, NULL\n  FROM \"main\".\"vector_layers\" WHERE \"vector_layer_id\" = new.\"vector_layer_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_vector_layer_displays_vector_layer_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_vector_layer_displays_vector_layer_id_into_oplog\n  AFTER UPDATE ON \"main\".\"vector_layer_displays\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'vector_layer_displays') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'vector_layers', 'COMPENSATION', json_patch('{}', json_object('vector_layer_id', \"vector_layer_id\")), json_object('vector_layer_id', \"vector_layer_id\"), NULL, NULL\n  FROM \"main\".\"vector_layers\" WHERE \"vector_layer_id\" = new.\"vector_layer_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'notifications', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_notifications_primarykey;",
      "CREATE TRIGGER update_ensure_main_notifications_primarykey\n  BEFORE UPDATE ON \"main\".\"notifications\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"notification_id\" != new.\"notification_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column notification_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_notifications_into_oplog;",
      "CREATE TRIGGER insert_main_notifications_into_oplog\n   AFTER INSERT ON \"main\".\"notifications\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'notifications')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'notifications', 'INSERT', json_patch('{}', json_object('notification_id', new.\"notification_id\")), json_object('body', new.\"body\", 'intent', new.\"intent\", 'notification_id', new.\"notification_id\", 'paused', new.\"paused\", 'progress_percent', new.\"progress_percent\", 'timeout', new.\"timeout\", 'title', new.\"title\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_notifications_into_oplog;",
      "CREATE TRIGGER update_main_notifications_into_oplog\n   AFTER UPDATE ON \"main\".\"notifications\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'notifications')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'notifications', 'UPDATE', json_patch('{}', json_object('notification_id', new.\"notification_id\")), json_object('body', new.\"body\", 'intent', new.\"intent\", 'notification_id', new.\"notification_id\", 'paused', new.\"paused\", 'progress_percent', new.\"progress_percent\", 'timeout', new.\"timeout\", 'title', new.\"title\"), json_object('body', old.\"body\", 'intent', old.\"intent\", 'notification_id', old.\"notification_id\", 'paused', old.\"paused\", 'progress_percent', old.\"progress_percent\", 'timeout', old.\"timeout\", 'title', old.\"title\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_notifications_into_oplog;",
      "CREATE TRIGGER delete_main_notifications_into_oplog\n   AFTER DELETE ON \"main\".\"notifications\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'notifications')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'notifications', 'DELETE', json_patch('{}', json_object('notification_id', old.\"notification_id\")), NULL, json_object('body', old.\"body\", 'intent', old.\"intent\", 'notification_id', old.\"notification_id\", 'paused', old.\"paused\", 'progress_percent', old.\"progress_percent\", 'timeout', old.\"timeout\", 'title', old.\"title\"), NULL);\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'charts', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_charts_primarykey;",
      "CREATE TRIGGER update_ensure_main_charts_primarykey\n  BEFORE UPDATE ON \"main\".\"charts\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"chart_id\" != new.\"chart_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column chart_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_charts_into_oplog;",
      "CREATE TRIGGER insert_main_charts_into_oplog\n   AFTER INSERT ON \"main\".\"charts\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'charts')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'charts', 'INSERT', json_patch('{}', json_object('chart_id', new.\"chart_id\")), json_object('account_id', new.\"account_id\", 'chart_id', new.\"chart_id\", 'chart_type', new.\"chart_type\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'percent', new.\"percent\", 'place_id', new.\"place_id\", 'project_id', new.\"project_id\", 'subjects_single', new.\"subjects_single\", 'subjects_stacked', new.\"subjects_stacked\", 'subproject_id', new.\"subproject_id\", 'title', new.\"title\", 'years_current', new.\"years_current\", 'years_last_x', new.\"years_last_x\", 'years_previous', new.\"years_previous\", 'years_since', new.\"years_since\", 'years_specific', new.\"years_specific\", 'years_until', new.\"years_until\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_charts_into_oplog;",
      "CREATE TRIGGER update_main_charts_into_oplog\n   AFTER UPDATE ON \"main\".\"charts\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'charts')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'charts', 'UPDATE', json_patch('{}', json_object('chart_id', new.\"chart_id\")), json_object('account_id', new.\"account_id\", 'chart_id', new.\"chart_id\", 'chart_type', new.\"chart_type\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'percent', new.\"percent\", 'place_id', new.\"place_id\", 'project_id', new.\"project_id\", 'subjects_single', new.\"subjects_single\", 'subjects_stacked', new.\"subjects_stacked\", 'subproject_id', new.\"subproject_id\", 'title', new.\"title\", 'years_current', new.\"years_current\", 'years_last_x', new.\"years_last_x\", 'years_previous', new.\"years_previous\", 'years_since', new.\"years_since\", 'years_specific', new.\"years_specific\", 'years_until', new.\"years_until\"), json_object('account_id', old.\"account_id\", 'chart_id', old.\"chart_id\", 'chart_type', old.\"chart_type\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'percent', old.\"percent\", 'place_id', old.\"place_id\", 'project_id', old.\"project_id\", 'subjects_single', old.\"subjects_single\", 'subjects_stacked', old.\"subjects_stacked\", 'subproject_id', old.\"subproject_id\", 'title', old.\"title\", 'years_current', old.\"years_current\", 'years_last_x', old.\"years_last_x\", 'years_previous', old.\"years_previous\", 'years_since', old.\"years_since\", 'years_specific', old.\"years_specific\", 'years_until', old.\"years_until\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_charts_into_oplog;",
      "CREATE TRIGGER delete_main_charts_into_oplog\n   AFTER DELETE ON \"main\".\"charts\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'charts')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'charts', 'DELETE', json_patch('{}', json_object('chart_id', old.\"chart_id\")), NULL, json_object('account_id', old.\"account_id\", 'chart_id', old.\"chart_id\", 'chart_type', old.\"chart_type\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'percent', old.\"percent\", 'place_id', old.\"place_id\", 'project_id', old.\"project_id\", 'subjects_single', old.\"subjects_single\", 'subjects_stacked', old.\"subjects_stacked\", 'subproject_id', old.\"subproject_id\", 'title', old.\"title\", 'years_current', old.\"years_current\", 'years_last_x', old.\"years_last_x\", 'years_previous', old.\"years_previous\", 'years_since', old.\"years_since\", 'years_specific', old.\"years_specific\", 'years_until', old.\"years_until\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_charts_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_charts_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"charts\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'charts') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_charts_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_charts_account_id_into_oplog\n  AFTER UPDATE ON \"main\".\"charts\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'charts') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_charts_place_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_charts_place_id_into_oplog\n  AFTER INSERT ON \"main\".\"charts\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'charts') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'places', 'COMPENSATION', json_patch('{}', json_object('place_id', \"place_id\")), json_object('place_id', \"place_id\"), NULL, NULL\n  FROM \"main\".\"places\" WHERE \"place_id\" = new.\"place_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_charts_place_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_charts_place_id_into_oplog\n  AFTER UPDATE ON \"main\".\"charts\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'charts') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'places', 'COMPENSATION', json_patch('{}', json_object('place_id', \"place_id\")), json_object('place_id', \"place_id\"), NULL, NULL\n  FROM \"main\".\"places\" WHERE \"place_id\" = new.\"place_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_charts_project_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_charts_project_id_into_oplog\n  AFTER INSERT ON \"main\".\"charts\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'charts') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_patch('{}', json_object('project_id', \"project_id\")), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_charts_project_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_charts_project_id_into_oplog\n  AFTER UPDATE ON \"main\".\"charts\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'charts') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_patch('{}', json_object('project_id', \"project_id\")), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_charts_subproject_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_charts_subproject_id_into_oplog\n  AFTER INSERT ON \"main\".\"charts\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'charts') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'subprojects', 'COMPENSATION', json_patch('{}', json_object('subproject_id', \"subproject_id\")), json_object('subproject_id', \"subproject_id\"), NULL, NULL\n  FROM \"main\".\"subprojects\" WHERE \"subproject_id\" = new.\"subproject_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_charts_subproject_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_charts_subproject_id_into_oplog\n  AFTER UPDATE ON \"main\".\"charts\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'charts') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'subprojects', 'COMPENSATION', json_patch('{}', json_object('subproject_id', \"subproject_id\")), json_object('subproject_id', \"subproject_id\"), NULL, NULL\n  FROM \"main\".\"subprojects\" WHERE \"subproject_id\" = new.\"subproject_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'chart_subjects', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_chart_subjects_primarykey;",
      "CREATE TRIGGER update_ensure_main_chart_subjects_primarykey\n  BEFORE UPDATE ON \"main\".\"chart_subjects\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"chart_subject_id\" != new.\"chart_subject_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column chart_subject_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_chart_subjects_into_oplog;",
      "CREATE TRIGGER insert_main_chart_subjects_into_oplog\n   AFTER INSERT ON \"main\".\"chart_subjects\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'chart_subjects')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'chart_subjects', 'INSERT', json_patch('{}', json_object('chart_subject_id', new.\"chart_subject_id\")), json_object('account_id', new.\"account_id\", 'chart_id', new.\"chart_id\", 'chart_subject_id', new.\"chart_subject_id\", 'connect_nulls', new.\"connect_nulls\", 'fill', new.\"fill\", 'fill_graded', new.\"fill_graded\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'name', new.\"name\", 'sort', new.\"sort\", 'stroke', new.\"stroke\", 'table_filter', new.\"table_filter\", 'table_level', new.\"table_level\", 'table_name', new.\"table_name\", 'type', new.\"type\", 'value_field', new.\"value_field\", 'value_source', new.\"value_source\", 'value_unit', new.\"value_unit\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_chart_subjects_into_oplog;",
      "CREATE TRIGGER update_main_chart_subjects_into_oplog\n   AFTER UPDATE ON \"main\".\"chart_subjects\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'chart_subjects')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'chart_subjects', 'UPDATE', json_patch('{}', json_object('chart_subject_id', new.\"chart_subject_id\")), json_object('account_id', new.\"account_id\", 'chart_id', new.\"chart_id\", 'chart_subject_id', new.\"chart_subject_id\", 'connect_nulls', new.\"connect_nulls\", 'fill', new.\"fill\", 'fill_graded', new.\"fill_graded\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'name', new.\"name\", 'sort', new.\"sort\", 'stroke', new.\"stroke\", 'table_filter', new.\"table_filter\", 'table_level', new.\"table_level\", 'table_name', new.\"table_name\", 'type', new.\"type\", 'value_field', new.\"value_field\", 'value_source', new.\"value_source\", 'value_unit', new.\"value_unit\"), json_object('account_id', old.\"account_id\", 'chart_id', old.\"chart_id\", 'chart_subject_id', old.\"chart_subject_id\", 'connect_nulls', old.\"connect_nulls\", 'fill', old.\"fill\", 'fill_graded', old.\"fill_graded\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'name', old.\"name\", 'sort', old.\"sort\", 'stroke', old.\"stroke\", 'table_filter', old.\"table_filter\", 'table_level', old.\"table_level\", 'table_name', old.\"table_name\", 'type', old.\"type\", 'value_field', old.\"value_field\", 'value_source', old.\"value_source\", 'value_unit', old.\"value_unit\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_chart_subjects_into_oplog;",
      "CREATE TRIGGER delete_main_chart_subjects_into_oplog\n   AFTER DELETE ON \"main\".\"chart_subjects\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'chart_subjects')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'chart_subjects', 'DELETE', json_patch('{}', json_object('chart_subject_id', old.\"chart_subject_id\")), NULL, json_object('account_id', old.\"account_id\", 'chart_id', old.\"chart_id\", 'chart_subject_id', old.\"chart_subject_id\", 'connect_nulls', old.\"connect_nulls\", 'fill', old.\"fill\", 'fill_graded', old.\"fill_graded\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'name', old.\"name\", 'sort', old.\"sort\", 'stroke', old.\"stroke\", 'table_filter', old.\"table_filter\", 'table_level', old.\"table_level\", 'table_name', old.\"table_name\", 'type', old.\"type\", 'value_field', old.\"value_field\", 'value_source', old.\"value_source\", 'value_unit', old.\"value_unit\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_chart_subjects_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_chart_subjects_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"chart_subjects\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'chart_subjects') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_chart_subjects_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_chart_subjects_account_id_into_oplog\n  AFTER UPDATE ON \"main\".\"chart_subjects\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'chart_subjects') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_chart_subjects_chart_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_chart_subjects_chart_id_into_oplog\n  AFTER INSERT ON \"main\".\"chart_subjects\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'chart_subjects') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'charts', 'COMPENSATION', json_patch('{}', json_object('chart_id', \"chart_id\")), json_object('chart_id', \"chart_id\"), NULL, NULL\n  FROM \"main\".\"charts\" WHERE \"chart_id\" = new.\"chart_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_chart_subjects_chart_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_chart_subjects_chart_id_into_oplog\n  AFTER UPDATE ON \"main\".\"chart_subjects\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'chart_subjects') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'charts', 'COMPENSATION', json_patch('{}', json_object('chart_id', \"chart_id\")), json_object('chart_id', \"chart_id\"), NULL, NULL\n  FROM \"main\".\"charts\" WHERE \"chart_id\" = new.\"chart_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_chart_subjects_value_unit_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_chart_subjects_value_unit_into_oplog\n  AFTER INSERT ON \"main\".\"chart_subjects\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'chart_subjects') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'units', 'COMPENSATION', json_patch('{}', json_object('unit_id', \"unit_id\")), json_object('unit_id', \"unit_id\"), NULL, NULL\n  FROM \"main\".\"units\" WHERE \"unit_id\" = new.\"value_unit\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_chart_subjects_value_unit_into_oplog;",
      "CREATE TRIGGER compensation_update_main_chart_subjects_value_unit_into_oplog\n  AFTER UPDATE ON \"main\".\"chart_subjects\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'chart_subjects') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'units', 'COMPENSATION', json_patch('{}', json_object('unit_id', \"unit_id\")), json_object('unit_id', \"unit_id\"), NULL, NULL\n  FROM \"main\".\"units\" WHERE \"unit_id\" = new.\"value_unit\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'crs', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_crs_primarykey;",
      "CREATE TRIGGER update_ensure_main_crs_primarykey\n  BEFORE UPDATE ON \"main\".\"crs\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"crs_id\" != new.\"crs_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column crs_id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_crs_into_oplog;",
      "CREATE TRIGGER insert_main_crs_into_oplog\n   AFTER INSERT ON \"main\".\"crs\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'crs')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'crs', 'INSERT', json_patch('{}', json_object('crs_id', new.\"crs_id\")), json_object('account_id', new.\"account_id\", 'code', new.\"code\", 'crs_id', new.\"crs_id\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'name', new.\"name\", 'proj4', new.\"proj4\", 'project_id', new.\"project_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_crs_into_oplog;",
      "CREATE TRIGGER update_main_crs_into_oplog\n   AFTER UPDATE ON \"main\".\"crs\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'crs')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'crs', 'UPDATE', json_patch('{}', json_object('crs_id', new.\"crs_id\")), json_object('account_id', new.\"account_id\", 'code', new.\"code\", 'crs_id', new.\"crs_id\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'name', new.\"name\", 'proj4', new.\"proj4\", 'project_id', new.\"project_id\"), json_object('account_id', old.\"account_id\", 'code', old.\"code\", 'crs_id', old.\"crs_id\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'name', old.\"name\", 'proj4', old.\"proj4\", 'project_id', old.\"project_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_crs_into_oplog;",
      "CREATE TRIGGER delete_main_crs_into_oplog\n   AFTER DELETE ON \"main\".\"crs\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'crs')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'crs', 'DELETE', json_patch('{}', json_object('crs_id', old.\"crs_id\")), NULL, json_object('account_id', old.\"account_id\", 'code', old.\"code\", 'crs_id', old.\"crs_id\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'name', old.\"name\", 'proj4', old.\"proj4\", 'project_id', old.\"project_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_crs_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_crs_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"crs\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'crs') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_crs_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_crs_account_id_into_oplog\n  AFTER UPDATE ON \"main\".\"crs\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'crs') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_patch('{}', json_object('account_id', \"account_id\")), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_crs_project_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_crs_project_id_into_oplog\n  AFTER INSERT ON \"main\".\"crs\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'crs') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_patch('{}', json_object('project_id', \"project_id\")), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_crs_project_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_crs_project_id_into_oplog\n  AFTER UPDATE ON \"main\".\"crs\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'crs') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'projects', 'COMPENSATION', json_patch('{}', json_object('project_id', \"project_id\")), json_object('project_id', \"project_id\"), NULL, NULL\n  FROM \"main\".\"projects\" WHERE \"project_id\" = new.\"project_id\";\nEND;"
    ],
    "version": "1"
  }
]