/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PathlessLayoutImport } from './routes/_pathlessLayout'
import { Route as DataIndexImport } from './routes/data/index'
import { Route as PathlessLayoutIndexImport } from './routes/_pathlessLayout.index'
import { Route as DataAuthImport } from './routes/data/auth'
import { Route as PathlessLayoutDocsImport } from './routes/_pathlessLayout.docs'
import { Route as DataProjectsIndexImport } from './routes/data/projects/index'

// Create/Update Routes

const PathlessLayoutRoute = PathlessLayoutImport.update({
  id: '/_pathlessLayout',
  getParentRoute: () => rootRoute,
} as any)

const DataIndexRoute = DataIndexImport.update({
  id: '/data/',
  path: '/data/',
  getParentRoute: () => rootRoute,
} as any)

const PathlessLayoutIndexRoute = PathlessLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PathlessLayoutRoute,
} as any)

const DataAuthRoute = DataAuthImport.update({
  id: '/data/auth',
  path: '/data/auth',
  getParentRoute: () => rootRoute,
} as any)

const PathlessLayoutDocsRoute = PathlessLayoutDocsImport.update({
  id: '/docs',
  path: '/docs',
  getParentRoute: () => PathlessLayoutRoute,
} as any)

const DataProjectsIndexRoute = DataProjectsIndexImport.update({
  id: '/data/projects/',
  path: '/data/projects/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_pathlessLayout': {
      id: '/_pathlessLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutImport
      parentRoute: typeof rootRoute
    }
    '/_pathlessLayout/docs': {
      id: '/_pathlessLayout/docs'
      path: '/docs'
      fullPath: '/docs'
      preLoaderRoute: typeof PathlessLayoutDocsImport
      parentRoute: typeof PathlessLayoutImport
    }
    '/data/auth': {
      id: '/data/auth'
      path: '/data/auth'
      fullPath: '/data/auth'
      preLoaderRoute: typeof DataAuthImport
      parentRoute: typeof rootRoute
    }
    '/_pathlessLayout/': {
      id: '/_pathlessLayout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PathlessLayoutIndexImport
      parentRoute: typeof PathlessLayoutImport
    }
    '/data/': {
      id: '/data/'
      path: '/data'
      fullPath: '/data'
      preLoaderRoute: typeof DataIndexImport
      parentRoute: typeof rootRoute
    }
    '/data/projects/': {
      id: '/data/projects/'
      path: '/data/projects'
      fullPath: '/data/projects'
      preLoaderRoute: typeof DataProjectsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface PathlessLayoutRouteChildren {
  PathlessLayoutDocsRoute: typeof PathlessLayoutDocsRoute
  PathlessLayoutIndexRoute: typeof PathlessLayoutIndexRoute
}

const PathlessLayoutRouteChildren: PathlessLayoutRouteChildren = {
  PathlessLayoutDocsRoute: PathlessLayoutDocsRoute,
  PathlessLayoutIndexRoute: PathlessLayoutIndexRoute,
}

const PathlessLayoutRouteWithChildren = PathlessLayoutRoute._addFileChildren(
  PathlessLayoutRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof PathlessLayoutRouteWithChildren
  '/docs': typeof PathlessLayoutDocsRoute
  '/data/auth': typeof DataAuthRoute
  '/': typeof PathlessLayoutIndexRoute
  '/data': typeof DataIndexRoute
  '/data/projects': typeof DataProjectsIndexRoute
}

export interface FileRoutesByTo {
  '/docs': typeof PathlessLayoutDocsRoute
  '/data/auth': typeof DataAuthRoute
  '/': typeof PathlessLayoutIndexRoute
  '/data': typeof DataIndexRoute
  '/data/projects': typeof DataProjectsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_pathlessLayout': typeof PathlessLayoutRouteWithChildren
  '/_pathlessLayout/docs': typeof PathlessLayoutDocsRoute
  '/data/auth': typeof DataAuthRoute
  '/_pathlessLayout/': typeof PathlessLayoutIndexRoute
  '/data/': typeof DataIndexRoute
  '/data/projects/': typeof DataProjectsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/docs' | '/data/auth' | '/' | '/data' | '/data/projects'
  fileRoutesByTo: FileRoutesByTo
  to: '/docs' | '/data/auth' | '/' | '/data' | '/data/projects'
  id:
    | '__root__'
    | '/_pathlessLayout'
    | '/_pathlessLayout/docs'
    | '/data/auth'
    | '/_pathlessLayout/'
    | '/data/'
    | '/data/projects/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  PathlessLayoutRoute: typeof PathlessLayoutRouteWithChildren
  DataAuthRoute: typeof DataAuthRoute
  DataIndexRoute: typeof DataIndexRoute
  DataProjectsIndexRoute: typeof DataProjectsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  PathlessLayoutRoute: PathlessLayoutRouteWithChildren,
  DataAuthRoute: DataAuthRoute,
  DataIndexRoute: DataIndexRoute,
  DataProjectsIndexRoute: DataProjectsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_pathlessLayout",
        "/data/auth",
        "/data/",
        "/data/projects/"
      ]
    },
    "/_pathlessLayout": {
      "filePath": "_pathlessLayout.tsx",
      "children": [
        "/_pathlessLayout/docs",
        "/_pathlessLayout/"
      ]
    },
    "/_pathlessLayout/docs": {
      "filePath": "_pathlessLayout.docs.tsx",
      "parent": "/_pathlessLayout"
    },
    "/data/auth": {
      "filePath": "data/auth.tsx"
    },
    "/_pathlessLayout/": {
      "filePath": "_pathlessLayout.index.tsx",
      "parent": "/_pathlessLayout"
    },
    "/data/": {
      "filePath": "data/index.tsx"
    },
    "/data/projects/": {
      "filePath": "data/projects/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
